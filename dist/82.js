"use strict";(self.webpackChunktimeline_events_module=self.webpackChunktimeline_events_module||[]).push([[82],{12:(e,t,i)=>{i.d(t,{A:()=>o});var r=i(354),s=i.n(r),n=i(314),a=i.n(n)()(s());a.push([e.id,".swiper-pagination{position:absolute;text-align:center;transition:300ms opacity;transform:translate3d(0, 0, 0);z-index:10}.swiper-pagination.swiper-pagination-hidden{opacity:0}.swiper-pagination-disabled>.swiper-pagination,.swiper-pagination.swiper-pagination-disabled{display:none !important}.swiper-pagination-fraction,.swiper-pagination-custom,.swiper-horizontal>.swiper-pagination-bullets,.swiper-pagination-bullets.swiper-pagination-horizontal{bottom:var(--swiper-pagination-bottom, 8px);top:var(--swiper-pagination-top, auto);left:0;width:100%}.swiper-pagination-bullets-dynamic{overflow:hidden;font-size:0}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet{transform:scale(0.33);position:relative}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active{transform:scale(1)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-main{transform:scale(1)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-prev{transform:scale(0.66)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-prev-prev{transform:scale(0.33)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-next{transform:scale(0.66)}.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-next-next{transform:scale(0.33)}.swiper-pagination-bullet{width:var(--swiper-pagination-bullet-width, var(--swiper-pagination-bullet-size, 8px));height:var(--swiper-pagination-bullet-height, var(--swiper-pagination-bullet-size, 8px));display:inline-block;border-radius:var(--swiper-pagination-bullet-border-radius, 50%);background:var(--swiper-pagination-bullet-inactive-color, #000);opacity:var(--swiper-pagination-bullet-inactive-opacity, 0.2)}button.swiper-pagination-bullet{border:none;margin:0;padding:0;box-shadow:none;-webkit-appearance:none;appearance:none}.swiper-pagination-clickable .swiper-pagination-bullet{cursor:pointer}.swiper-pagination-bullet:only-child{display:none !important}.swiper-pagination-bullet-active{opacity:var(--swiper-pagination-bullet-opacity, 1);background:var(--swiper-pagination-color, var(--swiper-theme-color))}.swiper-vertical>.swiper-pagination-bullets,.swiper-pagination-vertical.swiper-pagination-bullets{right:var(--swiper-pagination-right, 8px);left:var(--swiper-pagination-left, auto);top:50%;transform:translate3d(0px, -50%, 0)}.swiper-vertical>.swiper-pagination-bullets .swiper-pagination-bullet,.swiper-pagination-vertical.swiper-pagination-bullets .swiper-pagination-bullet{margin:var(--swiper-pagination-bullet-vertical-gap, 6px) 0;display:block}.swiper-vertical>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic,.swiper-pagination-vertical.swiper-pagination-bullets.swiper-pagination-bullets-dynamic{top:50%;transform:translateY(-50%);width:8px}.swiper-vertical>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet,.swiper-pagination-vertical.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet{display:inline-block;transition:200ms transform,200ms top}.swiper-horizontal>.swiper-pagination-bullets .swiper-pagination-bullet,.swiper-pagination-horizontal.swiper-pagination-bullets .swiper-pagination-bullet{margin:0 var(--swiper-pagination-bullet-horizontal-gap, 4px)}.swiper-horizontal>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic,.swiper-pagination-horizontal.swiper-pagination-bullets.swiper-pagination-bullets-dynamic{left:50%;transform:translateX(-50%);white-space:nowrap}.swiper-horizontal>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet,.swiper-pagination-horizontal.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet{transition:200ms transform,200ms left}.swiper-horizontal.swiper-rtl>.swiper-pagination-bullets-dynamic .swiper-pagination-bullet{transition:200ms transform,200ms right}.swiper-pagination-fraction{color:var(--swiper-pagination-fraction-color, inherit)}.swiper-pagination-progressbar{background:var(--swiper-pagination-progressbar-bg-color, rgba(0, 0, 0, 0.25));position:absolute}.swiper-pagination-progressbar .swiper-pagination-progressbar-fill{background:var(--swiper-pagination-color, var(--swiper-theme-color));position:absolute;left:0;top:0;width:100%;height:100%;transform:scale(0);transform-origin:left top}.swiper-rtl .swiper-pagination-progressbar .swiper-pagination-progressbar-fill{transform-origin:right top}.swiper-horizontal>.swiper-pagination-progressbar,.swiper-pagination-progressbar.swiper-pagination-horizontal,.swiper-vertical>.swiper-pagination-progressbar.swiper-pagination-progressbar-opposite,.swiper-pagination-progressbar.swiper-pagination-vertical.swiper-pagination-progressbar-opposite{width:100%;height:var(--swiper-pagination-progressbar-size, 4px);left:0;top:0}.swiper-vertical>.swiper-pagination-progressbar,.swiper-pagination-progressbar.swiper-pagination-vertical,.swiper-horizontal>.swiper-pagination-progressbar.swiper-pagination-progressbar-opposite,.swiper-pagination-progressbar.swiper-pagination-horizontal.swiper-pagination-progressbar-opposite{width:var(--swiper-pagination-progressbar-size, 4px);height:100%;left:0;top:0}.swiper-pagination-lock{display:none}","",{version:3,sources:["webpack://./node_modules/swiper/modules/pagination.css"],names:[],mappings:"AAqBA,mBACE,iBAAA,CACA,iBAAA,CACA,wBAAA,CACA,8BAAA,CACA,UAAA,CAEF,4CACE,SAAA,CAEF,6FAEE,uBAAA,CAGF,4JAIE,2CAAA,CACA,sCAAA,CACA,MAAA,CACA,UAAA,CAGF,mCACE,eAAA,CACA,WAAA,CAEF,6DACE,qBAAA,CACA,iBAAA,CAEF,oEACE,kBAAA,CAEF,yEACE,kBAAA,CAEF,yEACE,qBAAA,CAEF,8EACE,qBAAA,CAEF,yEACE,qBAAA,CAEF,8EACE,qBAAA,CAEF,0BACE,sFAAA,CACA,wFAAA,CACA,oBAAA,CACA,gEAAA,CACA,+DAAA,CACA,6DAAA,CAEF,gCACE,WAAA,CACA,QAAA,CACA,SAAA,CACA,eAAA,CACA,uBAAA,CACQ,eAAA,CAEV,uDACE,cAAA,CAEF,qCACE,uBAAA,CAEF,iCACE,kDAAA,CACA,oEAAA,CAEF,kGAEE,yCAAA,CACA,wCAAA,CACA,OAAA,CACA,mCAAA,CAEF,sJAEE,0DAAA,CACA,aAAA,CAEF,sKAEE,OAAA,CACA,0BAAA,CACA,SAAA,CAEF,0NAEE,oBAAA,CACA,oCAAA,CAGF,0JAEE,4DAAA,CAEF,0KAEE,QAAA,CACA,0BAAA,CACA,kBAAA,CAEF,8NAEE,qCAAA,CAGF,2FACE,sCAAA,CAIF,4BACE,sDAAA,CAGF,+BACE,6EAAA,CACA,iBAAA,CAEF,mEACE,oEAAA,CACA,iBAAA,CACA,MAAA,CACA,KAAA,CACA,UAAA,CACA,WAAA,CACA,kBAAA,CACA,yBAAA,CAEF,+EACE,0BAAA,CAEF,sSAIE,UAAA,CACA,qDAAA,CACA,MAAA,CACA,KAAA,CAEF,sSAIE,oDAAA,CACA,WAAA,CACA,MAAA,CACA,KAAA,CAEF,wBACE,YAAA",sourcesContent:[":root {\n  /*\n  --swiper-pagination-color: var(--swiper-theme-color);\n  --swiper-pagination-left: auto;\n  --swiper-pagination-right: 8px;\n  --swiper-pagination-bottom: 8px;\n  --swiper-pagination-top: auto;\n  --swiper-pagination-fraction-color: inherit;\n  --swiper-pagination-progressbar-bg-color: rgba(0,0,0,0.25);\n  --swiper-pagination-progressbar-size: 4px;\n  --swiper-pagination-bullet-size: 8px;\n  --swiper-pagination-bullet-width: 8px;\n  --swiper-pagination-bullet-height: 8px;\n  --swiper-pagination-bullet-border-radius: 50%;\n  --swiper-pagination-bullet-inactive-color: #000;\n  --swiper-pagination-bullet-inactive-opacity: 0.2;\n  --swiper-pagination-bullet-opacity: 1;\n  --swiper-pagination-bullet-horizontal-gap: 4px;\n  --swiper-pagination-bullet-vertical-gap: 6px;\n  */\n}\n.swiper-pagination {\n  position: absolute;\n  text-align: center;\n  transition: 300ms opacity;\n  transform: translate3d(0, 0, 0);\n  z-index: 10;\n}\n.swiper-pagination.swiper-pagination-hidden {\n  opacity: 0;\n}\n.swiper-pagination-disabled > .swiper-pagination,\n.swiper-pagination.swiper-pagination-disabled {\n  display: none !important;\n}\n/* Common Styles */\n.swiper-pagination-fraction,\n.swiper-pagination-custom,\n.swiper-horizontal > .swiper-pagination-bullets,\n.swiper-pagination-bullets.swiper-pagination-horizontal {\n  bottom: var(--swiper-pagination-bottom, 8px);\n  top: var(--swiper-pagination-top, auto);\n  left: 0;\n  width: 100%;\n}\n/* Bullets */\n.swiper-pagination-bullets-dynamic {\n  overflow: hidden;\n  font-size: 0;\n}\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet {\n  transform: scale(0.33);\n  position: relative;\n}\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active {\n  transform: scale(1);\n}\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-main {\n  transform: scale(1);\n}\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-prev {\n  transform: scale(0.66);\n}\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-prev-prev {\n  transform: scale(0.33);\n}\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-next {\n  transform: scale(0.66);\n}\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-next-next {\n  transform: scale(0.33);\n}\n.swiper-pagination-bullet {\n  width: var(--swiper-pagination-bullet-width, var(--swiper-pagination-bullet-size, 8px));\n  height: var(--swiper-pagination-bullet-height, var(--swiper-pagination-bullet-size, 8px));\n  display: inline-block;\n  border-radius: var(--swiper-pagination-bullet-border-radius, 50%);\n  background: var(--swiper-pagination-bullet-inactive-color, #000);\n  opacity: var(--swiper-pagination-bullet-inactive-opacity, 0.2);\n}\nbutton.swiper-pagination-bullet {\n  border: none;\n  margin: 0;\n  padding: 0;\n  box-shadow: none;\n  -webkit-appearance: none;\n          appearance: none;\n}\n.swiper-pagination-clickable .swiper-pagination-bullet {\n  cursor: pointer;\n}\n.swiper-pagination-bullet:only-child {\n  display: none !important;\n}\n.swiper-pagination-bullet-active {\n  opacity: var(--swiper-pagination-bullet-opacity, 1);\n  background: var(--swiper-pagination-color, var(--swiper-theme-color));\n}\n.swiper-vertical > .swiper-pagination-bullets,\n.swiper-pagination-vertical.swiper-pagination-bullets {\n  right: var(--swiper-pagination-right, 8px);\n  left: var(--swiper-pagination-left, auto);\n  top: 50%;\n  transform: translate3d(0px, -50%, 0);\n}\n.swiper-vertical > .swiper-pagination-bullets .swiper-pagination-bullet,\n.swiper-pagination-vertical.swiper-pagination-bullets .swiper-pagination-bullet {\n  margin: var(--swiper-pagination-bullet-vertical-gap, 6px) 0;\n  display: block;\n}\n.swiper-vertical > .swiper-pagination-bullets.swiper-pagination-bullets-dynamic,\n.swiper-pagination-vertical.swiper-pagination-bullets.swiper-pagination-bullets-dynamic {\n  top: 50%;\n  transform: translateY(-50%);\n  width: 8px;\n}\n.swiper-vertical > .swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet,\n.swiper-pagination-vertical.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet {\n  display: inline-block;\n  transition: 200ms transform,\n        200ms top;\n}\n.swiper-horizontal > .swiper-pagination-bullets .swiper-pagination-bullet,\n.swiper-pagination-horizontal.swiper-pagination-bullets .swiper-pagination-bullet {\n  margin: 0 var(--swiper-pagination-bullet-horizontal-gap, 4px);\n}\n.swiper-horizontal > .swiper-pagination-bullets.swiper-pagination-bullets-dynamic,\n.swiper-pagination-horizontal.swiper-pagination-bullets.swiper-pagination-bullets-dynamic {\n  left: 50%;\n  transform: translateX(-50%);\n  white-space: nowrap;\n}\n.swiper-horizontal > .swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet,\n.swiper-pagination-horizontal.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet {\n  transition: 200ms transform,\n        200ms left;\n}\n.swiper-horizontal.swiper-rtl > .swiper-pagination-bullets-dynamic .swiper-pagination-bullet {\n  transition: 200ms transform,\n    200ms right;\n}\n/* Fraction */\n.swiper-pagination-fraction {\n  color: var(--swiper-pagination-fraction-color, inherit);\n}\n/* Progress */\n.swiper-pagination-progressbar {\n  background: var(--swiper-pagination-progressbar-bg-color, rgba(0, 0, 0, 0.25));\n  position: absolute;\n}\n.swiper-pagination-progressbar .swiper-pagination-progressbar-fill {\n  background: var(--swiper-pagination-color, var(--swiper-theme-color));\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  transform: scale(0);\n  transform-origin: left top;\n}\n.swiper-rtl .swiper-pagination-progressbar .swiper-pagination-progressbar-fill {\n  transform-origin: right top;\n}\n.swiper-horizontal > .swiper-pagination-progressbar,\n.swiper-pagination-progressbar.swiper-pagination-horizontal,\n.swiper-vertical > .swiper-pagination-progressbar.swiper-pagination-progressbar-opposite,\n.swiper-pagination-progressbar.swiper-pagination-vertical.swiper-pagination-progressbar-opposite {\n  width: 100%;\n  height: var(--swiper-pagination-progressbar-size, 4px);\n  left: 0;\n  top: 0;\n}\n.swiper-vertical > .swiper-pagination-progressbar,\n.swiper-pagination-progressbar.swiper-pagination-vertical,\n.swiper-horizontal > .swiper-pagination-progressbar.swiper-pagination-progressbar-opposite,\n.swiper-pagination-progressbar.swiper-pagination-horizontal.swiper-pagination-progressbar-opposite {\n  width: var(--swiper-pagination-progressbar-size, 4px);\n  height: 100%;\n  left: 0;\n  top: 0;\n}\n.swiper-pagination-lock {\n  display: none;\n}\n"],sourceRoot:""}]);const o=a},44:(e,t,i)=>{i.d(t,{a:()=>c,b:()=>C,c:()=>m,e:()=>A,f:()=>a,h:()=>E,i:()=>b,k:()=>o,m:()=>y,n:()=>n,q:()=>v,r:()=>f,s:()=>x,t:()=>h,u:()=>u,v:()=>w,w:()=>g,x:()=>d,y:()=>s});var r=i(375);function s(e){const t=e;Object.keys(t).forEach(e=>{try{t[e]=null}catch(e){}try{delete t[e]}catch(e){}})}function n(e,t){return void 0===t&&(t=0),setTimeout(e,t)}function a(){return Date.now()}function o(e,t){void 0===t&&(t="x");const i=(0,r.a)();let s,n,a;const o=function(e){const t=(0,r.a)();let i;return t.getComputedStyle&&(i=t.getComputedStyle(e,null)),!i&&e.currentStyle&&(i=e.currentStyle),i||(i=e.style),i}(e);return i.WebKitCSSMatrix?(n=o.transform||o.webkitTransform,n.split(",").length>6&&(n=n.split(", ").map(e=>e.replace(",",".")).join(", ")),a=new i.WebKitCSSMatrix("none"===n?"":n)):(a=o.MozTransform||o.OTransform||o.MsTransform||o.msTransform||o.transform||o.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),s=a.toString().split(",")),"x"===t&&(n=i.WebKitCSSMatrix?a.m41:16===s.length?parseFloat(s[12]):parseFloat(s[4])),"y"===t&&(n=i.WebKitCSSMatrix?a.m42:16===s.length?parseFloat(s[13]):parseFloat(s[5])),n||0}function l(e){return"object"==typeof e&&null!==e&&e.constructor&&"Object"===Object.prototype.toString.call(e).slice(8,-1)}function p(e){return"undefined"!=typeof window&&void 0!==window.HTMLElement?e instanceof HTMLElement:e&&(1===e.nodeType||11===e.nodeType)}function d(){const e=Object(arguments.length<=0?void 0:arguments[0]),t=["__proto__","constructor","prototype"];for(let i=1;i<arguments.length;i+=1){const r=i<0||arguments.length<=i?void 0:arguments[i];if(null!=r&&!p(r)){const i=Object.keys(Object(r)).filter(e=>t.indexOf(e)<0);for(let t=0,s=i.length;t<s;t+=1){const s=i[t],n=Object.getOwnPropertyDescriptor(r,s);void 0!==n&&n.enumerable&&(l(e[s])&&l(r[s])?r[s].__swiper__?e[s]=r[s]:d(e[s],r[s]):!l(e[s])&&l(r[s])?(e[s]={},r[s].__swiper__?e[s]=r[s]:d(e[s],r[s])):e[s]=r[s])}}}return e}function c(e,t,i){e.style.setProperty(t,i)}function u(e){let{swiper:t,targetPosition:i,side:s}=e;const n=(0,r.a)(),a=-t.translate;let o,l=null;const p=t.params.speed;t.wrapperEl.style.scrollSnapType="none",n.cancelAnimationFrame(t.cssModeFrameID);const d=i>a?"next":"prev",c=(e,t)=>"next"===d&&e>=t||"prev"===d&&e<=t,u=()=>{o=(new Date).getTime(),null===l&&(l=o);const e=Math.max(Math.min((o-l)/p,1),0),r=.5-Math.cos(e*Math.PI)/2;let d=a+r*(i-a);if(c(d,i)&&(d=i),t.wrapperEl.scrollTo({[s]:d}),c(d,i))return t.wrapperEl.style.overflow="hidden",t.wrapperEl.style.scrollSnapType="",setTimeout(()=>{t.wrapperEl.style.overflow="",t.wrapperEl.scrollTo({[s]:d})}),void n.cancelAnimationFrame(t.cssModeFrameID);t.cssModeFrameID=n.requestAnimationFrame(u)};u()}function A(e,t){void 0===t&&(t="");const i=(0,r.a)(),s=[...e.children];return i.HTMLSlotElement&&e instanceof HTMLSlotElement&&s.push(...e.assignedElements()),t?s.filter(e=>e.matches(t)):s}function g(e,t){const i=(0,r.a)();let s=t.contains(e);return!s&&i.HTMLSlotElement&&t instanceof HTMLSlotElement&&(s=[...t.assignedElements()].includes(e),s||(s=function(e,t){const i=[t];for(;i.length>0;){const t=i.shift();if(e===t)return!0;i.push(...t.children,...t.shadowRoot?t.shadowRoot.children:[],...t.assignedElements?t.assignedElements():[])}}(e,t))),s}function w(e){try{return void console.warn(e)}catch(e){}}function m(e,t){void 0===t&&(t=[]);const i=document.createElement(e);return i.classList.add(...Array.isArray(t)?t:function(e){return void 0===e&&(e=""),e.trim().split(" ").filter(e=>!!e.trim())}(t)),i}function h(e,t){const i=[];for(;e.previousElementSibling;){const r=e.previousElementSibling;t?r.matches(t)&&i.push(r):i.push(r),e=r}return i}function f(e,t){const i=[];for(;e.nextElementSibling;){const r=e.nextElementSibling;t?r.matches(t)&&i.push(r):i.push(r),e=r}return i}function v(e,t){return(0,r.a)().getComputedStyle(e,null).getPropertyValue(t)}function b(e){let t,i=e;if(i){for(t=0;null!==(i=i.previousSibling);)1===i.nodeType&&(t+=1);return t}}function C(e,t){const i=[];let r=e.parentElement;for(;r;)t?r.matches(t)&&i.push(r):i.push(r),r=r.parentElement;return i}function E(e,t,i){const s=(0,r.a)();return i?e["width"===t?"offsetWidth":"offsetHeight"]+parseFloat(s.getComputedStyle(e,null).getPropertyValue("width"===t?"margin-right":"margin-top"))+parseFloat(s.getComputedStyle(e,null).getPropertyValue("width"===t?"margin-left":"margin-bottom")):e.offsetWidth}function y(e){return(Array.isArray(e)?e:[e]).filter(e=>!!e)}function x(e,t){void 0===t&&(t=""),"undefined"!=typeof trustedTypes?e.innerHTML=trustedTypes.createPolicy("html",{createHTML:e=>e}).createHTML(t):e.innerHTML=t}},150:(e,t,i)=>{i.d(t,{dK:()=>n}),i(375);var r=i(44);function s(e){return void 0===e&&(e=""),`.${e.trim().replace(/([\.:!+\/()[\]])/g,"\\$1").replace(/ /g,".")}`}function n(e){let{swiper:t,extendParams:i,on:n,emit:a}=e;const o="swiper-pagination";let l;i({pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:e=>e,formatFractionTotal:e=>e,bulletClass:`${o}-bullet`,bulletActiveClass:`${o}-bullet-active`,modifierClass:`${o}-`,currentClass:`${o}-current`,totalClass:`${o}-total`,hiddenClass:`${o}-hidden`,progressbarFillClass:`${o}-progressbar-fill`,progressbarOppositeClass:`${o}-progressbar-opposite`,clickableClass:`${o}-clickable`,lockClass:`${o}-lock`,horizontalClass:`${o}-horizontal`,verticalClass:`${o}-vertical`,paginationDisabledClass:`${o}-disabled`}}),t.pagination={el:null,bullets:[]};let p=0;function d(){return!t.params.pagination.el||!t.pagination.el||Array.isArray(t.pagination.el)&&0===t.pagination.el.length}function c(e,i){const{bulletActiveClass:r}=t.params.pagination;e&&(e=e[("prev"===i?"previous":"next")+"ElementSibling"])&&(e.classList.add(`${r}-${i}`),(e=e[("prev"===i?"previous":"next")+"ElementSibling"])&&e.classList.add(`${r}-${i}-${i}`))}function u(e){const i=e.target.closest(s(t.params.pagination.bulletClass));if(!i)return;e.preventDefault();const n=(0,r.i)(i)*t.params.slidesPerGroup;if(t.params.loop){if(t.realIndex===n)return;const e=(a=t.realIndex,o=n,(o%=l=t.slides.length)===1+(a%=l)?"next":o===a-1?"previous":void 0);"next"===e?t.slideNext():"previous"===e?t.slidePrev():t.slideToLoop(n)}else t.slideTo(n);var a,o,l}function A(){const e=t.rtl,i=t.params.pagination;if(d())return;let n,o,u=t.pagination.el;u=(0,r.m)(u);const A=t.virtual&&t.params.virtual.enabled?t.virtual.slides.length:t.slides.length,g=t.params.loop?Math.ceil(A/t.params.slidesPerGroup):t.snapGrid.length;if(t.params.loop?(o=t.previousRealIndex||0,n=t.params.slidesPerGroup>1?Math.floor(t.realIndex/t.params.slidesPerGroup):t.realIndex):void 0!==t.snapIndex?(n=t.snapIndex,o=t.previousSnapIndex):(o=t.previousIndex||0,n=t.activeIndex||0),"bullets"===i.type&&t.pagination.bullets&&t.pagination.bullets.length>0){const s=t.pagination.bullets;let a,d,A;if(i.dynamicBullets&&(l=(0,r.h)(s[0],t.isHorizontal()?"width":"height",!0),u.forEach(e=>{e.style[t.isHorizontal()?"width":"height"]=l*(i.dynamicMainBullets+4)+"px"}),i.dynamicMainBullets>1&&void 0!==o&&(p+=n-(o||0),p>i.dynamicMainBullets-1?p=i.dynamicMainBullets-1:p<0&&(p=0)),a=Math.max(n-p,0),d=a+(Math.min(s.length,i.dynamicMainBullets)-1),A=(d+a)/2),s.forEach(e=>{const t=[...["","-next","-next-next","-prev","-prev-prev","-main"].map(e=>`${i.bulletActiveClass}${e}`)].map(e=>"string"==typeof e&&e.includes(" ")?e.split(" "):e).flat();e.classList.remove(...t)}),u.length>1)s.forEach(e=>{const s=(0,r.i)(e);s===n?e.classList.add(...i.bulletActiveClass.split(" ")):t.isElement&&e.setAttribute("part","bullet"),i.dynamicBullets&&(s>=a&&s<=d&&e.classList.add(...`${i.bulletActiveClass}-main`.split(" ")),s===a&&c(e,"prev"),s===d&&c(e,"next"))});else{const e=s[n];if(e&&e.classList.add(...i.bulletActiveClass.split(" ")),t.isElement&&s.forEach((e,t)=>{e.setAttribute("part",t===n?"bullet-active":"bullet")}),i.dynamicBullets){const e=s[a],t=s[d];for(let e=a;e<=d;e+=1)s[e]&&s[e].classList.add(...`${i.bulletActiveClass}-main`.split(" "));c(e,"prev"),c(t,"next")}}if(i.dynamicBullets){const r=Math.min(s.length,i.dynamicMainBullets+4),n=(l*r-l)/2-A*l,a=e?"right":"left";s.forEach(e=>{e.style[t.isHorizontal()?a:"top"]=`${n}px`})}}u.forEach((e,o)=>{if("fraction"===i.type&&(e.querySelectorAll(s(i.currentClass)).forEach(e=>{e.textContent=i.formatFractionCurrent(n+1)}),e.querySelectorAll(s(i.totalClass)).forEach(e=>{e.textContent=i.formatFractionTotal(g)})),"progressbar"===i.type){let r;r=i.progressbarOpposite?t.isHorizontal()?"vertical":"horizontal":t.isHorizontal()?"horizontal":"vertical";const a=(n+1)/g;let o=1,l=1;"horizontal"===r?o=a:l=a,e.querySelectorAll(s(i.progressbarFillClass)).forEach(e=>{e.style.transform=`translate3d(0,0,0) scaleX(${o}) scaleY(${l})`,e.style.transitionDuration=`${t.params.speed}ms`})}"custom"===i.type&&i.renderCustom?((0,r.s)(e,i.renderCustom(t,n+1,g)),0===o&&a("paginationRender",e)):(0===o&&a("paginationRender",e),a("paginationUpdate",e)),t.params.watchOverflow&&t.enabled&&e.classList[t.isLocked?"add":"remove"](i.lockClass)})}function g(){const e=t.params.pagination;if(d())return;const i=t.virtual&&t.params.virtual.enabled?t.virtual.slides.length:t.grid&&t.params.grid.rows>1?t.slides.length/Math.ceil(t.params.grid.rows):t.slides.length;let n=t.pagination.el;n=(0,r.m)(n);let o="";if("bullets"===e.type){let r=t.params.loop?Math.ceil(i/t.params.slidesPerGroup):t.snapGrid.length;t.params.freeMode&&t.params.freeMode.enabled&&r>i&&(r=i);for(let i=0;i<r;i+=1)e.renderBullet?o+=e.renderBullet.call(t,i,e.bulletClass):o+=`<${e.bulletElement} ${t.isElement?'part="bullet"':""} class="${e.bulletClass}"></${e.bulletElement}>`}"fraction"===e.type&&(o=e.renderFraction?e.renderFraction.call(t,e.currentClass,e.totalClass):`<span class="${e.currentClass}"></span> / <span class="${e.totalClass}"></span>`),"progressbar"===e.type&&(o=e.renderProgressbar?e.renderProgressbar.call(t,e.progressbarFillClass):`<span class="${e.progressbarFillClass}"></span>`),t.pagination.bullets=[],n.forEach(i=>{"custom"!==e.type&&(0,r.s)(i,o||""),"bullets"===e.type&&t.pagination.bullets.push(...i.querySelectorAll(s(e.bulletClass)))}),"custom"!==e.type&&a("paginationRender",n[0])}function w(){t.params.pagination=function(e,t,i,s){return e.params.createElements&&Object.keys(s).forEach(n=>{if(!i[n]&&!0===i.auto){let a=(0,r.e)(e.el,`.${s[n]}`)[0];a||(a=(0,r.c)("div",s[n]),a.className=s[n],e.el.append(a)),i[n]=a,t[n]=a}}),i}(t,t.originalParams.pagination,t.params.pagination,{el:"swiper-pagination"});const e=t.params.pagination;if(!e.el)return;let i;"string"==typeof e.el&&t.isElement&&(i=t.el.querySelector(e.el)),i||"string"!=typeof e.el||(i=[...document.querySelectorAll(e.el)]),i||(i=e.el),i&&0!==i.length&&(t.params.uniqueNavElements&&"string"==typeof e.el&&Array.isArray(i)&&i.length>1&&(i=[...t.el.querySelectorAll(e.el)],i.length>1&&(i=i.find(e=>(0,r.b)(e,".swiper")[0]===t.el))),Array.isArray(i)&&1===i.length&&(i=i[0]),Object.assign(t.pagination,{el:i}),i=(0,r.m)(i),i.forEach(i=>{"bullets"===e.type&&e.clickable&&i.classList.add(...(e.clickableClass||"").split(" ")),i.classList.add(e.modifierClass+e.type),i.classList.add(t.isHorizontal()?e.horizontalClass:e.verticalClass),"bullets"===e.type&&e.dynamicBullets&&(i.classList.add(`${e.modifierClass}${e.type}-dynamic`),p=0,e.dynamicMainBullets<1&&(e.dynamicMainBullets=1)),"progressbar"===e.type&&e.progressbarOpposite&&i.classList.add(e.progressbarOppositeClass),e.clickable&&i.addEventListener("click",u),t.enabled||i.classList.add(e.lockClass)}))}function m(){const e=t.params.pagination;if(d())return;let i=t.pagination.el;i&&(i=(0,r.m)(i),i.forEach(i=>{i.classList.remove(e.hiddenClass),i.classList.remove(e.modifierClass+e.type),i.classList.remove(t.isHorizontal()?e.horizontalClass:e.verticalClass),e.clickable&&(i.classList.remove(...(e.clickableClass||"").split(" ")),i.removeEventListener("click",u))})),t.pagination.bullets&&t.pagination.bullets.forEach(t=>t.classList.remove(...e.bulletActiveClass.split(" ")))}n("changeDirection",()=>{if(!t.pagination||!t.pagination.el)return;const e=t.params.pagination;let{el:i}=t.pagination;i=(0,r.m)(i),i.forEach(i=>{i.classList.remove(e.horizontalClass,e.verticalClass),i.classList.add(t.isHorizontal()?e.horizontalClass:e.verticalClass)})}),n("init",()=>{!1===t.params.pagination.enabled?h():(w(),g(),A())}),n("activeIndexChange",()=>{void 0===t.snapIndex&&A()}),n("snapIndexChange",()=>{A()}),n("snapGridLengthChange",()=>{g(),A()}),n("destroy",()=>{m()}),n("enable disable",()=>{let{el:e}=t.pagination;e&&(e=(0,r.m)(e),e.forEach(e=>e.classList[t.enabled?"remove":"add"](t.params.pagination.lockClass)))}),n("lock unlock",()=>{A()}),n("click",(e,i)=>{const s=i.target,n=(0,r.m)(t.pagination.el);if(t.params.pagination.el&&t.params.pagination.hideOnClick&&n&&n.length>0&&!s.classList.contains(t.params.pagination.bulletClass)){if(t.navigation&&(t.navigation.nextEl&&s===t.navigation.nextEl||t.navigation.prevEl&&s===t.navigation.prevEl))return;const e=n[0].classList.contains(t.params.pagination.hiddenClass);a(!0===e?"paginationShow":"paginationHide"),n.forEach(e=>e.classList.toggle(t.params.pagination.hiddenClass))}});const h=()=>{t.el.classList.add(t.params.pagination.paginationDisabledClass);let{el:e}=t.pagination;e&&(e=(0,r.m)(e),e.forEach(e=>e.classList.add(t.params.pagination.paginationDisabledClass))),m()};Object.assign(t.pagination,{enable:()=>{t.el.classList.remove(t.params.pagination.paginationDisabledClass);let{el:e}=t.pagination;e&&(e=(0,r.m)(e),e.forEach(e=>e.classList.remove(t.params.pagination.paginationDisabledClass))),w(),g(),A()},disable:h,render:g,update:A,init:w,destroy:m})}},163:(e,t,i)=>{var r=i(72),s=i.n(r),n=i(825),a=i.n(n),o=i(659),l=i.n(o),p=i(56),d=i.n(p),c=i(159),u=i.n(c),A=i(113),g=i.n(A),w=i(12),m={};m.styleTagTransform=g(),m.setAttributes=d(),m.insert=l().bind(null,"head"),m.domAPI=a(),m.insertStyleElement=u(),s()(w.A,m),w.A&&w.A.locals&&w.A.locals},325:(e,t,i)=>{i.d(t,{RC:()=>J,qr:()=>ee});var r=i(540),s=i(375),n=i(44);let a,o,l;function p(){return a||(a=function(){const e=(0,s.a)(),t=(0,s.g)();return{smoothScroll:t.documentElement&&t.documentElement.style&&"scrollBehavior"in t.documentElement.style,touch:!!("ontouchstart"in e||e.DocumentTouch&&t instanceof e.DocumentTouch)}}()),a}function d(e){return void 0===e&&(e={}),o||(o=function(e){let{userAgent:t}=void 0===e?{}:e;const i=p(),r=(0,s.a)(),n=r.navigator.platform,a=t||r.navigator.userAgent,o={ios:!1,android:!1},l=r.screen.width,d=r.screen.height,c=a.match(/(Android);?[\s\/]+([\d.]+)?/);let u=a.match(/(iPad).*OS\s([\d_]+)/);const A=a.match(/(iPod)(.*OS\s([\d_]+))?/),g=!u&&a.match(/(iPhone\sOS|iOS)\s([\d_]+)/),w="Win32"===n;let m="MacIntel"===n;return!u&&m&&i.touch&&["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"].indexOf(`${l}x${d}`)>=0&&(u=a.match(/(Version)\/([\d.]+)/),u||(u=[0,1,"13_0_0"]),m=!1),c&&!w&&(o.os="android",o.android=!0),(u||g||A)&&(o.os="ios",o.ios=!0),o}(e)),o}function c(){return l||(l=function(){const e=(0,s.a)(),t=d();let i=!1;function r(){const t=e.navigator.userAgent.toLowerCase();return t.indexOf("safari")>=0&&t.indexOf("chrome")<0&&t.indexOf("android")<0}if(r()){const t=String(e.navigator.userAgent);if(t.includes("Version/")){const[e,r]=t.split("Version/")[1].split(" ")[0].split(".").map(e=>Number(e));i=e<16||16===e&&r<2}}const n=/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(e.navigator.userAgent),a=r();return{isSafari:i||a,needPerspectiveFix:i,need3dFix:a||n&&t.ios,isWebView:n}}()),l}var u={on(e,t,i){const r=this;if(!r.eventsListeners||r.destroyed)return r;if("function"!=typeof t)return r;const s=i?"unshift":"push";return e.split(" ").forEach(e=>{r.eventsListeners[e]||(r.eventsListeners[e]=[]),r.eventsListeners[e][s](t)}),r},once(e,t,i){const r=this;if(!r.eventsListeners||r.destroyed)return r;if("function"!=typeof t)return r;function s(){r.off(e,s),s.__emitterProxy&&delete s.__emitterProxy;for(var i=arguments.length,n=new Array(i),a=0;a<i;a++)n[a]=arguments[a];t.apply(r,n)}return s.__emitterProxy=t,r.on(e,s,i)},onAny(e,t){const i=this;if(!i.eventsListeners||i.destroyed)return i;if("function"!=typeof e)return i;const r=t?"unshift":"push";return i.eventsAnyListeners.indexOf(e)<0&&i.eventsAnyListeners[r](e),i},offAny(e){const t=this;if(!t.eventsListeners||t.destroyed)return t;if(!t.eventsAnyListeners)return t;const i=t.eventsAnyListeners.indexOf(e);return i>=0&&t.eventsAnyListeners.splice(i,1),t},off(e,t){const i=this;return!i.eventsListeners||i.destroyed?i:i.eventsListeners?(e.split(" ").forEach(e=>{void 0===t?i.eventsListeners[e]=[]:i.eventsListeners[e]&&i.eventsListeners[e].forEach((r,s)=>{(r===t||r.__emitterProxy&&r.__emitterProxy===t)&&i.eventsListeners[e].splice(s,1)})}),i):i},emit(){const e=this;if(!e.eventsListeners||e.destroyed)return e;if(!e.eventsListeners)return e;let t,i,r;for(var s=arguments.length,n=new Array(s),a=0;a<s;a++)n[a]=arguments[a];return"string"==typeof n[0]||Array.isArray(n[0])?(t=n[0],i=n.slice(1,n.length),r=e):(t=n[0].events,i=n[0].data,r=n[0].context||e),i.unshift(r),(Array.isArray(t)?t:t.split(" ")).forEach(t=>{e.eventsAnyListeners&&e.eventsAnyListeners.length&&e.eventsAnyListeners.forEach(e=>{e.apply(r,[t,...i])}),e.eventsListeners&&e.eventsListeners[t]&&e.eventsListeners[t].forEach(e=>{e.apply(r,i)})}),e}};const A=(e,t,i)=>{t&&!e.classList.contains(i)?e.classList.add(i):!t&&e.classList.contains(i)&&e.classList.remove(i)},g=(e,t,i)=>{t&&!e.classList.contains(i)?e.classList.add(i):!t&&e.classList.contains(i)&&e.classList.remove(i)},w=(e,t)=>{if(!e||e.destroyed||!e.params)return;const i=t.closest(e.isElement?"swiper-slide":`.${e.params.slideClass}`);if(i){let t=i.querySelector(`.${e.params.lazyPreloaderClass}`);!t&&e.isElement&&(i.shadowRoot?t=i.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`):requestAnimationFrame(()=>{i.shadowRoot&&(t=i.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`),t&&t.remove())})),t&&t.remove()}},m=(e,t)=>{if(!e.slides[t])return;const i=e.slides[t].querySelector('[loading="lazy"]');i&&i.removeAttribute("loading")},h=e=>{if(!e||e.destroyed||!e.params)return;let t=e.params.lazyPreloadPrevNext;const i=e.slides.length;if(!i||!t||t<0)return;t=Math.min(t,i);const r="auto"===e.params.slidesPerView?e.slidesPerViewDynamic():Math.ceil(e.params.slidesPerView),s=e.activeIndex;if(e.params.grid&&e.params.grid.rows>1){const i=s,n=[i-t];return n.push(...Array.from({length:t}).map((e,t)=>i+r+t)),void e.slides.forEach((t,i)=>{n.includes(t.column)&&m(e,i)})}const n=s+r-1;if(e.params.rewind||e.params.loop)for(let r=s-t;r<=n+t;r+=1){const t=(r%i+i)%i;(t<s||t>n)&&m(e,t)}else for(let r=Math.max(s-t,0);r<=Math.min(n+t,i-1);r+=1)r!==s&&(r>n||r<s)&&m(e,r)};var f={updateSize:function(){const e=this;let t,i;const r=e.el;t=void 0!==e.params.width&&null!==e.params.width?e.params.width:r.clientWidth,i=void 0!==e.params.height&&null!==e.params.height?e.params.height:r.clientHeight,0===t&&e.isHorizontal()||0===i&&e.isVertical()||(t=t-parseInt((0,n.q)(r,"padding-left")||0,10)-parseInt((0,n.q)(r,"padding-right")||0,10),i=i-parseInt((0,n.q)(r,"padding-top")||0,10)-parseInt((0,n.q)(r,"padding-bottom")||0,10),Number.isNaN(t)&&(t=0),Number.isNaN(i)&&(i=0),Object.assign(e,{width:t,height:i,size:e.isHorizontal()?t:i}))},updateSlides:function(){const e=this;function t(t,i){return parseFloat(t.getPropertyValue(e.getDirectionLabel(i))||0)}const i=e.params,{wrapperEl:r,slidesEl:s,size:a,rtlTranslate:o,wrongRTL:l}=e,p=e.virtual&&i.virtual.enabled,d=p?e.virtual.slides.length:e.slides.length,c=(0,n.e)(s,`.${e.params.slideClass}, swiper-slide`),u=p?e.virtual.slides.length:c.length;let A=[];const g=[],w=[];let m=i.slidesOffsetBefore;"function"==typeof m&&(m=i.slidesOffsetBefore.call(e));let h=i.slidesOffsetAfter;"function"==typeof h&&(h=i.slidesOffsetAfter.call(e));const f=e.snapGrid.length,v=e.slidesGrid.length;let b=i.spaceBetween,C=-m,E=0,y=0;if(void 0===a)return;"string"==typeof b&&b.indexOf("%")>=0?b=parseFloat(b.replace("%",""))/100*a:"string"==typeof b&&(b=parseFloat(b)),e.virtualSize=-b,c.forEach(e=>{o?e.style.marginLeft="":e.style.marginRight="",e.style.marginBottom="",e.style.marginTop=""}),i.centeredSlides&&i.cssMode&&((0,n.a)(r,"--swiper-centered-offset-before",""),(0,n.a)(r,"--swiper-centered-offset-after",""));const x=i.grid&&i.grid.rows>1&&e.grid;let S;x?e.grid.initSlides(c):e.grid&&e.grid.unsetSlides();const T="auto"===i.slidesPerView&&i.breakpoints&&Object.keys(i.breakpoints).filter(e=>void 0!==i.breakpoints[e].slidesPerView).length>0;for(let r=0;r<u;r+=1){let s;if(S=0,c[r]&&(s=c[r]),x&&e.grid.updateSlide(r,s,c),!c[r]||"none"!==(0,n.q)(s,"display")){if("auto"===i.slidesPerView){T&&(c[r].style[e.getDirectionLabel("width")]="");const a=getComputedStyle(s),o=s.style.transform,l=s.style.webkitTransform;if(o&&(s.style.transform="none"),l&&(s.style.webkitTransform="none"),i.roundLengths)S=e.isHorizontal()?(0,n.h)(s,"width",!0):(0,n.h)(s,"height",!0);else{const e=t(a,"width"),i=t(a,"padding-left"),r=t(a,"padding-right"),n=t(a,"margin-left"),o=t(a,"margin-right"),l=a.getPropertyValue("box-sizing");if(l&&"border-box"===l)S=e+n+o;else{const{clientWidth:t,offsetWidth:a}=s;S=e+i+r+n+o+(a-t)}}o&&(s.style.transform=o),l&&(s.style.webkitTransform=l),i.roundLengths&&(S=Math.floor(S))}else S=(a-(i.slidesPerView-1)*b)/i.slidesPerView,i.roundLengths&&(S=Math.floor(S)),c[r]&&(c[r].style[e.getDirectionLabel("width")]=`${S}px`);c[r]&&(c[r].swiperSlideSize=S),w.push(S),i.centeredSlides?(C=C+S/2+E/2+b,0===E&&0!==r&&(C=C-a/2-b),0===r&&(C=C-a/2-b),Math.abs(C)<.001&&(C=0),i.roundLengths&&(C=Math.floor(C)),y%i.slidesPerGroup===0&&A.push(C),g.push(C)):(i.roundLengths&&(C=Math.floor(C)),(y-Math.min(e.params.slidesPerGroupSkip,y))%e.params.slidesPerGroup===0&&A.push(C),g.push(C),C=C+S+b),e.virtualSize+=S+b,E=S,y+=1}}if(e.virtualSize=Math.max(e.virtualSize,a)+h,o&&l&&("slide"===i.effect||"coverflow"===i.effect)&&(r.style.width=`${e.virtualSize+b}px`),i.setWrapperSize&&(r.style[e.getDirectionLabel("width")]=`${e.virtualSize+b}px`),x&&e.grid.updateWrapperSize(S,A),!i.centeredSlides){const t=[];for(let r=0;r<A.length;r+=1){let s=A[r];i.roundLengths&&(s=Math.floor(s)),A[r]<=e.virtualSize-a&&t.push(s)}A=t,Math.floor(e.virtualSize-a)-Math.floor(A[A.length-1])>1&&A.push(e.virtualSize-a)}if(p&&i.loop){const t=w[0]+b;if(i.slidesPerGroup>1){const r=Math.ceil((e.virtual.slidesBefore+e.virtual.slidesAfter)/i.slidesPerGroup),s=t*i.slidesPerGroup;for(let e=0;e<r;e+=1)A.push(A[A.length-1]+s)}for(let r=0;r<e.virtual.slidesBefore+e.virtual.slidesAfter;r+=1)1===i.slidesPerGroup&&A.push(A[A.length-1]+t),g.push(g[g.length-1]+t),e.virtualSize+=t}if(0===A.length&&(A=[0]),0!==b){const t=e.isHorizontal()&&o?"marginLeft":e.getDirectionLabel("marginRight");c.filter((e,t)=>!(i.cssMode&&!i.loop)||t!==c.length-1).forEach(e=>{e.style[t]=`${b}px`})}if(i.centeredSlides&&i.centeredSlidesBounds){let e=0;w.forEach(t=>{e+=t+(b||0)}),e-=b;const t=e>a?e-a:0;A=A.map(e=>e<=0?-m:e>t?t+h:e)}if(i.centerInsufficientSlides){let e=0;w.forEach(t=>{e+=t+(b||0)}),e-=b;const t=(i.slidesOffsetBefore||0)+(i.slidesOffsetAfter||0);if(e+t<a){const i=(a-e-t)/2;A.forEach((e,t)=>{A[t]=e-i}),g.forEach((e,t)=>{g[t]=e+i})}}if(Object.assign(e,{slides:c,snapGrid:A,slidesGrid:g,slidesSizesGrid:w}),i.centeredSlides&&i.cssMode&&!i.centeredSlidesBounds){(0,n.a)(r,"--swiper-centered-offset-before",-A[0]+"px"),(0,n.a)(r,"--swiper-centered-offset-after",e.size/2-w[w.length-1]/2+"px");const t=-e.snapGrid[0],i=-e.slidesGrid[0];e.snapGrid=e.snapGrid.map(e=>e+t),e.slidesGrid=e.slidesGrid.map(e=>e+i)}if(u!==d&&e.emit("slidesLengthChange"),A.length!==f&&(e.params.watchOverflow&&e.checkOverflow(),e.emit("snapGridLengthChange")),g.length!==v&&e.emit("slidesGridLengthChange"),i.watchSlidesProgress&&e.updateSlidesOffset(),e.emit("slidesUpdated"),!(p||i.cssMode||"slide"!==i.effect&&"fade"!==i.effect)){const t=`${i.containerModifierClass}backface-hidden`,r=e.el.classList.contains(t);u<=i.maxBackfaceHiddenSlides?r||e.el.classList.add(t):r&&e.el.classList.remove(t)}},updateAutoHeight:function(e){const t=this,i=[],r=t.virtual&&t.params.virtual.enabled;let s,n=0;"number"==typeof e?t.setTransition(e):!0===e&&t.setTransition(t.params.speed);const a=e=>r?t.slides[t.getSlideIndexByData(e)]:t.slides[e];if("auto"!==t.params.slidesPerView&&t.params.slidesPerView>1)if(t.params.centeredSlides)(t.visibleSlides||[]).forEach(e=>{i.push(e)});else for(s=0;s<Math.ceil(t.params.slidesPerView);s+=1){const e=t.activeIndex+s;if(e>t.slides.length&&!r)break;i.push(a(e))}else i.push(a(t.activeIndex));for(s=0;s<i.length;s+=1)if(void 0!==i[s]){const e=i[s].offsetHeight;n=e>n?e:n}(n||0===n)&&(t.wrapperEl.style.height=`${n}px`)},updateSlidesOffset:function(){const e=this,t=e.slides,i=e.isElement?e.isHorizontal()?e.wrapperEl.offsetLeft:e.wrapperEl.offsetTop:0;for(let r=0;r<t.length;r+=1)t[r].swiperSlideOffset=(e.isHorizontal()?t[r].offsetLeft:t[r].offsetTop)-i-e.cssOverflowAdjustment()},updateSlidesProgress:function(e){void 0===e&&(e=this&&this.translate||0);const t=this,i=t.params,{slides:r,rtlTranslate:s,snapGrid:n}=t;if(0===r.length)return;void 0===r[0].swiperSlideOffset&&t.updateSlidesOffset();let a=-e;s&&(a=e),t.visibleSlidesIndexes=[],t.visibleSlides=[];let o=i.spaceBetween;"string"==typeof o&&o.indexOf("%")>=0?o=parseFloat(o.replace("%",""))/100*t.size:"string"==typeof o&&(o=parseFloat(o));for(let e=0;e<r.length;e+=1){const l=r[e];let p=l.swiperSlideOffset;i.cssMode&&i.centeredSlides&&(p-=r[0].swiperSlideOffset);const d=(a+(i.centeredSlides?t.minTranslate():0)-p)/(l.swiperSlideSize+o),c=(a-n[0]+(i.centeredSlides?t.minTranslate():0)-p)/(l.swiperSlideSize+o),u=-(a-p),g=u+t.slidesSizesGrid[e],w=u>=0&&u<=t.size-t.slidesSizesGrid[e],m=u>=0&&u<t.size-1||g>1&&g<=t.size||u<=0&&g>=t.size;m&&(t.visibleSlides.push(l),t.visibleSlidesIndexes.push(e)),A(l,m,i.slideVisibleClass),A(l,w,i.slideFullyVisibleClass),l.progress=s?-d:d,l.originalProgress=s?-c:c}},updateProgress:function(e){const t=this;if(void 0===e){const i=t.rtlTranslate?-1:1;e=t&&t.translate&&t.translate*i||0}const i=t.params,r=t.maxTranslate()-t.minTranslate();let{progress:s,isBeginning:n,isEnd:a,progressLoop:o}=t;const l=n,p=a;if(0===r)s=0,n=!0,a=!0;else{s=(e-t.minTranslate())/r;const i=Math.abs(e-t.minTranslate())<1,o=Math.abs(e-t.maxTranslate())<1;n=i||s<=0,a=o||s>=1,i&&(s=0),o&&(s=1)}if(i.loop){const i=t.getSlideIndexByData(0),r=t.getSlideIndexByData(t.slides.length-1),s=t.slidesGrid[i],n=t.slidesGrid[r],a=t.slidesGrid[t.slidesGrid.length-1],l=Math.abs(e);o=l>=s?(l-s)/a:(l+a-n)/a,o>1&&(o-=1)}Object.assign(t,{progress:s,progressLoop:o,isBeginning:n,isEnd:a}),(i.watchSlidesProgress||i.centeredSlides&&i.autoHeight)&&t.updateSlidesProgress(e),n&&!l&&t.emit("reachBeginning toEdge"),a&&!p&&t.emit("reachEnd toEdge"),(l&&!n||p&&!a)&&t.emit("fromEdge"),t.emit("progress",s)},updateSlidesClasses:function(){const e=this,{slides:t,params:i,slidesEl:r,activeIndex:s}=e,a=e.virtual&&i.virtual.enabled,o=e.grid&&i.grid&&i.grid.rows>1,l=e=>(0,n.e)(r,`.${i.slideClass}${e}, swiper-slide${e}`)[0];let p,d,c;if(a)if(i.loop){let t=s-e.virtual.slidesBefore;t<0&&(t=e.virtual.slides.length+t),t>=e.virtual.slides.length&&(t-=e.virtual.slides.length),p=l(`[data-swiper-slide-index="${t}"]`)}else p=l(`[data-swiper-slide-index="${s}"]`);else o?(p=t.find(e=>e.column===s),c=t.find(e=>e.column===s+1),d=t.find(e=>e.column===s-1)):p=t[s];p&&(o||(c=(0,n.r)(p,`.${i.slideClass}, swiper-slide`)[0],i.loop&&!c&&(c=t[0]),d=(0,n.t)(p,`.${i.slideClass}, swiper-slide`)[0],i.loop&&0===!d&&(d=t[t.length-1]))),t.forEach(e=>{g(e,e===p,i.slideActiveClass),g(e,e===c,i.slideNextClass),g(e,e===d,i.slidePrevClass)}),e.emitSlidesClasses()},updateActiveIndex:function(e){const t=this,i=t.rtlTranslate?t.translate:-t.translate,{snapGrid:r,params:s,activeIndex:n,realIndex:a,snapIndex:o}=t;let l,p=e;const d=e=>{let i=e-t.virtual.slidesBefore;return i<0&&(i=t.virtual.slides.length+i),i>=t.virtual.slides.length&&(i-=t.virtual.slides.length),i};if(void 0===p&&(p=function(e){const{slidesGrid:t,params:i}=e,r=e.rtlTranslate?e.translate:-e.translate;let s;for(let e=0;e<t.length;e+=1)void 0!==t[e+1]?r>=t[e]&&r<t[e+1]-(t[e+1]-t[e])/2?s=e:r>=t[e]&&r<t[e+1]&&(s=e+1):r>=t[e]&&(s=e);return i.normalizeSlideIndex&&(s<0||void 0===s)&&(s=0),s}(t)),r.indexOf(i)>=0)l=r.indexOf(i);else{const e=Math.min(s.slidesPerGroupSkip,p);l=e+Math.floor((p-e)/s.slidesPerGroup)}if(l>=r.length&&(l=r.length-1),p===n&&!t.params.loop)return void(l!==o&&(t.snapIndex=l,t.emit("snapIndexChange")));if(p===n&&t.params.loop&&t.virtual&&t.params.virtual.enabled)return void(t.realIndex=d(p));const c=t.grid&&s.grid&&s.grid.rows>1;let u;if(t.virtual&&s.virtual.enabled&&s.loop)u=d(p);else if(c){const e=t.slides.find(e=>e.column===p);let i=parseInt(e.getAttribute("data-swiper-slide-index"),10);Number.isNaN(i)&&(i=Math.max(t.slides.indexOf(e),0)),u=Math.floor(i/s.grid.rows)}else if(t.slides[p]){const e=t.slides[p].getAttribute("data-swiper-slide-index");u=e?parseInt(e,10):p}else u=p;Object.assign(t,{previousSnapIndex:o,snapIndex:l,previousRealIndex:a,realIndex:u,previousIndex:n,activeIndex:p}),t.initialized&&h(t),t.emit("activeIndexChange"),t.emit("snapIndexChange"),(t.initialized||t.params.runCallbacksOnInit)&&(a!==u&&t.emit("realIndexChange"),t.emit("slideChange"))},updateClickedSlide:function(e,t){const i=this,r=i.params;let s=e.closest(`.${r.slideClass}, swiper-slide`);!s&&i.isElement&&t&&t.length>1&&t.includes(e)&&[...t.slice(t.indexOf(e)+1,t.length)].forEach(e=>{!s&&e.matches&&e.matches(`.${r.slideClass}, swiper-slide`)&&(s=e)});let n,a=!1;if(s)for(let e=0;e<i.slides.length;e+=1)if(i.slides[e]===s){a=!0,n=e;break}if(!s||!a)return i.clickedSlide=void 0,void(i.clickedIndex=void 0);i.clickedSlide=s,i.virtual&&i.params.virtual.enabled?i.clickedIndex=parseInt(s.getAttribute("data-swiper-slide-index"),10):i.clickedIndex=n,r.slideToClickedSlide&&void 0!==i.clickedIndex&&i.clickedIndex!==i.activeIndex&&i.slideToClickedSlide()}};function v(e){let{swiper:t,runCallbacks:i,direction:r,step:s}=e;const{activeIndex:n,previousIndex:a}=t;let o=r;o||(o=n>a?"next":n<a?"prev":"reset"),t.emit(`transition${s}`),i&&"reset"===o?t.emit(`slideResetTransition${s}`):i&&n!==a&&(t.emit(`slideChangeTransition${s}`),"next"===o?t.emit(`slideNextTransition${s}`):t.emit(`slidePrevTransition${s}`))}var b={slideTo:function(e,t,i,r,s){void 0===e&&(e=0),void 0===i&&(i=!0),"string"==typeof e&&(e=parseInt(e,10));const a=this;let o=e;o<0&&(o=0);const{params:l,snapGrid:p,slidesGrid:d,previousIndex:u,activeIndex:A,rtlTranslate:g,wrapperEl:w,enabled:m}=a;if(!m&&!r&&!s||a.destroyed||a.animating&&l.preventInteractionOnTransition)return!1;void 0===t&&(t=a.params.speed);const h=Math.min(a.params.slidesPerGroupSkip,o);let f=h+Math.floor((o-h)/a.params.slidesPerGroup);f>=p.length&&(f=p.length-1);const v=-p[f];if(l.normalizeSlideIndex)for(let e=0;e<d.length;e+=1){const t=-Math.floor(100*v),i=Math.floor(100*d[e]),r=Math.floor(100*d[e+1]);void 0!==d[e+1]?t>=i&&t<r-(r-i)/2?o=e:t>=i&&t<r&&(o=e+1):t>=i&&(o=e)}if(a.initialized&&o!==A){if(!a.allowSlideNext&&(g?v>a.translate&&v>a.minTranslate():v<a.translate&&v<a.minTranslate()))return!1;if(!a.allowSlidePrev&&v>a.translate&&v>a.maxTranslate()&&(A||0)!==o)return!1}let b;o!==(u||0)&&i&&a.emit("beforeSlideChangeStart"),a.updateProgress(v),b=o>A?"next":o<A?"prev":"reset";const C=a.virtual&&a.params.virtual.enabled;if((!C||!s)&&(g&&-v===a.translate||!g&&v===a.translate))return a.updateActiveIndex(o),l.autoHeight&&a.updateAutoHeight(),a.updateSlidesClasses(),"slide"!==l.effect&&a.setTranslate(v),"reset"!==b&&(a.transitionStart(i,b),a.transitionEnd(i,b)),!1;if(l.cssMode){const e=a.isHorizontal(),i=g?v:-v;if(0===t)C&&(a.wrapperEl.style.scrollSnapType="none",a._immediateVirtual=!0),C&&!a._cssModeVirtualInitialSet&&a.params.initialSlide>0?(a._cssModeVirtualInitialSet=!0,requestAnimationFrame(()=>{w[e?"scrollLeft":"scrollTop"]=i})):w[e?"scrollLeft":"scrollTop"]=i,C&&requestAnimationFrame(()=>{a.wrapperEl.style.scrollSnapType="",a._immediateVirtual=!1});else{if(!a.support.smoothScroll)return(0,n.u)({swiper:a,targetPosition:i,side:e?"left":"top"}),!0;w.scrollTo({[e?"left":"top"]:i,behavior:"smooth"})}return!0}const E=c().isSafari;return C&&!s&&E&&a.isElement&&a.virtual.update(!1,!1,o),a.setTransition(t),a.setTranslate(v),a.updateActiveIndex(o),a.updateSlidesClasses(),a.emit("beforeTransitionStart",t,r),a.transitionStart(i,b),0===t?a.transitionEnd(i,b):a.animating||(a.animating=!0,a.onSlideToWrapperTransitionEnd||(a.onSlideToWrapperTransitionEnd=function(e){a&&!a.destroyed&&e.target===this&&(a.wrapperEl.removeEventListener("transitionend",a.onSlideToWrapperTransitionEnd),a.onSlideToWrapperTransitionEnd=null,delete a.onSlideToWrapperTransitionEnd,a.transitionEnd(i,b))}),a.wrapperEl.addEventListener("transitionend",a.onSlideToWrapperTransitionEnd)),!0},slideToLoop:function(e,t,i,r){void 0===e&&(e=0),void 0===i&&(i=!0),"string"==typeof e&&(e=parseInt(e,10));const s=this;if(s.destroyed)return;void 0===t&&(t=s.params.speed);const n=s.grid&&s.params.grid&&s.params.grid.rows>1;let a=e;if(s.params.loop)if(s.virtual&&s.params.virtual.enabled)a+=s.virtual.slidesBefore;else{let e;if(n){const t=a*s.params.grid.rows;e=s.slides.find(e=>1*e.getAttribute("data-swiper-slide-index")===t).column}else e=s.getSlideIndexByData(a);const t=n?Math.ceil(s.slides.length/s.params.grid.rows):s.slides.length,{centeredSlides:i}=s.params;let o=s.params.slidesPerView;"auto"===o?o=s.slidesPerViewDynamic():(o=Math.ceil(parseFloat(s.params.slidesPerView,10)),i&&o%2==0&&(o+=1));let l=t-e<o;if(i&&(l=l||e<Math.ceil(o/2)),r&&i&&"auto"!==s.params.slidesPerView&&!n&&(l=!1),l){const r=i?e<s.activeIndex?"prev":"next":e-s.activeIndex-1<s.params.slidesPerView?"next":"prev";s.loopFix({direction:r,slideTo:!0,activeSlideIndex:"next"===r?e+1:e-t+1,slideRealIndex:"next"===r?s.realIndex:void 0})}if(n){const e=a*s.params.grid.rows;a=s.slides.find(t=>1*t.getAttribute("data-swiper-slide-index")===e).column}else a=s.getSlideIndexByData(a)}return requestAnimationFrame(()=>{s.slideTo(a,t,i,r)}),s},slideNext:function(e,t,i){void 0===t&&(t=!0);const r=this,{enabled:s,params:n,animating:a}=r;if(!s||r.destroyed)return r;void 0===e&&(e=r.params.speed);let o=n.slidesPerGroup;"auto"===n.slidesPerView&&1===n.slidesPerGroup&&n.slidesPerGroupAuto&&(o=Math.max(r.slidesPerViewDynamic("current",!0),1));const l=r.activeIndex<n.slidesPerGroupSkip?1:o,p=r.virtual&&n.virtual.enabled;if(n.loop){if(a&&!p&&n.loopPreventsSliding)return!1;if(r.loopFix({direction:"next"}),r._clientLeft=r.wrapperEl.clientLeft,r.activeIndex===r.slides.length-1&&n.cssMode)return requestAnimationFrame(()=>{r.slideTo(r.activeIndex+l,e,t,i)}),!0}return n.rewind&&r.isEnd?r.slideTo(0,e,t,i):r.slideTo(r.activeIndex+l,e,t,i)},slidePrev:function(e,t,i){void 0===t&&(t=!0);const r=this,{params:s,snapGrid:n,slidesGrid:a,rtlTranslate:o,enabled:l,animating:p}=r;if(!l||r.destroyed)return r;void 0===e&&(e=r.params.speed);const d=r.virtual&&s.virtual.enabled;if(s.loop){if(p&&!d&&s.loopPreventsSliding)return!1;r.loopFix({direction:"prev"}),r._clientLeft=r.wrapperEl.clientLeft}function c(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}const u=c(o?r.translate:-r.translate),A=n.map(e=>c(e)),g=s.freeMode&&s.freeMode.enabled;let w=n[A.indexOf(u)-1];if(void 0===w&&(s.cssMode||g)){let e;n.forEach((t,i)=>{u>=t&&(e=i)}),void 0!==e&&(w=g?n[e]:n[e>0?e-1:e])}let m=0;if(void 0!==w&&(m=a.indexOf(w),m<0&&(m=r.activeIndex-1),"auto"===s.slidesPerView&&1===s.slidesPerGroup&&s.slidesPerGroupAuto&&(m=m-r.slidesPerViewDynamic("previous",!0)+1,m=Math.max(m,0))),s.rewind&&r.isBeginning){const s=r.params.virtual&&r.params.virtual.enabled&&r.virtual?r.virtual.slides.length-1:r.slides.length-1;return r.slideTo(s,e,t,i)}return s.loop&&0===r.activeIndex&&s.cssMode?(requestAnimationFrame(()=>{r.slideTo(m,e,t,i)}),!0):r.slideTo(m,e,t,i)},slideReset:function(e,t,i){void 0===t&&(t=!0);const r=this;if(!r.destroyed)return void 0===e&&(e=r.params.speed),r.slideTo(r.activeIndex,e,t,i)},slideToClosest:function(e,t,i,r){void 0===t&&(t=!0),void 0===r&&(r=.5);const s=this;if(s.destroyed)return;void 0===e&&(e=s.params.speed);let n=s.activeIndex;const a=Math.min(s.params.slidesPerGroupSkip,n),o=a+Math.floor((n-a)/s.params.slidesPerGroup),l=s.rtlTranslate?s.translate:-s.translate;if(l>=s.snapGrid[o]){const e=s.snapGrid[o];l-e>(s.snapGrid[o+1]-e)*r&&(n+=s.params.slidesPerGroup)}else{const e=s.snapGrid[o-1];l-e<=(s.snapGrid[o]-e)*r&&(n-=s.params.slidesPerGroup)}return n=Math.max(n,0),n=Math.min(n,s.slidesGrid.length-1),s.slideTo(n,e,t,i)},slideToClickedSlide:function(){const e=this;if(e.destroyed)return;const{params:t,slidesEl:i}=e,r="auto"===t.slidesPerView?e.slidesPerViewDynamic():t.slidesPerView;let s,a=e.getSlideIndexWhenGrid(e.clickedIndex);const o=e.isElement?"swiper-slide":`.${t.slideClass}`,l=e.grid&&e.params.grid&&e.params.grid.rows>1;if(t.loop){if(e.animating)return;s=parseInt(e.clickedSlide.getAttribute("data-swiper-slide-index"),10),t.centeredSlides?e.slideToLoop(s):a>(l?(e.slides.length-r)/2-(e.params.grid.rows-1):e.slides.length-r)?(e.loopFix(),a=e.getSlideIndex((0,n.e)(i,`${o}[data-swiper-slide-index="${s}"]`)[0]),(0,n.n)(()=>{e.slideTo(a)})):e.slideTo(a)}else e.slideTo(a)}},C={loopCreate:function(e,t){const i=this,{params:r,slidesEl:s}=i;if(!r.loop||i.virtual&&i.params.virtual.enabled)return;const a=()=>{(0,n.e)(s,`.${r.slideClass}, swiper-slide`).forEach((e,t)=>{e.setAttribute("data-swiper-slide-index",t)})},o=i.grid&&r.grid&&r.grid.rows>1;r.loopAddBlankSlides&&(r.slidesPerGroup>1||o)&&(()=>{const e=(0,n.e)(s,`.${r.slideBlankClass}`);e.forEach(e=>{e.remove()}),e.length>0&&(i.recalcSlides(),i.updateSlides())})();const l=r.slidesPerGroup*(o?r.grid.rows:1),p=i.slides.length%l!==0,d=o&&i.slides.length%r.grid.rows!==0,c=e=>{for(let t=0;t<e;t+=1){const e=i.isElement?(0,n.c)("swiper-slide",[r.slideBlankClass]):(0,n.c)("div",[r.slideClass,r.slideBlankClass]);i.slidesEl.append(e)}};p?(r.loopAddBlankSlides?(c(l-i.slides.length%l),i.recalcSlides(),i.updateSlides()):(0,n.v)("Swiper Loop Warning: The number of slides is not even to slidesPerGroup, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)"),a()):d?(r.loopAddBlankSlides?(c(r.grid.rows-i.slides.length%r.grid.rows),i.recalcSlides(),i.updateSlides()):(0,n.v)("Swiper Loop Warning: The number of slides is not even to grid.rows, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)"),a()):a(),i.loopFix({slideRealIndex:e,direction:r.centeredSlides?void 0:"next",initial:t})},loopFix:function(e){let{slideRealIndex:t,slideTo:i=!0,direction:r,setTranslate:s,activeSlideIndex:a,initial:o,byController:l,byMousewheel:p}=void 0===e?{}:e;const d=this;if(!d.params.loop)return;d.emit("beforeLoopFix");const{slides:c,allowSlidePrev:u,allowSlideNext:A,slidesEl:g,params:w}=d,{centeredSlides:m,initialSlide:h}=w;if(d.allowSlidePrev=!0,d.allowSlideNext=!0,d.virtual&&w.virtual.enabled)return i&&(w.centeredSlides||0!==d.snapIndex?w.centeredSlides&&d.snapIndex<w.slidesPerView?d.slideTo(d.virtual.slides.length+d.snapIndex,0,!1,!0):d.snapIndex===d.snapGrid.length-1&&d.slideTo(d.virtual.slidesBefore,0,!1,!0):d.slideTo(d.virtual.slides.length,0,!1,!0)),d.allowSlidePrev=u,d.allowSlideNext=A,void d.emit("loopFix");let f=w.slidesPerView;"auto"===f?f=d.slidesPerViewDynamic():(f=Math.ceil(parseFloat(w.slidesPerView,10)),m&&f%2==0&&(f+=1));const v=w.slidesPerGroupAuto?f:w.slidesPerGroup;let b=m?Math.max(v,Math.ceil(f/2)):v;b%v!==0&&(b+=v-b%v),b+=w.loopAdditionalSlides,d.loopedSlides=b;const C=d.grid&&w.grid&&w.grid.rows>1;c.length<f+b||"cards"===d.params.effect&&c.length<f+2*b?(0,n.v)("Swiper Loop Warning: The number of slides is not enough for loop mode, it will be disabled or not function properly. You need to add more slides (or make duplicates) or lower the values of slidesPerView and slidesPerGroup parameters"):C&&"row"===w.grid.fill&&(0,n.v)("Swiper Loop Warning: Loop mode is not compatible with grid.fill = `row`");const E=[],y=[],x=C?Math.ceil(c.length/w.grid.rows):c.length,S=o&&x-h<f&&!m;let T=S?h:d.activeIndex;void 0===a?a=d.getSlideIndex(c.find(e=>e.classList.contains(w.slideActiveClass))):T=a;const M="next"===r||!r,k="prev"===r||!r;let P=0,B=0;const z=(C?c[a].column:a)+(m&&void 0===s?-f/2+.5:0);if(z<b){P=Math.max(b-z,v);for(let e=0;e<b-z;e+=1){const t=e-Math.floor(e/x)*x;if(C){const e=x-t-1;for(let t=c.length-1;t>=0;t-=1)c[t].column===e&&E.push(t)}else E.push(x-t-1)}}else if(z+f>x-b){B=Math.max(z-(x-2*b),v),S&&(B=Math.max(B,f-x+h+1));for(let e=0;e<B;e+=1){const t=e-Math.floor(e/x)*x;C?c.forEach((e,i)=>{e.column===t&&y.push(i)}):y.push(t)}}if(d.__preventObserver__=!0,requestAnimationFrame(()=>{d.__preventObserver__=!1}),"cards"===d.params.effect&&c.length<f+2*b&&(y.includes(a)&&y.splice(y.indexOf(a),1),E.includes(a)&&E.splice(E.indexOf(a),1)),k&&E.forEach(e=>{c[e].swiperLoopMoveDOM=!0,g.prepend(c[e]),c[e].swiperLoopMoveDOM=!1}),M&&y.forEach(e=>{c[e].swiperLoopMoveDOM=!0,g.append(c[e]),c[e].swiperLoopMoveDOM=!1}),d.recalcSlides(),"auto"===w.slidesPerView?d.updateSlides():C&&(E.length>0&&k||y.length>0&&M)&&d.slides.forEach((e,t)=>{d.grid.updateSlide(t,e,d.slides)}),w.watchSlidesProgress&&d.updateSlidesOffset(),i)if(E.length>0&&k){if(void 0===t){const e=d.slidesGrid[T],t=d.slidesGrid[T+P]-e;p?d.setTranslate(d.translate-t):(d.slideTo(T+Math.ceil(P),0,!1,!0),s&&(d.touchEventsData.startTranslate=d.touchEventsData.startTranslate-t,d.touchEventsData.currentTranslate=d.touchEventsData.currentTranslate-t))}else if(s){const e=C?E.length/w.grid.rows:E.length;d.slideTo(d.activeIndex+e,0,!1,!0),d.touchEventsData.currentTranslate=d.translate}}else if(y.length>0&&M)if(void 0===t){const e=d.slidesGrid[T],t=d.slidesGrid[T-B]-e;p?d.setTranslate(d.translate-t):(d.slideTo(T-B,0,!1,!0),s&&(d.touchEventsData.startTranslate=d.touchEventsData.startTranslate-t,d.touchEventsData.currentTranslate=d.touchEventsData.currentTranslate-t))}else{const e=C?y.length/w.grid.rows:y.length;d.slideTo(d.activeIndex-e,0,!1,!0)}if(d.allowSlidePrev=u,d.allowSlideNext=A,d.controller&&d.controller.control&&!l){const e={slideRealIndex:t,direction:r,setTranslate:s,activeSlideIndex:a,byController:!0};Array.isArray(d.controller.control)?d.controller.control.forEach(t=>{!t.destroyed&&t.params.loop&&t.loopFix({...e,slideTo:t.params.slidesPerView===w.slidesPerView&&i})}):d.controller.control instanceof d.constructor&&d.controller.control.params.loop&&d.controller.control.loopFix({...e,slideTo:d.controller.control.params.slidesPerView===w.slidesPerView&&i})}d.emit("loopFix")},loopDestroy:function(){const e=this,{params:t,slidesEl:i}=e;if(!t.loop||!i||e.virtual&&e.params.virtual.enabled)return;e.recalcSlides();const r=[];e.slides.forEach(e=>{const t=void 0===e.swiperSlideIndex?1*e.getAttribute("data-swiper-slide-index"):e.swiperSlideIndex;r[t]=e}),e.slides.forEach(e=>{e.removeAttribute("data-swiper-slide-index")}),r.forEach(e=>{i.append(e)}),e.recalcSlides(),e.slideTo(e.realIndex,0)}};function E(e,t,i){const r=(0,s.a)(),{params:n}=e,a=n.edgeSwipeDetection,o=n.edgeSwipeThreshold;return!a||!(i<=o||i>=r.innerWidth-o)||"prevent"===a&&(t.preventDefault(),!0)}function y(e){const t=this,i=(0,s.g)();let r=e;r.originalEvent&&(r=r.originalEvent);const a=t.touchEventsData;if("pointerdown"===r.type){if(null!==a.pointerId&&a.pointerId!==r.pointerId)return;a.pointerId=r.pointerId}else"touchstart"===r.type&&1===r.targetTouches.length&&(a.touchId=r.targetTouches[0].identifier);if("touchstart"===r.type)return void E(t,r,r.targetTouches[0].pageX);const{params:o,touches:l,enabled:p}=t;if(!p)return;if(!o.simulateTouch&&"mouse"===r.pointerType)return;if(t.animating&&o.preventInteractionOnTransition)return;!t.animating&&o.cssMode&&o.loop&&t.loopFix();let d=r.target;if("wrapper"===o.touchEventsTarget&&!(0,n.w)(d,t.wrapperEl))return;if("which"in r&&3===r.which)return;if("button"in r&&r.button>0)return;if(a.isTouched&&a.isMoved)return;const c=!!o.noSwipingClass&&""!==o.noSwipingClass,u=r.composedPath?r.composedPath():r.path;c&&r.target&&r.target.shadowRoot&&u&&(d=u[0]);const A=o.noSwipingSelector?o.noSwipingSelector:`.${o.noSwipingClass}`,g=!(!r.target||!r.target.shadowRoot);if(o.noSwiping&&(g?function(e,t){return void 0===t&&(t=this),function t(i){if(!i||i===(0,s.g)()||i===(0,s.a)())return null;i.assignedSlot&&(i=i.assignedSlot);const r=i.closest(e);return r||i.getRootNode?r||t(i.getRootNode().host):null}(t)}(A,d):d.closest(A)))return void(t.allowClick=!0);if(o.swipeHandler&&!d.closest(o.swipeHandler))return;l.currentX=r.pageX,l.currentY=r.pageY;const w=l.currentX,m=l.currentY;if(!E(t,r,w))return;Object.assign(a,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),l.startX=w,l.startY=m,a.touchStartTime=(0,n.f)(),t.allowClick=!0,t.updateSize(),t.swipeDirection=void 0,o.threshold>0&&(a.allowThresholdMove=!1);let h=!0;d.matches(a.focusableElements)&&(h=!1,"SELECT"===d.nodeName&&(a.isTouched=!1)),i.activeElement&&i.activeElement.matches(a.focusableElements)&&i.activeElement!==d&&("mouse"===r.pointerType||"mouse"!==r.pointerType&&!d.matches(a.focusableElements))&&i.activeElement.blur();const f=h&&t.allowTouchMove&&o.touchStartPreventDefault;!o.touchStartForcePreventDefault&&!f||d.isContentEditable||r.preventDefault(),o.freeMode&&o.freeMode.enabled&&t.freeMode&&t.animating&&!o.cssMode&&t.freeMode.onTouchStart(),t.emit("touchStart",r)}function x(e){const t=(0,s.g)(),i=this,r=i.touchEventsData,{params:a,touches:o,rtlTranslate:l,enabled:p}=i;if(!p)return;if(!a.simulateTouch&&"mouse"===e.pointerType)return;let d,c=e;if(c.originalEvent&&(c=c.originalEvent),"pointermove"===c.type){if(null!==r.touchId)return;if(c.pointerId!==r.pointerId)return}if("touchmove"===c.type){if(d=[...c.changedTouches].find(e=>e.identifier===r.touchId),!d||d.identifier!==r.touchId)return}else d=c;if(!r.isTouched)return void(r.startMoving&&r.isScrolling&&i.emit("touchMoveOpposite",c));const u=d.pageX,A=d.pageY;if(c.preventedByNestedSwiper)return o.startX=u,void(o.startY=A);if(!i.allowTouchMove)return c.target.matches(r.focusableElements)||(i.allowClick=!1),void(r.isTouched&&(Object.assign(o,{startX:u,startY:A,currentX:u,currentY:A}),r.touchStartTime=(0,n.f)()));if(a.touchReleaseOnEdges&&!a.loop)if(i.isVertical()){if(A<o.startY&&i.translate<=i.maxTranslate()||A>o.startY&&i.translate>=i.minTranslate())return r.isTouched=!1,void(r.isMoved=!1)}else{if(l&&(u>o.startX&&-i.translate<=i.maxTranslate()||u<o.startX&&-i.translate>=i.minTranslate()))return;if(!l&&(u<o.startX&&i.translate<=i.maxTranslate()||u>o.startX&&i.translate>=i.minTranslate()))return}if(t.activeElement&&t.activeElement.matches(r.focusableElements)&&t.activeElement!==c.target&&"mouse"!==c.pointerType&&t.activeElement.blur(),t.activeElement&&c.target===t.activeElement&&c.target.matches(r.focusableElements))return r.isMoved=!0,void(i.allowClick=!1);r.allowTouchCallbacks&&i.emit("touchMove",c),o.previousX=o.currentX,o.previousY=o.currentY,o.currentX=u,o.currentY=A;const g=o.currentX-o.startX,w=o.currentY-o.startY;if(i.params.threshold&&Math.sqrt(g**2+w**2)<i.params.threshold)return;if(void 0===r.isScrolling){let e;i.isHorizontal()&&o.currentY===o.startY||i.isVertical()&&o.currentX===o.startX?r.isScrolling=!1:g*g+w*w>=25&&(e=180*Math.atan2(Math.abs(w),Math.abs(g))/Math.PI,r.isScrolling=i.isHorizontal()?e>a.touchAngle:90-e>a.touchAngle)}if(r.isScrolling&&i.emit("touchMoveOpposite",c),void 0===r.startMoving&&(o.currentX===o.startX&&o.currentY===o.startY||(r.startMoving=!0)),r.isScrolling||"touchmove"===c.type&&r.preventTouchMoveFromPointerMove)return void(r.isTouched=!1);if(!r.startMoving)return;i.allowClick=!1,!a.cssMode&&c.cancelable&&c.preventDefault(),a.touchMoveStopPropagation&&!a.nested&&c.stopPropagation();let m=i.isHorizontal()?g:w,h=i.isHorizontal()?o.currentX-o.previousX:o.currentY-o.previousY;a.oneWayMovement&&(m=Math.abs(m)*(l?1:-1),h=Math.abs(h)*(l?1:-1)),o.diff=m,m*=a.touchRatio,l&&(m=-m,h=-h);const f=i.touchesDirection;i.swipeDirection=m>0?"prev":"next",i.touchesDirection=h>0?"prev":"next";const v=i.params.loop&&!a.cssMode,b="next"===i.touchesDirection&&i.allowSlideNext||"prev"===i.touchesDirection&&i.allowSlidePrev;if(!r.isMoved){if(v&&b&&i.loopFix({direction:i.swipeDirection}),r.startTranslate=i.getTranslate(),i.setTransition(0),i.animating){const e=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0,detail:{bySwiperTouchMove:!0}});i.wrapperEl.dispatchEvent(e)}r.allowMomentumBounce=!1,!a.grabCursor||!0!==i.allowSlideNext&&!0!==i.allowSlidePrev||i.setGrabCursor(!0),i.emit("sliderFirstMove",c)}if((new Date).getTime(),!1!==a._loopSwapReset&&r.isMoved&&r.allowThresholdMove&&f!==i.touchesDirection&&v&&b&&Math.abs(m)>=1)return Object.assign(o,{startX:u,startY:A,currentX:u,currentY:A,startTranslate:r.currentTranslate}),r.loopSwapReset=!0,void(r.startTranslate=r.currentTranslate);i.emit("sliderMove",c),r.isMoved=!0,r.currentTranslate=m+r.startTranslate;let C=!0,E=a.resistanceRatio;if(a.touchReleaseOnEdges&&(E=0),m>0?(v&&b&&r.allowThresholdMove&&r.currentTranslate>(a.centeredSlides?i.minTranslate()-i.slidesSizesGrid[i.activeIndex+1]-("auto"!==a.slidesPerView&&i.slides.length-a.slidesPerView>=2?i.slidesSizesGrid[i.activeIndex+1]+i.params.spaceBetween:0)-i.params.spaceBetween:i.minTranslate())&&i.loopFix({direction:"prev",setTranslate:!0,activeSlideIndex:0}),r.currentTranslate>i.minTranslate()&&(C=!1,a.resistance&&(r.currentTranslate=i.minTranslate()-1+(-i.minTranslate()+r.startTranslate+m)**E))):m<0&&(v&&b&&r.allowThresholdMove&&r.currentTranslate<(a.centeredSlides?i.maxTranslate()+i.slidesSizesGrid[i.slidesSizesGrid.length-1]+i.params.spaceBetween+("auto"!==a.slidesPerView&&i.slides.length-a.slidesPerView>=2?i.slidesSizesGrid[i.slidesSizesGrid.length-1]+i.params.spaceBetween:0):i.maxTranslate())&&i.loopFix({direction:"next",setTranslate:!0,activeSlideIndex:i.slides.length-("auto"===a.slidesPerView?i.slidesPerViewDynamic():Math.ceil(parseFloat(a.slidesPerView,10)))}),r.currentTranslate<i.maxTranslate()&&(C=!1,a.resistance&&(r.currentTranslate=i.maxTranslate()+1-(i.maxTranslate()-r.startTranslate-m)**E))),C&&(c.preventedByNestedSwiper=!0),!i.allowSlideNext&&"next"===i.swipeDirection&&r.currentTranslate<r.startTranslate&&(r.currentTranslate=r.startTranslate),!i.allowSlidePrev&&"prev"===i.swipeDirection&&r.currentTranslate>r.startTranslate&&(r.currentTranslate=r.startTranslate),i.allowSlidePrev||i.allowSlideNext||(r.currentTranslate=r.startTranslate),a.threshold>0){if(!(Math.abs(m)>a.threshold||r.allowThresholdMove))return void(r.currentTranslate=r.startTranslate);if(!r.allowThresholdMove)return r.allowThresholdMove=!0,o.startX=o.currentX,o.startY=o.currentY,r.currentTranslate=r.startTranslate,void(o.diff=i.isHorizontal()?o.currentX-o.startX:o.currentY-o.startY)}a.followFinger&&!a.cssMode&&((a.freeMode&&a.freeMode.enabled&&i.freeMode||a.watchSlidesProgress)&&(i.updateActiveIndex(),i.updateSlidesClasses()),a.freeMode&&a.freeMode.enabled&&i.freeMode&&i.freeMode.onTouchMove(),i.updateProgress(r.currentTranslate),i.setTranslate(r.currentTranslate))}function S(e){const t=this,i=t.touchEventsData;let r,s=e;if(s.originalEvent&&(s=s.originalEvent),"touchend"===s.type||"touchcancel"===s.type){if(r=[...s.changedTouches].find(e=>e.identifier===i.touchId),!r||r.identifier!==i.touchId)return}else{if(null!==i.touchId)return;if(s.pointerId!==i.pointerId)return;r=s}if(["pointercancel","pointerout","pointerleave","contextmenu"].includes(s.type)&&(!["pointercancel","contextmenu"].includes(s.type)||!t.browser.isSafari&&!t.browser.isWebView))return;i.pointerId=null,i.touchId=null;const{params:a,touches:o,rtlTranslate:l,slidesGrid:p,enabled:d}=t;if(!d)return;if(!a.simulateTouch&&"mouse"===s.pointerType)return;if(i.allowTouchCallbacks&&t.emit("touchEnd",s),i.allowTouchCallbacks=!1,!i.isTouched)return i.isMoved&&a.grabCursor&&t.setGrabCursor(!1),i.isMoved=!1,void(i.startMoving=!1);a.grabCursor&&i.isMoved&&i.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);const c=(0,n.f)(),u=c-i.touchStartTime;if(t.allowClick){const e=s.path||s.composedPath&&s.composedPath();t.updateClickedSlide(e&&e[0]||s.target,e),t.emit("tap click",s),u<300&&c-i.lastClickTime<300&&t.emit("doubleTap doubleClick",s)}if(i.lastClickTime=(0,n.f)(),(0,n.n)(()=>{t.destroyed||(t.allowClick=!0)}),!i.isTouched||!i.isMoved||!t.swipeDirection||0===o.diff&&!i.loopSwapReset||i.currentTranslate===i.startTranslate&&!i.loopSwapReset)return i.isTouched=!1,i.isMoved=!1,void(i.startMoving=!1);let A;if(i.isTouched=!1,i.isMoved=!1,i.startMoving=!1,A=a.followFinger?l?t.translate:-t.translate:-i.currentTranslate,a.cssMode)return;if(a.freeMode&&a.freeMode.enabled)return void t.freeMode.onTouchEnd({currentPos:A});const g=A>=-t.maxTranslate()&&!t.params.loop;let w=0,m=t.slidesSizesGrid[0];for(let e=0;e<p.length;e+=e<a.slidesPerGroupSkip?1:a.slidesPerGroup){const t=e<a.slidesPerGroupSkip-1?1:a.slidesPerGroup;void 0!==p[e+t]?(g||A>=p[e]&&A<p[e+t])&&(w=e,m=p[e+t]-p[e]):(g||A>=p[e])&&(w=e,m=p[p.length-1]-p[p.length-2])}let h=null,f=null;a.rewind&&(t.isBeginning?f=a.virtual&&a.virtual.enabled&&t.virtual?t.virtual.slides.length-1:t.slides.length-1:t.isEnd&&(h=0));const v=(A-p[w])/m,b=w<a.slidesPerGroupSkip-1?1:a.slidesPerGroup;if(u>a.longSwipesMs){if(!a.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(v>=a.longSwipesRatio?t.slideTo(a.rewind&&t.isEnd?h:w+b):t.slideTo(w)),"prev"===t.swipeDirection&&(v>1-a.longSwipesRatio?t.slideTo(w+b):null!==f&&v<0&&Math.abs(v)>a.longSwipesRatio?t.slideTo(f):t.slideTo(w))}else{if(!a.shortSwipes)return void t.slideTo(t.activeIndex);!t.navigation||s.target!==t.navigation.nextEl&&s.target!==t.navigation.prevEl?("next"===t.swipeDirection&&t.slideTo(null!==h?h:w+b),"prev"===t.swipeDirection&&t.slideTo(null!==f?f:w)):s.target===t.navigation.nextEl?t.slideTo(w+b):t.slideTo(w)}}function T(){const e=this,{params:t,el:i}=e;if(i&&0===i.offsetWidth)return;t.breakpoints&&e.setBreakpoint();const{allowSlideNext:r,allowSlidePrev:s,snapGrid:n}=e,a=e.virtual&&e.params.virtual.enabled;e.allowSlideNext=!0,e.allowSlidePrev=!0,e.updateSize(),e.updateSlides(),e.updateSlidesClasses();const o=a&&t.loop;!("auto"===t.slidesPerView||t.slidesPerView>1)||!e.isEnd||e.isBeginning||e.params.centeredSlides||o?e.params.loop&&!a?e.slideToLoop(e.realIndex,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0):e.slideTo(e.slides.length-1,0,!1,!0),e.autoplay&&e.autoplay.running&&e.autoplay.paused&&(clearTimeout(e.autoplay.resizeTimeout),e.autoplay.resizeTimeout=setTimeout(()=>{e.autoplay&&e.autoplay.running&&e.autoplay.paused&&e.autoplay.resume()},500)),e.allowSlidePrev=s,e.allowSlideNext=r,e.params.watchOverflow&&n!==e.snapGrid&&e.checkOverflow()}function M(e){const t=this;t.enabled&&(t.allowClick||(t.params.preventClicks&&e.preventDefault(),t.params.preventClicksPropagation&&t.animating&&(e.stopPropagation(),e.stopImmediatePropagation())))}function k(){const e=this,{wrapperEl:t,rtlTranslate:i,enabled:r}=e;if(!r)return;let s;e.previousTranslate=e.translate,e.isHorizontal()?e.translate=-t.scrollLeft:e.translate=-t.scrollTop,0===e.translate&&(e.translate=0),e.updateActiveIndex(),e.updateSlidesClasses();const n=e.maxTranslate()-e.minTranslate();s=0===n?0:(e.translate-e.minTranslate())/n,s!==e.progress&&e.updateProgress(i?-e.translate:e.translate),e.emit("setTranslate",e.translate,!1)}function P(e){const t=this;w(t,e.target),t.params.cssMode||"auto"!==t.params.slidesPerView&&!t.params.autoHeight||t.update()}function B(){const e=this;e.documentTouchHandlerProceeded||(e.documentTouchHandlerProceeded=!0,e.params.touchReleaseOnEdges&&(e.el.style.touchAction="auto"))}const z=(e,t)=>{const i=(0,s.g)(),{params:r,el:n,wrapperEl:a,device:o}=e,l=!!r.nested,p="on"===t?"addEventListener":"removeEventListener",d=t;n&&"string"!=typeof n&&(i[p]("touchstart",e.onDocumentTouchStart,{passive:!1,capture:l}),n[p]("touchstart",e.onTouchStart,{passive:!1}),n[p]("pointerdown",e.onTouchStart,{passive:!1}),i[p]("touchmove",e.onTouchMove,{passive:!1,capture:l}),i[p]("pointermove",e.onTouchMove,{passive:!1,capture:l}),i[p]("touchend",e.onTouchEnd,{passive:!0}),i[p]("pointerup",e.onTouchEnd,{passive:!0}),i[p]("pointercancel",e.onTouchEnd,{passive:!0}),i[p]("touchcancel",e.onTouchEnd,{passive:!0}),i[p]("pointerout",e.onTouchEnd,{passive:!0}),i[p]("pointerleave",e.onTouchEnd,{passive:!0}),i[p]("contextmenu",e.onTouchEnd,{passive:!0}),(r.preventClicks||r.preventClicksPropagation)&&n[p]("click",e.onClick,!0),r.cssMode&&a[p]("scroll",e.onScroll),r.updateOnWindowResize?e[d](o.ios||o.android?"resize orientationchange observerUpdate":"resize observerUpdate",T,!0):e[d]("observerUpdate",T,!0),n[p]("load",e.onLoad,{capture:!0}))},L=(e,t)=>e.grid&&t.grid&&t.grid.rows>1;var I={init:!0,direction:"horizontal",oneWayMovement:!1,swiperElementNodeName:"SWIPER-CONTAINER",touchEventsTarget:"wrapper",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,resizeObserver:!0,nested:!1,createElements:!1,eventsPrefix:"swiper",enabled:!0,focusableElements:"input, select, option, textarea, button, video, label",width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsBase:"window",spaceBetween:0,slidesPerView:1,slidesPerGroup:1,slidesPerGroupSkip:0,slidesPerGroupAuto:!1,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:5,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,loop:!1,loopAddBlankSlides:!0,loopAdditionalSlides:0,loopPreventsSliding:!0,rewind:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,maxBackfaceHiddenSlides:10,containerModifierClass:"swiper-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-blank",slideActiveClass:"swiper-slide-active",slideVisibleClass:"swiper-slide-visible",slideFullyVisibleClass:"swiper-slide-fully-visible",slideNextClass:"swiper-slide-next",slidePrevClass:"swiper-slide-prev",wrapperClass:"swiper-wrapper",lazyPreloaderClass:"swiper-lazy-preloader",lazyPreloadPrevNext:0,runCallbacksOnInit:!0,_emitClasses:!1};function O(e,t){return function(i){void 0===i&&(i={});const r=Object.keys(i)[0],s=i[r];"object"==typeof s&&null!==s?(!0===e[r]&&(e[r]={enabled:!0}),"navigation"===r&&e[r]&&e[r].enabled&&!e[r].prevEl&&!e[r].nextEl&&(e[r].auto=!0),["pagination","scrollbar"].indexOf(r)>=0&&e[r]&&e[r].enabled&&!e[r].el&&(e[r].auto=!0),r in e&&"enabled"in s?("object"!=typeof e[r]||"enabled"in e[r]||(e[r].enabled=!0),e[r]||(e[r]={enabled:!1}),(0,n.x)(t,i)):(0,n.x)(t,i)):(0,n.x)(t,i)}}const F={eventsEmitter:u,update:f,translate:{getTranslate:function(e){void 0===e&&(e=this.isHorizontal()?"x":"y");const{params:t,rtlTranslate:i,translate:r,wrapperEl:s}=this;if(t.virtualTranslate)return i?-r:r;if(t.cssMode)return r;let a=(0,n.k)(s,e);return a+=this.cssOverflowAdjustment(),i&&(a=-a),a||0},setTranslate:function(e,t){const i=this,{rtlTranslate:r,params:s,wrapperEl:n,progress:a}=i;let o,l=0,p=0;i.isHorizontal()?l=r?-e:e:p=e,s.roundLengths&&(l=Math.floor(l),p=Math.floor(p)),i.previousTranslate=i.translate,i.translate=i.isHorizontal()?l:p,s.cssMode?n[i.isHorizontal()?"scrollLeft":"scrollTop"]=i.isHorizontal()?-l:-p:s.virtualTranslate||(i.isHorizontal()?l-=i.cssOverflowAdjustment():p-=i.cssOverflowAdjustment(),n.style.transform=`translate3d(${l}px, ${p}px, 0px)`);const d=i.maxTranslate()-i.minTranslate();o=0===d?0:(e-i.minTranslate())/d,o!==a&&i.updateProgress(e),i.emit("setTranslate",i.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(e,t,i,r,s){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===i&&(i=!0),void 0===r&&(r=!0);const a=this,{params:o,wrapperEl:l}=a;if(a.animating&&o.preventInteractionOnTransition)return!1;const p=a.minTranslate(),d=a.maxTranslate();let c;if(c=r&&e>p?p:r&&e<d?d:e,a.updateProgress(c),o.cssMode){const e=a.isHorizontal();if(0===t)l[e?"scrollLeft":"scrollTop"]=-c;else{if(!a.support.smoothScroll)return(0,n.u)({swiper:a,targetPosition:-c,side:e?"left":"top"}),!0;l.scrollTo({[e?"left":"top"]:-c,behavior:"smooth"})}return!0}return 0===t?(a.setTransition(0),a.setTranslate(c),i&&(a.emit("beforeTransitionStart",t,s),a.emit("transitionEnd"))):(a.setTransition(t),a.setTranslate(c),i&&(a.emit("beforeTransitionStart",t,s),a.emit("transitionStart")),a.animating||(a.animating=!0,a.onTranslateToWrapperTransitionEnd||(a.onTranslateToWrapperTransitionEnd=function(e){a&&!a.destroyed&&e.target===this&&(a.wrapperEl.removeEventListener("transitionend",a.onTranslateToWrapperTransitionEnd),a.onTranslateToWrapperTransitionEnd=null,delete a.onTranslateToWrapperTransitionEnd,a.animating=!1,i&&a.emit("transitionEnd"))}),a.wrapperEl.addEventListener("transitionend",a.onTranslateToWrapperTransitionEnd))),!0}},transition:{setTransition:function(e,t){const i=this;i.params.cssMode||(i.wrapperEl.style.transitionDuration=`${e}ms`,i.wrapperEl.style.transitionDelay=0===e?"0ms":""),i.emit("setTransition",e,t)},transitionStart:function(e,t){void 0===e&&(e=!0);const i=this,{params:r}=i;r.cssMode||(r.autoHeight&&i.updateAutoHeight(),v({swiper:i,runCallbacks:e,direction:t,step:"Start"}))},transitionEnd:function(e,t){void 0===e&&(e=!0);const i=this,{params:r}=i;i.animating=!1,r.cssMode||(i.setTransition(0),v({swiper:i,runCallbacks:e,direction:t,step:"End"}))}},slide:b,loop:C,grabCursor:{setGrabCursor:function(e){const t=this;if(!t.params.simulateTouch||t.params.watchOverflow&&t.isLocked||t.params.cssMode)return;const i="container"===t.params.touchEventsTarget?t.el:t.wrapperEl;t.isElement&&(t.__preventObserver__=!0),i.style.cursor="move",i.style.cursor=e?"grabbing":"grab",t.isElement&&requestAnimationFrame(()=>{t.__preventObserver__=!1})},unsetGrabCursor:function(){const e=this;e.params.watchOverflow&&e.isLocked||e.params.cssMode||(e.isElement&&(e.__preventObserver__=!0),e["container"===e.params.touchEventsTarget?"el":"wrapperEl"].style.cursor="",e.isElement&&requestAnimationFrame(()=>{e.__preventObserver__=!1}))}},events:{attachEvents:function(){const e=this,{params:t}=e;e.onTouchStart=y.bind(e),e.onTouchMove=x.bind(e),e.onTouchEnd=S.bind(e),e.onDocumentTouchStart=B.bind(e),t.cssMode&&(e.onScroll=k.bind(e)),e.onClick=M.bind(e),e.onLoad=P.bind(e),z(e,"on")},detachEvents:function(){z(this,"off")}},breakpoints:{setBreakpoint:function(){const e=this,{realIndex:t,initialized:i,params:r,el:a}=e,o=r.breakpoints;if(!o||o&&0===Object.keys(o).length)return;const l=(0,s.g)(),p="window"!==r.breakpointsBase&&r.breakpointsBase?"container":r.breakpointsBase,d=["window","container"].includes(r.breakpointsBase)||!r.breakpointsBase?e.el:l.querySelector(r.breakpointsBase),c=e.getBreakpoint(o,p,d);if(!c||e.currentBreakpoint===c)return;const u=(c in o?o[c]:void 0)||e.originalParams,A=L(e,r),g=L(e,u),w=e.params.grabCursor,m=u.grabCursor,h=r.enabled;A&&!g?(a.classList.remove(`${r.containerModifierClass}grid`,`${r.containerModifierClass}grid-column`),e.emitContainerClasses()):!A&&g&&(a.classList.add(`${r.containerModifierClass}grid`),(u.grid.fill&&"column"===u.grid.fill||!u.grid.fill&&"column"===r.grid.fill)&&a.classList.add(`${r.containerModifierClass}grid-column`),e.emitContainerClasses()),w&&!m?e.unsetGrabCursor():!w&&m&&e.setGrabCursor(),["navigation","pagination","scrollbar"].forEach(t=>{if(void 0===u[t])return;const i=r[t]&&r[t].enabled,s=u[t]&&u[t].enabled;i&&!s&&e[t].disable(),!i&&s&&e[t].enable()});const f=u.direction&&u.direction!==r.direction,v=r.loop&&(u.slidesPerView!==r.slidesPerView||f),b=r.loop;f&&i&&e.changeDirection(),(0,n.x)(e.params,u);const C=e.params.enabled,E=e.params.loop;Object.assign(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),h&&!C?e.disable():!h&&C&&e.enable(),e.currentBreakpoint=c,e.emit("_beforeBreakpoint",u),i&&(v?(e.loopDestroy(),e.loopCreate(t),e.updateSlides()):!b&&E?(e.loopCreate(t),e.updateSlides()):b&&!E&&e.loopDestroy()),e.emit("breakpoint",u)},getBreakpoint:function(e,t,i){if(void 0===t&&(t="window"),!e||"container"===t&&!i)return;let r=!1;const n=(0,s.a)(),a="window"===t?n.innerHeight:i.clientHeight,o=Object.keys(e).map(e=>{if("string"==typeof e&&0===e.indexOf("@")){const t=parseFloat(e.substr(1));return{value:a*t,point:e}}return{value:e,point:e}});o.sort((e,t)=>parseInt(e.value,10)-parseInt(t.value,10));for(let e=0;e<o.length;e+=1){const{point:s,value:a}=o[e];"window"===t?n.matchMedia(`(min-width: ${a}px)`).matches&&(r=s):a<=i.clientWidth&&(r=s)}return r||"max"}},checkOverflow:{checkOverflow:function(){const e=this,{isLocked:t,params:i}=e,{slidesOffsetBefore:r}=i;if(r){const t=e.slides.length-1,i=e.slidesGrid[t]+e.slidesSizesGrid[t]+2*r;e.isLocked=e.size>i}else e.isLocked=1===e.snapGrid.length;!0===i.allowSlideNext&&(e.allowSlideNext=!e.isLocked),!0===i.allowSlidePrev&&(e.allowSlidePrev=!e.isLocked),t&&t!==e.isLocked&&(e.isEnd=!1),t!==e.isLocked&&e.emit(e.isLocked?"lock":"unlock")}},classes:{addClasses:function(){const e=this,{classNames:t,params:i,rtl:r,el:s,device:n}=e,a=function(e,t){const i=[];return e.forEach(e=>{"object"==typeof e?Object.keys(e).forEach(r=>{e[r]&&i.push(t+r)}):"string"==typeof e&&i.push(t+e)}),i}(["initialized",i.direction,{"free-mode":e.params.freeMode&&i.freeMode.enabled},{autoheight:i.autoHeight},{rtl:r},{grid:i.grid&&i.grid.rows>1},{"grid-column":i.grid&&i.grid.rows>1&&"column"===i.grid.fill},{android:n.android},{ios:n.ios},{"css-mode":i.cssMode},{centered:i.cssMode&&i.centeredSlides},{"watch-progress":i.watchSlidesProgress}],i.containerModifierClass);t.push(...a),s.classList.add(...t),e.emitContainerClasses()},removeClasses:function(){const{el:e,classNames:t}=this;e&&"string"!=typeof e&&(e.classList.remove(...t),this.emitContainerClasses())}}},G={};class _{constructor(){let e,t;for(var i=arguments.length,r=new Array(i),a=0;a<i;a++)r[a]=arguments[a];1===r.length&&r[0].constructor&&"Object"===Object.prototype.toString.call(r[0]).slice(8,-1)?t=r[0]:[e,t]=r,t||(t={}),t=(0,n.x)({},t),e&&!t.el&&(t.el=e);const o=(0,s.g)();if(t.el&&"string"==typeof t.el&&o.querySelectorAll(t.el).length>1){const e=[];return o.querySelectorAll(t.el).forEach(i=>{const r=(0,n.x)({},t,{el:i});e.push(new _(r))}),e}const l=this;l.__swiper__=!0,l.support=p(),l.device=d({userAgent:t.userAgent}),l.browser=c(),l.eventsListeners={},l.eventsAnyListeners=[],l.modules=[...l.__modules__],t.modules&&Array.isArray(t.modules)&&l.modules.push(...t.modules);const u={};l.modules.forEach(e=>{e({params:t,swiper:l,extendParams:O(t,u),on:l.on.bind(l),once:l.once.bind(l),off:l.off.bind(l),emit:l.emit.bind(l)})});const A=(0,n.x)({},I,u);return l.params=(0,n.x)({},A,G,t),l.originalParams=(0,n.x)({},l.params),l.passedParams=(0,n.x)({},t),l.params&&l.params.on&&Object.keys(l.params.on).forEach(e=>{l.on(e,l.params.on[e])}),l.params&&l.params.onAny&&l.onAny(l.params.onAny),Object.assign(l,{enabled:l.params.enabled,el:e,classNames:[],slides:[],slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:()=>"horizontal"===l.params.direction,isVertical:()=>"vertical"===l.params.direction,activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,cssOverflowAdjustment(){return Math.trunc(this.translate/2**23)*2**23},allowSlideNext:l.params.allowSlideNext,allowSlidePrev:l.params.allowSlidePrev,touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,focusableElements:l.params.focusableElements,lastClickTime:0,clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,startMoving:void 0,pointerId:null,touchId:null},allowClick:!0,allowTouchMove:l.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),l.emit("_swiper"),l.params.init&&l.init(),l}getDirectionLabel(e){return this.isHorizontal()?e:{width:"height","margin-top":"margin-left","margin-bottom ":"margin-right","margin-left":"margin-top","margin-right":"margin-bottom","padding-left":"padding-top","padding-right":"padding-bottom",marginRight:"marginBottom"}[e]}getSlideIndex(e){const{slidesEl:t,params:i}=this,r=(0,n.e)(t,`.${i.slideClass}, swiper-slide`),s=(0,n.i)(r[0]);return(0,n.i)(e)-s}getSlideIndexByData(e){return this.getSlideIndex(this.slides.find(t=>1*t.getAttribute("data-swiper-slide-index")===e))}getSlideIndexWhenGrid(e){return this.grid&&this.params.grid&&this.params.grid.rows>1&&("column"===this.params.grid.fill?e=Math.floor(e/this.params.grid.rows):"row"===this.params.grid.fill&&(e%=Math.ceil(this.slides.length/this.params.grid.rows))),e}recalcSlides(){const{slidesEl:e,params:t}=this;this.slides=(0,n.e)(e,`.${t.slideClass}, swiper-slide`)}enable(){const e=this;e.enabled||(e.enabled=!0,e.params.grabCursor&&e.setGrabCursor(),e.emit("enable"))}disable(){const e=this;e.enabled&&(e.enabled=!1,e.params.grabCursor&&e.unsetGrabCursor(),e.emit("disable"))}setProgress(e,t){const i=this;e=Math.min(Math.max(e,0),1);const r=i.minTranslate(),s=(i.maxTranslate()-r)*e+r;i.translateTo(s,void 0===t?0:t),i.updateActiveIndex(),i.updateSlidesClasses()}emitContainerClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=e.el.className.split(" ").filter(t=>0===t.indexOf("swiper")||0===t.indexOf(e.params.containerModifierClass));e.emit("_containerClasses",t.join(" "))}getSlideClasses(e){const t=this;return t.destroyed?"":e.className.split(" ").filter(e=>0===e.indexOf("swiper-slide")||0===e.indexOf(t.params.slideClass)).join(" ")}emitSlidesClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=[];e.slides.forEach(i=>{const r=e.getSlideClasses(i);t.push({slideEl:i,classNames:r}),e.emit("_slideClass",i,r)}),e.emit("_slideClasses",t)}slidesPerViewDynamic(e,t){void 0===e&&(e="current"),void 0===t&&(t=!1);const{params:i,slides:r,slidesGrid:s,slidesSizesGrid:n,size:a,activeIndex:o}=this;let l=1;if("number"==typeof i.slidesPerView)return i.slidesPerView;if(i.centeredSlides){let e,t=r[o]?Math.ceil(r[o].swiperSlideSize):0;for(let i=o+1;i<r.length;i+=1)r[i]&&!e&&(t+=Math.ceil(r[i].swiperSlideSize),l+=1,t>a&&(e=!0));for(let i=o-1;i>=0;i-=1)r[i]&&!e&&(t+=r[i].swiperSlideSize,l+=1,t>a&&(e=!0))}else if("current"===e)for(let e=o+1;e<r.length;e+=1)(t?s[e]+n[e]-s[o]<a:s[e]-s[o]<a)&&(l+=1);else for(let e=o-1;e>=0;e-=1)s[o]-s[e]<a&&(l+=1);return l}update(){const e=this;if(!e||e.destroyed)return;const{snapGrid:t,params:i}=e;function r(){const t=e.rtlTranslate?-1*e.translate:e.translate,i=Math.min(Math.max(t,e.maxTranslate()),e.minTranslate());e.setTranslate(i),e.updateActiveIndex(),e.updateSlidesClasses()}let s;if(i.breakpoints&&e.setBreakpoint(),[...e.el.querySelectorAll('[loading="lazy"]')].forEach(t=>{t.complete&&w(e,t)}),e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),i.freeMode&&i.freeMode.enabled&&!i.cssMode)r(),i.autoHeight&&e.updateAutoHeight();else{if(("auto"===i.slidesPerView||i.slidesPerView>1)&&e.isEnd&&!i.centeredSlides){const t=e.virtual&&i.virtual.enabled?e.virtual.slides:e.slides;s=e.slideTo(t.length-1,0,!1,!0)}else s=e.slideTo(e.activeIndex,0,!1,!0);s||r()}i.watchOverflow&&t!==e.snapGrid&&e.checkOverflow(),e.emit("update")}changeDirection(e,t){void 0===t&&(t=!0);const i=this,r=i.params.direction;return e||(e="horizontal"===r?"vertical":"horizontal"),e===r||"horizontal"!==e&&"vertical"!==e||(i.el.classList.remove(`${i.params.containerModifierClass}${r}`),i.el.classList.add(`${i.params.containerModifierClass}${e}`),i.emitContainerClasses(),i.params.direction=e,i.slides.forEach(t=>{"vertical"===e?t.style.width="":t.style.height=""}),i.emit("changeDirection"),t&&i.update()),i}changeLanguageDirection(e){const t=this;t.rtl&&"rtl"===e||!t.rtl&&"ltr"===e||(t.rtl="rtl"===e,t.rtlTranslate="horizontal"===t.params.direction&&t.rtl,t.rtl?(t.el.classList.add(`${t.params.containerModifierClass}rtl`),t.el.dir="rtl"):(t.el.classList.remove(`${t.params.containerModifierClass}rtl`),t.el.dir="ltr"),t.update())}mount(e){const t=this;if(t.mounted)return!0;let i=e||t.params.el;if("string"==typeof i&&(i=document.querySelector(i)),!i)return!1;i.swiper=t,i.parentNode&&i.parentNode.host&&i.parentNode.host.nodeName===t.params.swiperElementNodeName.toUpperCase()&&(t.isElement=!0);const r=()=>`.${(t.params.wrapperClass||"").trim().split(" ").join(".")}`;let s=i&&i.shadowRoot&&i.shadowRoot.querySelector?i.shadowRoot.querySelector(r()):(0,n.e)(i,r())[0];return!s&&t.params.createElements&&(s=(0,n.c)("div",t.params.wrapperClass),i.append(s),(0,n.e)(i,`.${t.params.slideClass}`).forEach(e=>{s.append(e)})),Object.assign(t,{el:i,wrapperEl:s,slidesEl:t.isElement&&!i.parentNode.host.slideSlots?i.parentNode.host:s,hostEl:t.isElement?i.parentNode.host:i,mounted:!0,rtl:"rtl"===i.dir.toLowerCase()||"rtl"===(0,n.q)(i,"direction"),rtlTranslate:"horizontal"===t.params.direction&&("rtl"===i.dir.toLowerCase()||"rtl"===(0,n.q)(i,"direction")),wrongRTL:"-webkit-box"===(0,n.q)(s,"display")}),!0}init(e){const t=this;if(t.initialized)return t;if(!1===t.mount(e))return t;t.emit("beforeInit"),t.params.breakpoints&&t.setBreakpoint(),t.addClasses(),t.updateSize(),t.updateSlides(),t.params.watchOverflow&&t.checkOverflow(),t.params.grabCursor&&t.enabled&&t.setGrabCursor(),t.params.loop&&t.virtual&&t.params.virtual.enabled?t.slideTo(t.params.initialSlide+t.virtual.slidesBefore,0,t.params.runCallbacksOnInit,!1,!0):t.slideTo(t.params.initialSlide,0,t.params.runCallbacksOnInit,!1,!0),t.params.loop&&t.loopCreate(void 0,!0),t.attachEvents();const i=[...t.el.querySelectorAll('[loading="lazy"]')];return t.isElement&&i.push(...t.hostEl.querySelectorAll('[loading="lazy"]')),i.forEach(e=>{e.complete?w(t,e):e.addEventListener("load",e=>{w(t,e.target)})}),h(t),t.initialized=!0,h(t),t.emit("init"),t.emit("afterInit"),t}destroy(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0);const i=this,{params:r,el:s,wrapperEl:a,slides:o}=i;return void 0===i.params||i.destroyed||(i.emit("beforeDestroy"),i.initialized=!1,i.detachEvents(),r.loop&&i.loopDestroy(),t&&(i.removeClasses(),s&&"string"!=typeof s&&s.removeAttribute("style"),a&&a.removeAttribute("style"),o&&o.length&&o.forEach(e=>{e.classList.remove(r.slideVisibleClass,r.slideFullyVisibleClass,r.slideActiveClass,r.slideNextClass,r.slidePrevClass),e.removeAttribute("style"),e.removeAttribute("data-swiper-slide-index")})),i.emit("destroy"),Object.keys(i.eventsListeners).forEach(e=>{i.off(e)}),!1!==e&&(i.el&&"string"!=typeof i.el&&(i.el.swiper=null),(0,n.y)(i)),i.destroyed=!0),null}static extendDefaults(e){(0,n.x)(G,e)}static get extendedDefaults(){return G}static get defaults(){return I}static installModule(e){_.prototype.__modules__||(_.prototype.__modules__=[]);const t=_.prototype.__modules__;"function"==typeof e&&t.indexOf(e)<0&&t.push(e)}static use(e){return Array.isArray(e)?(e.forEach(e=>_.installModule(e)),_):(_.installModule(e),_)}}Object.keys(F).forEach(e=>{Object.keys(F[e]).forEach(t=>{_.prototype[t]=F[e][t]})}),_.use([function(e){let{swiper:t,on:i,emit:r}=e;const n=(0,s.a)();let a=null,o=null;const l=()=>{t&&!t.destroyed&&t.initialized&&(r("beforeResize"),r("resize"))},p=()=>{t&&!t.destroyed&&t.initialized&&r("orientationchange")};i("init",()=>{t.params.resizeObserver&&void 0!==n.ResizeObserver?t&&!t.destroyed&&t.initialized&&(a=new ResizeObserver(e=>{o=n.requestAnimationFrame(()=>{const{width:i,height:r}=t;let s=i,n=r;e.forEach(e=>{let{contentBoxSize:i,contentRect:r,target:a}=e;a&&a!==t.el||(s=r?r.width:(i[0]||i).inlineSize,n=r?r.height:(i[0]||i).blockSize)}),s===i&&n===r||l()})}),a.observe(t.el)):(n.addEventListener("resize",l),n.addEventListener("orientationchange",p))}),i("destroy",()=>{o&&n.cancelAnimationFrame(o),a&&a.unobserve&&t.el&&(a.unobserve(t.el),a=null),n.removeEventListener("resize",l),n.removeEventListener("orientationchange",p)})},function(e){let{swiper:t,extendParams:i,on:r,emit:a}=e;const o=[],l=(0,s.a)(),p=function(e,i){void 0===i&&(i={});const r=new(l.MutationObserver||l.WebkitMutationObserver)(e=>{if(t.__preventObserver__)return;if(1===e.length)return void a("observerUpdate",e[0]);const i=function(){a("observerUpdate",e[0])};l.requestAnimationFrame?l.requestAnimationFrame(i):l.setTimeout(i,0)});r.observe(e,{attributes:void 0===i.attributes||i.attributes,childList:t.isElement||(void 0===i.childList||i).childList,characterData:void 0===i.characterData||i.characterData}),o.push(r)};i({observer:!1,observeParents:!1,observeSlideChildren:!1}),r("init",()=>{if(t.params.observer){if(t.params.observeParents){const e=(0,n.b)(t.hostEl);for(let t=0;t<e.length;t+=1)p(e[t])}p(t.hostEl,{childList:t.params.observeSlideChildren}),p(t.wrapperEl,{attributes:!1})}}),r("destroy",()=>{o.forEach(e=>{e.disconnect()}),o.splice(0,o.length)})}]);const D=["eventsPrefix","injectStyles","injectStylesUrls","modules","init","_direction","oneWayMovement","swiperElementNodeName","touchEventsTarget","initialSlide","_speed","cssMode","updateOnWindowResize","resizeObserver","nested","focusableElements","_enabled","_width","_height","preventInteractionOnTransition","userAgent","url","_edgeSwipeDetection","_edgeSwipeThreshold","_freeMode","_autoHeight","setWrapperSize","virtualTranslate","_effect","breakpoints","breakpointsBase","_spaceBetween","_slidesPerView","maxBackfaceHiddenSlides","_grid","_slidesPerGroup","_slidesPerGroupSkip","_slidesPerGroupAuto","_centeredSlides","_centeredSlidesBounds","_slidesOffsetBefore","_slidesOffsetAfter","normalizeSlideIndex","_centerInsufficientSlides","_watchOverflow","roundLengths","touchRatio","touchAngle","simulateTouch","_shortSwipes","_longSwipes","longSwipesRatio","longSwipesMs","_followFinger","allowTouchMove","_threshold","touchMoveStopPropagation","touchStartPreventDefault","touchStartForcePreventDefault","touchReleaseOnEdges","uniqueNavElements","_resistance","_resistanceRatio","_watchSlidesProgress","_grabCursor","preventClicks","preventClicksPropagation","_slideToClickedSlide","_loop","loopAdditionalSlides","loopAddBlankSlides","loopPreventsSliding","_rewind","_allowSlidePrev","_allowSlideNext","_swipeHandler","_noSwiping","noSwipingClass","noSwipingSelector","passiveListeners","containerModifierClass","slideClass","slideActiveClass","slideVisibleClass","slideFullyVisibleClass","slideNextClass","slidePrevClass","slideBlankClass","wrapperClass","lazyPreloaderClass","lazyPreloadPrevNext","runCallbacksOnInit","observer","observeParents","observeSlideChildren","a11y","_autoplay","_controller","coverflowEffect","cubeEffect","fadeEffect","flipEffect","creativeEffect","cardsEffect","hashNavigation","history","keyboard","mousewheel","_navigation","_pagination","parallax","_scrollbar","_thumbs","virtual","zoom","control"];function N(e){return"object"==typeof e&&null!==e&&e.constructor&&"Object"===Object.prototype.toString.call(e).slice(8,-1)&&!e.__swiper__}function R(e,t){const i=["__proto__","constructor","prototype"];Object.keys(t).filter(e=>i.indexOf(e)<0).forEach(i=>{void 0===e[i]?e[i]=t[i]:N(t[i])&&N(e[i])&&Object.keys(t[i]).length>0?t[i].__swiper__?e[i]=t[i]:R(e[i],t[i]):e[i]=t[i]})}function Y(e){return void 0===e&&(e={}),e.navigation&&void 0===e.navigation.nextEl&&void 0===e.navigation.prevEl}function V(e){return void 0===e&&(e={}),e.pagination&&void 0===e.pagination.el}function $(e){return void 0===e&&(e={}),e.scrollbar&&void 0===e.scrollbar.el}function j(e){void 0===e&&(e="");const t=e.split(" ").map(e=>e.trim()).filter(e=>!!e),i=[];return t.forEach(e=>{i.indexOf(e)<0&&i.push(e)}),i.join(" ")}function H(e){return void 0===e&&(e=""),e?e.includes("swiper-wrapper")?e:`swiper-wrapper ${e}`:"swiper-wrapper"}function W(){return W=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var i=arguments[t];for(var r in i)Object.prototype.hasOwnProperty.call(i,r)&&(e[r]=i[r])}return e},W.apply(this,arguments)}function q(e){return e.type&&e.type.displayName&&e.type.displayName.includes("SwiperSlide")}function U(e){const t=[];return r.Children.toArray(e).forEach(e=>{q(e)?t.push(e):e.props&&e.props.children&&U(e.props.children).forEach(e=>t.push(e))}),t}function X(e){const t=[],i={"container-start":[],"container-end":[],"wrapper-start":[],"wrapper-end":[]};return r.Children.toArray(e).forEach(e=>{if(q(e))t.push(e);else if(e.props&&e.props.slot&&i[e.props.slot])i[e.props.slot].push(e);else if(e.props&&e.props.children){const r=U(e.props.children);r.length>0?r.forEach(e=>t.push(e)):i["container-end"].push(e)}else i["container-end"].push(e)}),{slides:t,slots:i}}function Q(e,t){return"undefined"==typeof window?(0,r.useEffect)(e,t):(0,r.useLayoutEffect)(e,t)}const Z=(0,r.createContext)(null),K=(0,r.createContext)(null),J=(0,r.forwardRef)(function(e,t){let{className:i,tag:s="div",wrapperTag:a="div",children:o,onSwiper:l,...p}=void 0===e?{}:e,d=!1;const[c,u]=(0,r.useState)("swiper"),[A,g]=(0,r.useState)(null),[w,m]=(0,r.useState)(!1),h=(0,r.useRef)(!1),f=(0,r.useRef)(null),v=(0,r.useRef)(null),b=(0,r.useRef)(null),C=(0,r.useRef)(null),E=(0,r.useRef)(null),y=(0,r.useRef)(null),x=(0,r.useRef)(null),S=(0,r.useRef)(null),{params:T,passedParams:M,rest:k,events:P}=function(e,t){void 0===e&&(e={}),void 0===t&&(t=!0);const i={on:{}},r={},s={};R(i,I),i._emitClasses=!0,i.init=!1;const n={},a=D.map(e=>e.replace(/_/,"")),o=Object.assign({},e);return Object.keys(o).forEach(o=>{void 0!==e[o]&&(a.indexOf(o)>=0?N(e[o])?(i[o]={},s[o]={},R(i[o],e[o]),R(s[o],e[o])):(i[o]=e[o],s[o]=e[o]):0===o.search(/on[A-Z]/)&&"function"==typeof e[o]?t?r[`${o[2].toLowerCase()}${o.substr(3)}`]=e[o]:i.on[`${o[2].toLowerCase()}${o.substr(3)}`]=e[o]:n[o]=e[o])}),["navigation","pagination","scrollbar"].forEach(e=>{!0===i[e]&&(i[e]={}),!1===i[e]&&delete i[e]}),{params:i,passedParams:s,rest:n,events:r}}(p),{slides:B,slots:z}=X(o),L=()=>{m(!w)};Object.assign(T.on,{_containerClasses(e,t){u(t)}});const O=()=>{Object.assign(T.on,P),d=!0;const e={...T};if(delete e.wrapperClass,v.current=new _(e),v.current.virtual&&v.current.params.virtual.enabled){v.current.virtual.slides=B;const e={cache:!1,slides:B,renderExternal:g,renderExternalUpdate:!1};R(v.current.params.virtual,e),R(v.current.originalParams.virtual,e)}};return f.current||O(),v.current&&v.current.on("_beforeBreakpoint",L),(0,r.useEffect)(()=>()=>{v.current&&v.current.off("_beforeBreakpoint",L)}),(0,r.useEffect)(()=>{!h.current&&v.current&&(v.current.emitSlidesClasses(),h.current=!0)}),Q(()=>{if(t&&(t.current=f.current),f.current)return v.current.destroyed&&O(),function(e,t){let{el:i,nextEl:r,prevEl:s,paginationEl:n,scrollbarEl:a,swiper:o}=e;Y(t)&&r&&s&&(o.params.navigation.nextEl=r,o.originalParams.navigation.nextEl=r,o.params.navigation.prevEl=s,o.originalParams.navigation.prevEl=s),V(t)&&n&&(o.params.pagination.el=n,o.originalParams.pagination.el=n),$(t)&&a&&(o.params.scrollbar.el=a,o.originalParams.scrollbar.el=a),o.init(i)}({el:f.current,nextEl:E.current,prevEl:y.current,paginationEl:x.current,scrollbarEl:S.current,swiper:v.current},T),l&&!v.current.destroyed&&l(v.current),()=>{v.current&&!v.current.destroyed&&v.current.destroy(!0,!1)}},[]),Q(()=>{!d&&P&&v.current&&Object.keys(P).forEach(e=>{v.current.on(e,P[e])});const e=function(e,t,i,r,s){const n=[];if(!t)return n;const a=e=>{n.indexOf(e)<0&&n.push(e)};if(i&&r){const e=r.map(s),t=i.map(s);e.join("")!==t.join("")&&a("children"),r.length!==i.length&&a("children")}return D.filter(e=>"_"===e[0]).map(e=>e.replace(/_/,"")).forEach(i=>{if(i in e&&i in t)if(N(e[i])&&N(t[i])){const r=Object.keys(e[i]),s=Object.keys(t[i]);r.length!==s.length?a(i):(r.forEach(r=>{e[i][r]!==t[i][r]&&a(i)}),s.forEach(r=>{e[i][r]!==t[i][r]&&a(i)}))}else e[i]!==t[i]&&a(i)}),n}(M,b.current,B,C.current,e=>e.key);return b.current=M,C.current=B,e.length&&v.current&&!v.current.destroyed&&function(e){let{swiper:t,slides:i,passedParams:r,changedParams:s,nextEl:a,prevEl:o,scrollbarEl:l,paginationEl:p}=e;const d=s.filter(e=>"children"!==e&&"direction"!==e&&"wrapperClass"!==e),{params:c,pagination:u,navigation:A,scrollbar:g,virtual:w,thumbs:m}=t;let h,f,v,b,C,E,y,x;s.includes("thumbs")&&r.thumbs&&r.thumbs.swiper&&!r.thumbs.swiper.destroyed&&c.thumbs&&(!c.thumbs.swiper||c.thumbs.swiper.destroyed)&&(h=!0),s.includes("controller")&&r.controller&&r.controller.control&&c.controller&&!c.controller.control&&(f=!0),s.includes("pagination")&&r.pagination&&(r.pagination.el||p)&&(c.pagination||!1===c.pagination)&&u&&!u.el&&(v=!0),s.includes("scrollbar")&&r.scrollbar&&(r.scrollbar.el||l)&&(c.scrollbar||!1===c.scrollbar)&&g&&!g.el&&(b=!0),s.includes("navigation")&&r.navigation&&(r.navigation.prevEl||o)&&(r.navigation.nextEl||a)&&(c.navigation||!1===c.navigation)&&A&&!A.prevEl&&!A.nextEl&&(C=!0);const S=e=>{t[e]&&(t[e].destroy(),"navigation"===e?(t.isElement&&(t[e].prevEl.remove(),t[e].nextEl.remove()),c[e].prevEl=void 0,c[e].nextEl=void 0,t[e].prevEl=void 0,t[e].nextEl=void 0):(t.isElement&&t[e].el.remove(),c[e].el=void 0,t[e].el=void 0))};s.includes("loop")&&t.isElement&&(c.loop&&!r.loop?E=!0:!c.loop&&r.loop?y=!0:x=!0),d.forEach(e=>{if(N(c[e])&&N(r[e]))Object.assign(c[e],r[e]),"navigation"!==e&&"pagination"!==e&&"scrollbar"!==e||!("enabled"in r[e])||r[e].enabled||S(e);else{const t=r[e];!0!==t&&!1!==t||"navigation"!==e&&"pagination"!==e&&"scrollbar"!==e?c[e]=r[e]:!1===t&&S(e)}}),d.includes("controller")&&!f&&t.controller&&t.controller.control&&c.controller&&c.controller.control&&(t.controller.control=c.controller.control),s.includes("children")&&i&&w&&c.virtual.enabled?(w.slides=i,w.update(!0)):s.includes("virtual")&&w&&c.virtual.enabled&&(i&&(w.slides=i),w.update(!0)),s.includes("children")&&i&&c.loop&&(x=!0),h&&m.init()&&m.update(!0),f&&(t.controller.control=c.controller.control),v&&(!t.isElement||p&&"string"!=typeof p||(p=document.createElement("div"),p.classList.add("swiper-pagination"),p.part.add("pagination"),t.el.appendChild(p)),p&&(c.pagination.el=p),u.init(),u.render(),u.update()),b&&(!t.isElement||l&&"string"!=typeof l||(l=document.createElement("div"),l.classList.add("swiper-scrollbar"),l.part.add("scrollbar"),t.el.appendChild(l)),l&&(c.scrollbar.el=l),g.init(),g.updateSize(),g.setTranslate()),C&&(t.isElement&&(a&&"string"!=typeof a||(a=document.createElement("div"),a.classList.add("swiper-button-next"),(0,n.s)(a,t.hostEl.constructor.nextButtonSvg),a.part.add("button-next"),t.el.appendChild(a)),o&&"string"!=typeof o||(o=document.createElement("div"),o.classList.add("swiper-button-prev"),(0,n.s)(o,t.hostEl.constructor.prevButtonSvg),o.part.add("button-prev"),t.el.appendChild(o))),a&&(c.navigation.nextEl=a),o&&(c.navigation.prevEl=o),A.init(),A.update()),s.includes("allowSlideNext")&&(t.allowSlideNext=r.allowSlideNext),s.includes("allowSlidePrev")&&(t.allowSlidePrev=r.allowSlidePrev),s.includes("direction")&&t.changeDirection(r.direction,!1),(E||x)&&t.loopDestroy(),(y||x)&&t.loopCreate(),t.update()}({swiper:v.current,slides:B,passedParams:M,changedParams:e,nextEl:E.current,prevEl:y.current,scrollbarEl:S.current,paginationEl:x.current}),()=>{P&&v.current&&Object.keys(P).forEach(e=>{v.current.off(e,P[e])})}}),Q(()=>{var e;!(e=v.current)||e.destroyed||!e.params.virtual||e.params.virtual&&!e.params.virtual.enabled||(e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),e.emit("_virtualUpdated"),e.parallax&&e.params.parallax&&e.params.parallax.enabled&&e.parallax.setTranslate())},[A]),r.createElement(s,W({ref:f,className:j(`${c}${i?` ${i}`:""}`)},k),r.createElement(K.Provider,{value:v.current},z["container-start"],r.createElement(a,{className:H(T.wrapperClass)},z["wrapper-start"],T.virtual?function(e,t,i){if(!i)return null;const s=e=>{let i=e;return e<0?i=t.length+e:i>=t.length&&(i-=t.length),i},n=e.isHorizontal()?{[e.rtlTranslate?"right":"left"]:`${i.offset}px`}:{top:`${i.offset}px`},{from:a,to:o}=i,l=e.params.loop?-t.length:0,p=e.params.loop?2*t.length:t.length,d=[];for(let e=l;e<p;e+=1)e>=a&&e<=o&&d.push(t[s(e)]);return d.map((t,i)=>r.cloneElement(t,{swiper:e,style:n,key:t.props.virtualIndex||t.key||`slide-${i}`}))}(v.current,B,A):B.map((e,t)=>r.cloneElement(e,{swiper:v.current,swiperSlideIndex:t})),z["wrapper-end"]),Y(T)&&r.createElement(r.Fragment,null,r.createElement("div",{ref:y,className:"swiper-button-prev"}),r.createElement("div",{ref:E,className:"swiper-button-next"})),$(T)&&r.createElement("div",{ref:S,className:"swiper-scrollbar"}),V(T)&&r.createElement("div",{ref:x,className:"swiper-pagination"}),z["container-end"]))});J.displayName="Swiper";const ee=(0,r.forwardRef)(function(e,t){let{tag:i="div",children:s,className:n="",swiper:a,zoom:o,lazy:l,virtualIndex:p,swiperSlideIndex:d,...c}=void 0===e?{}:e;const u=(0,r.useRef)(null),[A,g]=(0,r.useState)("swiper-slide"),[w,m]=(0,r.useState)(!1);function h(e,t,i){t===u.current&&g(i)}Q(()=>{if(void 0!==d&&(u.current.swiperSlideIndex=d),t&&(t.current=u.current),u.current&&a){if(!a.destroyed)return a.on("_slideClass",h),()=>{a&&a.off("_slideClass",h)};"swiper-slide"!==A&&g("swiper-slide")}}),Q(()=>{a&&u.current&&!a.destroyed&&g(a.getSlideClasses(u.current))},[a]);const f={isActive:A.indexOf("swiper-slide-active")>=0,isVisible:A.indexOf("swiper-slide-visible")>=0,isPrev:A.indexOf("swiper-slide-prev")>=0,isNext:A.indexOf("swiper-slide-next")>=0},v=()=>"function"==typeof s?s(f):s;return r.createElement(i,W({ref:u,className:j(`${A}${n?` ${n}`:""}`),"data-swiper-slide-index":p,onLoad:()=>{m(!0)}},c),o&&r.createElement(Z.Provider,{value:f},r.createElement("div",{className:"swiper-zoom-container","data-swiper-zoom":"number"==typeof o?o:void 0},v(),l&&!w&&r.createElement("div",{className:"swiper-lazy-preloader"}))),!o&&r.createElement(Z.Provider,{value:f},v(),l&&!w&&r.createElement("div",{className:"swiper-lazy-preloader"})))});ee.displayName="SwiperSlide"},375:(e,t,i)=>{function r(e){return null!==e&&"object"==typeof e&&"constructor"in e&&e.constructor===Object}function s(e,t){void 0===e&&(e={}),void 0===t&&(t={});const i=["__proto__","constructor","prototype"];Object.keys(t).filter(e=>i.indexOf(e)<0).forEach(i=>{void 0===e[i]?e[i]=t[i]:r(t[i])&&r(e[i])&&Object.keys(t[i]).length>0&&s(e[i],t[i])})}i.d(t,{a:()=>l,g:()=>a});const n={body:{},addEventListener(){},removeEventListener(){},activeElement:{blur(){},nodeName:""},querySelector:()=>null,querySelectorAll:()=>[],getElementById:()=>null,createEvent:()=>({initEvent(){}}),createElement:()=>({children:[],childNodes:[],style:{},setAttribute(){},getElementsByTagName:()=>[]}),createElementNS:()=>({}),importNode:()=>null,location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function a(){const e="undefined"!=typeof document?document:{};return s(e,n),e}const o={document:n,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState(){},pushState(){},go(){},back(){}},CustomEvent:function(){return this},addEventListener(){},removeEventListener(){},getComputedStyle:()=>({getPropertyValue:()=>""}),Image(){},Date(){},screen:{},setTimeout(){},clearTimeout(){},matchMedia:()=>({}),requestAnimationFrame:e=>"undefined"==typeof setTimeout?(e(),null):setTimeout(e,0),cancelAnimationFrame(e){"undefined"!=typeof setTimeout&&clearTimeout(e)}};function l(){const e="undefined"!=typeof window?window:{};return s(e,o),e}},502:(e,t,i)=>{i.d(t,{A:()=>u});var r=i(354),s=i.n(r),n=i(314),a=i.n(n),o=i(417),l=i.n(o),p=new URL(i(85),i.b),d=a()(s()),c=l()(p);d.push([e.id,`@font-face{font-family:"swiper-icons";src:url(${c});font-weight:400;font-style:normal}:root{--swiper-theme-color: #007aff}:host{position:relative;display:block;margin-left:auto;margin-right:auto;z-index:1}.swiper{margin-left:auto;margin-right:auto;position:relative;overflow:hidden;list-style:none;padding:0;z-index:1;display:block}.swiper-vertical>.swiper-wrapper{flex-direction:column}.swiper-wrapper{position:relative;width:100%;height:100%;z-index:1;display:flex;transition-property:transform;transition-timing-function:var(--swiper-wrapper-transition-timing-function, initial);box-sizing:content-box}.swiper-android .swiper-slide,.swiper-ios .swiper-slide,.swiper-wrapper{transform:translate3d(0px, 0, 0)}.swiper-horizontal{touch-action:pan-y}.swiper-vertical{touch-action:pan-x}.swiper-slide{flex-shrink:0;width:100%;height:100%;position:relative;transition-property:transform;display:block}.swiper-slide-invisible-blank{visibility:hidden}.swiper-autoheight,.swiper-autoheight .swiper-slide{height:auto}.swiper-autoheight .swiper-wrapper{align-items:flex-start;transition-property:transform,height}.swiper-backface-hidden .swiper-slide{transform:translateZ(0);-webkit-backface-visibility:hidden;backface-visibility:hidden}.swiper-3d.swiper-css-mode .swiper-wrapper{perspective:1200px}.swiper-3d .swiper-wrapper{transform-style:preserve-3d}.swiper-3d{perspective:1200px}.swiper-3d .swiper-slide,.swiper-3d .swiper-cube-shadow{transform-style:preserve-3d}.swiper-css-mode>.swiper-wrapper{overflow:auto;scrollbar-width:none;-ms-overflow-style:none}.swiper-css-mode>.swiper-wrapper::-webkit-scrollbar{display:none}.swiper-css-mode>.swiper-wrapper>.swiper-slide{scroll-snap-align:start start}.swiper-css-mode.swiper-horizontal>.swiper-wrapper{scroll-snap-type:x mandatory}.swiper-css-mode.swiper-vertical>.swiper-wrapper{scroll-snap-type:y mandatory}.swiper-css-mode.swiper-free-mode>.swiper-wrapper{scroll-snap-type:none}.swiper-css-mode.swiper-free-mode>.swiper-wrapper>.swiper-slide{scroll-snap-align:none}.swiper-css-mode.swiper-centered>.swiper-wrapper::before{content:"";flex-shrink:0;order:9999}.swiper-css-mode.swiper-centered>.swiper-wrapper>.swiper-slide{scroll-snap-align:center center;scroll-snap-stop:always}.swiper-css-mode.swiper-centered.swiper-horizontal>.swiper-wrapper>.swiper-slide:first-child{margin-inline-start:var(--swiper-centered-offset-before)}.swiper-css-mode.swiper-centered.swiper-horizontal>.swiper-wrapper::before{height:100%;min-height:1px;width:var(--swiper-centered-offset-after)}.swiper-css-mode.swiper-centered.swiper-vertical>.swiper-wrapper>.swiper-slide:first-child{margin-block-start:var(--swiper-centered-offset-before)}.swiper-css-mode.swiper-centered.swiper-vertical>.swiper-wrapper::before{width:100%;min-width:1px;height:var(--swiper-centered-offset-after)}.swiper-3d .swiper-slide-shadow,.swiper-3d .swiper-slide-shadow-left,.swiper-3d .swiper-slide-shadow-right,.swiper-3d .swiper-slide-shadow-top,.swiper-3d .swiper-slide-shadow-bottom,.swiper-3d .swiper-slide-shadow,.swiper-3d .swiper-slide-shadow-left,.swiper-3d .swiper-slide-shadow-right,.swiper-3d .swiper-slide-shadow-top,.swiper-3d .swiper-slide-shadow-bottom{position:absolute;left:0;top:0;width:100%;height:100%;pointer-events:none;z-index:10}.swiper-3d .swiper-slide-shadow{background:rgba(0, 0, 0, 0.15)}.swiper-3d .swiper-slide-shadow-left{background-image:linear-gradient(to left, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0))}.swiper-3d .swiper-slide-shadow-right{background-image:linear-gradient(to right, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0))}.swiper-3d .swiper-slide-shadow-top{background-image:linear-gradient(to top, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0))}.swiper-3d .swiper-slide-shadow-bottom{background-image:linear-gradient(to bottom, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0))}.swiper-lazy-preloader{width:42px;height:42px;position:absolute;left:50%;top:50%;margin-left:-21px;margin-top:-21px;z-index:10;transform-origin:50%;box-sizing:border-box;border:4px solid var(--swiper-preloader-color, var(--swiper-theme-color));border-radius:50%;border-top-color:transparent}.swiper:not(.swiper-watch-progress) .swiper-lazy-preloader,.swiper-watch-progress .swiper-slide-visible .swiper-lazy-preloader{animation:swiper-preloader-spin 1s infinite linear}.swiper-lazy-preloader-white{--swiper-preloader-color: #fff}.swiper-lazy-preloader-black{--swiper-preloader-color: #000}@keyframes swiper-preloader-spin{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}`,"",{version:3,sources:["webpack://./node_modules/swiper/swiper.css"],names:[],mappings:"AAaA,WACE,0BAAA,CACA,2CAAA,CACA,eAAA,CACA,iBAAA,CAGF,MACE,6BAAA,CAMF,MACE,iBAAA,CACA,aAAA,CACA,gBAAA,CACA,iBAAA,CACA,SAAA,CAEF,QACE,gBAAA,CACA,iBAAA,CACA,iBAAA,CACA,eAAA,CACA,eAAA,CACA,SAAA,CAEA,SAAA,CACA,aAAA,CAEF,iCACE,qBAAA,CAEF,gBACE,iBAAA,CACA,UAAA,CACA,WAAA,CACA,SAAA,CACA,YAAA,CACA,6BAAA,CACA,oFAAA,CACA,sBAAA,CAEF,wEAGE,gCAAA,CAEF,mBACE,kBAAA,CAEF,iBACE,kBAAA,CAEF,cACE,aAAA,CACA,UAAA,CACA,WAAA,CACA,iBAAA,CACA,6BAAA,CACA,aAAA,CAEF,8BACE,iBAAA,CAGF,oDAEE,WAAA,CAEF,mCACE,sBAAA,CACA,oCAAA,CAEF,sCACE,uBAAA,CACA,kCAAA,CACQ,0BAAA,CAGV,2CACE,kBAAA,CAEF,2BACE,2BAAA,CAEF,WACE,kBAAA,CAEF,wDAEE,2BAAA,CAGF,iCACE,aAAA,CACA,oBAAA,CAEA,uBAAA,CAGF,oDACE,YAAA,CAEF,+CACE,6BAAA,CAEF,mDACE,4BAAA,CAEF,iDACE,4BAAA,CAEF,kDACE,qBAAA,CAEF,gEACE,sBAAA,CAEF,yDACE,UAAA,CACA,aAAA,CACA,UAAA,CAEF,+DACE,+BAAA,CACA,uBAAA,CAEF,6FACE,wDAAA,CAEF,2EACE,WAAA,CACA,cAAA,CACA,yCAAA,CAEF,2FACE,uDAAA,CAEF,yEACE,UAAA,CACA,aAAA,CACA,0CAAA,CAIF,4WAUE,iBAAA,CACA,MAAA,CACA,KAAA,CACA,UAAA,CACA,WAAA,CACA,mBAAA,CACA,UAAA,CAEF,gCACE,8BAAA,CAEF,qCACE,+EAAA,CAEF,sCACE,gFAAA,CAEF,oCACE,8EAAA,CAEF,uCACE,iFAAA,CAEF,uBACE,UAAA,CACA,WAAA,CACA,iBAAA,CACA,QAAA,CACA,OAAA,CACA,iBAAA,CACA,gBAAA,CACA,UAAA,CACA,oBAAA,CACA,qBAAA,CACA,yEAAA,CACA,iBAAA,CACA,4BAAA,CAEF,+HAEE,kDAAA,CAEF,6BACE,8BAAA,CAEF,6BACE,8BAAA,CAEF,iCACE,GACE,sBAAA,CAEF,KACE,wBAAA,CAAA",sourcesContent:["/**\n * Swiper 11.2.10\n * Most modern mobile touch slider and framework with hardware accelerated transitions\n * https://swiperjs.com\n *\n * Copyright 2014-2025 Vladimir Kharlampidi\n *\n * Released under the MIT License\n *\n * Released on: June 28, 2025\n */\n\n/* FONT_START */\n@font-face {\n  font-family: 'swiper-icons';\n  src: url('data:application/font-woff;charset=utf-8;base64, d09GRgABAAAAAAZgABAAAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGRlRNAAAGRAAAABoAAAAci6qHkUdERUYAAAWgAAAAIwAAACQAYABXR1BPUwAABhQAAAAuAAAANuAY7+xHU1VCAAAFxAAAAFAAAABm2fPczU9TLzIAAAHcAAAASgAAAGBP9V5RY21hcAAAAkQAAACIAAABYt6F0cBjdnQgAAACzAAAAAQAAAAEABEBRGdhc3AAAAWYAAAACAAAAAj//wADZ2x5ZgAAAywAAADMAAAD2MHtryVoZWFkAAABbAAAADAAAAA2E2+eoWhoZWEAAAGcAAAAHwAAACQC9gDzaG10eAAAAigAAAAZAAAArgJkABFsb2NhAAAC0AAAAFoAAABaFQAUGG1heHAAAAG8AAAAHwAAACAAcABAbmFtZQAAA/gAAAE5AAACXvFdBwlwb3N0AAAFNAAAAGIAAACE5s74hXjaY2BkYGAAYpf5Hu/j+W2+MnAzMYDAzaX6QjD6/4//Bxj5GA8AuRwMYGkAPywL13jaY2BkYGA88P8Agx4j+/8fQDYfA1AEBWgDAIB2BOoAeNpjYGRgYNBh4GdgYgABEMnIABJzYNADCQAACWgAsQB42mNgYfzCOIGBlYGB0YcxjYGBwR1Kf2WQZGhhYGBiYGVmgAFGBiQQkOaawtDAoMBQxXjg/wEGPcYDDA4wNUA2CCgwsAAAO4EL6gAAeNpj2M0gyAACqxgGNWBkZ2D4/wMA+xkDdgAAAHjaY2BgYGaAYBkGRgYQiAHyGMF8FgYHIM3DwMHABGQrMOgyWDLEM1T9/w8UBfEMgLzE////P/5//f/V/xv+r4eaAAeMbAxwIUYmIMHEgKYAYjUcsDAwsLKxc3BycfPw8jEQA/gZBASFhEVExcQlJKWkZWTl5BUUlZRVVNXUNTQZBgMAAMR+E+gAEQFEAAAAKgAqACoANAA+AEgAUgBcAGYAcAB6AIQAjgCYAKIArAC2AMAAygDUAN4A6ADyAPwBBgEQARoBJAEuATgBQgFMAVYBYAFqAXQBfgGIAZIBnAGmAbIBzgHsAAB42u2NMQ6CUAyGW568x9AneYYgm4MJbhKFaExIOAVX8ApewSt4Bic4AfeAid3VOBixDxfPYEza5O+Xfi04YADggiUIULCuEJK8VhO4bSvpdnktHI5QCYtdi2sl8ZnXaHlqUrNKzdKcT8cjlq+rwZSvIVczNiezsfnP/uznmfPFBNODM2K7MTQ45YEAZqGP81AmGGcF3iPqOop0r1SPTaTbVkfUe4HXj97wYE+yNwWYxwWu4v1ugWHgo3S1XdZEVqWM7ET0cfnLGxWfkgR42o2PvWrDMBSFj/IHLaF0zKjRgdiVMwScNRAoWUoH78Y2icB/yIY09An6AH2Bdu/UB+yxopYshQiEvnvu0dURgDt8QeC8PDw7Fpji3fEA4z/PEJ6YOB5hKh4dj3EvXhxPqH/SKUY3rJ7srZ4FZnh1PMAtPhwP6fl2PMJMPDgeQ4rY8YT6Gzao0eAEA409DuggmTnFnOcSCiEiLMgxCiTI6Cq5DZUd3Qmp10vO0LaLTd2cjN4fOumlc7lUYbSQcZFkutRG7g6JKZKy0RmdLY680CDnEJ+UMkpFFe1RN7nxdVpXrC4aTtnaurOnYercZg2YVmLN/d/gczfEimrE/fs/bOuq29Zmn8tloORaXgZgGa78yO9/cnXm2BpaGvq25Dv9S4E9+5SIc9PqupJKhYFSSl47+Qcr1mYNAAAAeNptw0cKwkAAAMDZJA8Q7OUJvkLsPfZ6zFVERPy8qHh2YER+3i/BP83vIBLLySsoKimrqKqpa2hp6+jq6RsYGhmbmJqZSy0sraxtbO3sHRydnEMU4uR6yx7JJXveP7WrDycAAAAAAAH//wACeNpjYGRgYOABYhkgZgJCZgZNBkYGLQZtIJsFLMYAAAw3ALgAeNolizEKgDAQBCchRbC2sFER0YD6qVQiBCv/H9ezGI6Z5XBAw8CBK/m5iQQVauVbXLnOrMZv2oLdKFa8Pjuru2hJzGabmOSLzNMzvutpB3N42mNgZGBg4GKQYzBhYMxJLMlj4GBgAYow/P/PAJJhLM6sSoWKfWCAAwDAjgbRAAB42mNgYGBkAIIbCZo5IPrmUn0hGA0AO8EFTQAA');\n  font-weight: 400;\n  font-style: normal;\n}\n/* FONT_END */\n:root {\n  --swiper-theme-color: #007aff;\n  /*\n  --swiper-preloader-color: var(--swiper-theme-color);\n  --swiper-wrapper-transition-timing-function: initial;\n  */\n}\n:host {\n  position: relative;\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  z-index: 1;\n}\n.swiper {\n  margin-left: auto;\n  margin-right: auto;\n  position: relative;\n  overflow: hidden;\n  list-style: none;\n  padding: 0;\n  /* Fix of Webkit flickering */\n  z-index: 1;\n  display: block;\n}\n.swiper-vertical > .swiper-wrapper {\n  flex-direction: column;\n}\n.swiper-wrapper {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  z-index: 1;\n  display: flex;\n  transition-property: transform;\n  transition-timing-function: var(--swiper-wrapper-transition-timing-function, initial);\n  box-sizing: content-box;\n}\n.swiper-android .swiper-slide,\n.swiper-ios .swiper-slide,\n.swiper-wrapper {\n  transform: translate3d(0px, 0, 0);\n}\n.swiper-horizontal {\n  touch-action: pan-y;\n}\n.swiper-vertical {\n  touch-action: pan-x;\n}\n.swiper-slide {\n  flex-shrink: 0;\n  width: 100%;\n  height: 100%;\n  position: relative;\n  transition-property: transform;\n  display: block;\n}\n.swiper-slide-invisible-blank {\n  visibility: hidden;\n}\n/* Auto Height */\n.swiper-autoheight,\n.swiper-autoheight .swiper-slide {\n  height: auto;\n}\n.swiper-autoheight .swiper-wrapper {\n  align-items: flex-start;\n  transition-property: transform, height;\n}\n.swiper-backface-hidden .swiper-slide {\n  transform: translateZ(0);\n  -webkit-backface-visibility: hidden;\n          backface-visibility: hidden;\n}\n/* 3D Effects */\n.swiper-3d.swiper-css-mode .swiper-wrapper {\n  perspective: 1200px;\n}\n.swiper-3d .swiper-wrapper {\n  transform-style: preserve-3d;\n}\n.swiper-3d {\n  perspective: 1200px;\n}\n.swiper-3d .swiper-slide,\n.swiper-3d .swiper-cube-shadow {\n  transform-style: preserve-3d;\n}\n/* CSS Mode */\n.swiper-css-mode > .swiper-wrapper {\n  overflow: auto;\n  scrollbar-width: none;\n  /* For Firefox */\n  -ms-overflow-style: none;\n  /* For Internet Explorer and Edge */\n}\n.swiper-css-mode > .swiper-wrapper::-webkit-scrollbar {\n  display: none;\n}\n.swiper-css-mode > .swiper-wrapper > .swiper-slide {\n  scroll-snap-align: start start;\n}\n.swiper-css-mode.swiper-horizontal > .swiper-wrapper {\n  scroll-snap-type: x mandatory;\n}\n.swiper-css-mode.swiper-vertical > .swiper-wrapper {\n  scroll-snap-type: y mandatory;\n}\n.swiper-css-mode.swiper-free-mode > .swiper-wrapper {\n  scroll-snap-type: none;\n}\n.swiper-css-mode.swiper-free-mode > .swiper-wrapper > .swiper-slide {\n  scroll-snap-align: none;\n}\n.swiper-css-mode.swiper-centered > .swiper-wrapper::before {\n  content: '';\n  flex-shrink: 0;\n  order: 9999;\n}\n.swiper-css-mode.swiper-centered > .swiper-wrapper > .swiper-slide {\n  scroll-snap-align: center center;\n  scroll-snap-stop: always;\n}\n.swiper-css-mode.swiper-centered.swiper-horizontal > .swiper-wrapper > .swiper-slide:first-child {\n  margin-inline-start: var(--swiper-centered-offset-before);\n}\n.swiper-css-mode.swiper-centered.swiper-horizontal > .swiper-wrapper::before {\n  height: 100%;\n  min-height: 1px;\n  width: var(--swiper-centered-offset-after);\n}\n.swiper-css-mode.swiper-centered.swiper-vertical > .swiper-wrapper > .swiper-slide:first-child {\n  margin-block-start: var(--swiper-centered-offset-before);\n}\n.swiper-css-mode.swiper-centered.swiper-vertical > .swiper-wrapper::before {\n  width: 100%;\n  min-width: 1px;\n  height: var(--swiper-centered-offset-after);\n}\n/* Slide styles start */\n/* 3D Shadows */\n.swiper-3d .swiper-slide-shadow,\n.swiper-3d .swiper-slide-shadow-left,\n.swiper-3d .swiper-slide-shadow-right,\n.swiper-3d .swiper-slide-shadow-top,\n.swiper-3d .swiper-slide-shadow-bottom,\n.swiper-3d .swiper-slide-shadow,\n.swiper-3d .swiper-slide-shadow-left,\n.swiper-3d .swiper-slide-shadow-right,\n.swiper-3d .swiper-slide-shadow-top,\n.swiper-3d .swiper-slide-shadow-bottom {\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  z-index: 10;\n}\n.swiper-3d .swiper-slide-shadow {\n  background: rgba(0, 0, 0, 0.15);\n}\n.swiper-3d .swiper-slide-shadow-left {\n  background-image: linear-gradient(to left, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0));\n}\n.swiper-3d .swiper-slide-shadow-right {\n  background-image: linear-gradient(to right, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0));\n}\n.swiper-3d .swiper-slide-shadow-top {\n  background-image: linear-gradient(to top, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0));\n}\n.swiper-3d .swiper-slide-shadow-bottom {\n  background-image: linear-gradient(to bottom, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0));\n}\n.swiper-lazy-preloader {\n  width: 42px;\n  height: 42px;\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  margin-left: -21px;\n  margin-top: -21px;\n  z-index: 10;\n  transform-origin: 50%;\n  box-sizing: border-box;\n  border: 4px solid var(--swiper-preloader-color, var(--swiper-theme-color));\n  border-radius: 50%;\n  border-top-color: transparent;\n}\n.swiper:not(.swiper-watch-progress) .swiper-lazy-preloader,\n.swiper-watch-progress .swiper-slide-visible .swiper-lazy-preloader {\n  animation: swiper-preloader-spin 1s infinite linear;\n}\n.swiper-lazy-preloader-white {\n  --swiper-preloader-color: #fff;\n}\n.swiper-lazy-preloader-black {\n  --swiper-preloader-color: #000;\n}\n@keyframes swiper-preloader-spin {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n/* Slide styles end */\n"],sourceRoot:""}]);const u=d},669:(e,t,i)=>{var r=i(72),s=i.n(r),n=i(825),a=i.n(n),o=i(659),l=i.n(o),p=i(56),d=i.n(p),c=i(159),u=i.n(c),A=i(113),g=i.n(A),w=i(502),m={};m.styleTagTransform=g(),m.setAttributes=d(),m.insert=l().bind(null,"head"),m.domAPI=a(),m.insertStyleElement=u(),s()(w.A,m),w.A&&w.A.locals&&w.A.locals}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,