/*! For license information please see main.js.LICENSE.txt */
(()=>{var e,t,n={25:(e,t,n)=>{var r=n(354),a=n(314)(r);a.push([e.id,'.header__hNYtF{position:absolute;top:13.5%;left:50%;transform:translateX(-50%);font-size:12.5rem;font-family:"PT Sans Bold";display:flex;width:100%;max-width:60.8rem;justify-content:space-between;pointer-events:none;z-index:-1}.headerFirstYear__pHge9{color:#5d5fef}.headerLastYear__Gt4Ah{color:#ef5da8}@media(max-width: 1150px){.header__hNYtF{justify-content:center;gap:2rem;font-size:8.5rem;top:23.4%}}@media(max-width: 900px){.header__hNYtF{top:4rem;font-size:5rem}.headerFirstYear__pHge9{color:#3877ee}.headerLastYear__Gt4Ah{color:#f178b6}}@media(max-width: 550px){.header__hNYtF{font-size:4rem}}@media(max-width: 360px){.header__hNYtF{font-size:3.5rem}}',"",{version:3,sources:["webpack://./src/features/timePeriodControl/TimePeriodNavigate/ui/TimePeriodNavigate.module.scss"],names:[],mappings:"AAAA,eACE,iBAAA,CACA,SAAA,CACA,QAAA,CACA,0BAAA,CACA,iBAAA,CACA,0BAAA,CACA,YAAA,CACA,UAAA,CACA,iBAAA,CACA,6BAAA,CACA,mBAAA,CACA,UAAA,CAEF,wBACE,aAAA,CAEF,uBACE,aAAA,CAEF,0BACE,eACE,sBAAA,CACA,QAAA,CACA,gBAAA,CACA,SAAA,CAAA,CAGJ,yBACE,eACE,QAAA,CACA,cAAA,CAEF,wBACE,aAAA,CAEF,uBACE,aAAA,CAAA,CAGJ,yBACE,eACE,cAAA,CAAA,CAGJ,yBACE,eACE,gBAAA,CAAA",sourcesContent:['.header {\r\n  position: absolute;\r\n  top: 13.5%;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  font-size: 12.5rem;\r\n  font-family: "PT Sans Bold";\r\n  display: flex;\r\n  width: 100%;\r\n  max-width: 60.8rem;\r\n  justify-content: space-between;\r\n  pointer-events: none;\r\n  z-index: -1;\r\n}\r\n.headerFirstYear {\r\n  color: #5d5fef;\r\n}\r\n.headerLastYear {\r\n  color: #ef5da8;\r\n}\r\n@media (max-width: 1150px) {\r\n  .header {\r\n    justify-content: center;\r\n    gap: 2rem;\r\n    font-size: 8.5rem;\r\n    top: 23.4%;\r\n  }\r\n}\r\n@media (max-width: 900px) {\r\n  .header {\r\n    top: 4rem;\r\n    font-size: 5rem;\r\n  }\r\n  .headerFirstYear {\r\n    color: #3877ee;\r\n  }\r\n  .headerLastYear {\r\n    color: #f178b6;\r\n  }\r\n}\r\n@media (max-width: 550px) {\r\n  .header {\r\n    font-size: 4rem;\r\n  }\r\n}\r\n@media (max-width: 360px) {\r\n  .header {\r\n    font-size: 3.5rem;\r\n  }\r\n}\r\n'],sourceRoot:""}]),a.locals={header:"header__hNYtF",headerFirstYear:"headerFirstYear__pHge9",headerLastYear:"headerLastYear__Gt4Ah"},e.exports=a},56:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},72:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var i={},o=[],l=0;l<e.length;l++){var s=e[l],u=r.base?s[0]+r.base:s[0],c=i[u]||0,f="".concat(u," ").concat(c);i[u]=c+1;var d=n(f),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==d)t[d].references++,t[d].updater(p);else{var h=a(p,r);r.byIndex=l,t.splice(l,0,{identifier:f,updater:h,references:1})}o.push(f)}return o}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var i=r(e=e||[],a=a||{});return function(e){e=e||[];for(var o=0;o<i.length;o++){var l=n(i[o]);t[l].references--}for(var s=r(e,a),u=0;u<i.length;u++){var c=n(i[u]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}i=s}}},97:(e,t,n)=>{"use strict";n.d(t,{A:()=>l});var r=n(354),a=n.n(r),i=n(314),o=n.n(i)()(a());o.push([e.id,"html{font-size:16px}body{margin:0;background-color:#f5f5f5}","",{version:3,sources:["webpack://./src/app/App.scss"],names:[],mappings:"AAAA,KACE,cAAA,CAEF,KACE,QAAA,CACA,wBAAA",sourcesContent:["html {\r\n  font-size: 16px;\r\n}\r\nbody {\r\n  margin: 0;\r\n  background-color: #f5f5f5;\r\n}\r\n"],sourceRoot:""}]);const l=o},113:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},159:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},213:(e,t,n)=>{var r=n(354),a=n(314)(r);a.push([e.id,'.navigateTime__PpAvl{position:absolute;top:43.5rem;left:5rem}.navigateTimeButton__nS1lu{cursor:pointer;border-width:1px;border-color:rgba(66,86,122,.5);color:#42567a;width:3.125rem;height:3.125rem;border-radius:50%;font-size:1.5rem;font-family:"PT Sans";display:flex;justify-content:center;align-items:center;transition:all .3s ease}.navigateTimeButton__nS1lu:hover{background-color:#fff}.navigateTimeParagraph__yXTFA{font-family:"PT Sans";font-size:.875rem;color:#42567a}.navigateTimeButtonBlock__wshtM{display:flex;width:7.5rem;justify-content:space-between}.navigateTimeButton__nS1lu:disabled{opacity:.5;cursor:not-allowed}@media(max-width: 900px){.navigateTime__PpAvl{top:30.6rem}}@media(max-width: 600px){.navigateTime__PpAvl{left:1rem}.navigateTimeButton__nS1lu{width:1.56rem;height:1.56rem;font-size:1rem}.navigateTimeButtonBlock__wshtM{width:100%;justify-content:center;gap:.8rem}}',"",{version:3,sources:["webpack://./src/features/timePeriodControl/TimeControlButton/ui/TimeControlButton.module.scss"],names:[],mappings:"AAAA,qBACE,iBAAA,CACA,WAAA,CACA,SAAA,CAEF,2BACE,cAAA,CACA,gBAAA,CACA,+BAAA,CACA,aAAA,CACA,cAAA,CACA,eAAA,CACA,iBAAA,CACA,gBAAA,CACA,qBAAA,CACA,YAAA,CACA,sBAAA,CACA,kBAAA,CACA,uBAAA,CACA,iCACE,qBAAA,CAGJ,8BACE,qBAAA,CACA,iBAAA,CACA,aAAA,CAEF,gCACE,YAAA,CACA,YAAA,CACA,6BAAA,CAEF,oCACE,UAAA,CACA,kBAAA,CAEF,yBACE,qBACE,WAAA,CAAA,CAGJ,yBACE,qBACE,SAAA,CAEF,2BACE,aAAA,CACA,cAAA,CACA,cAAA,CAEF,gCACE,UAAA,CACA,sBAAA,CACA,SAAA,CAAA",sourcesContent:['.navigateTime {\r\n  position: absolute;\r\n  top: 43.5rem;\r\n  left: 5rem;\r\n}\r\n.navigateTimeButton {\r\n  cursor: pointer;\r\n  border-width: 1px;\r\n  border-color: rgba(66, 86, 122, 0.5);\r\n  color: #42567a;\r\n  width: 3.125rem;\r\n  height: 3.125rem;\r\n  border-radius: 50%;\r\n  font-size: 1.5rem;\r\n  font-family: "PT Sans";\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  transition: all 0.3s ease;\r\n  &:hover {\r\n    background-color: #fff;\r\n  }\r\n}\r\n.navigateTimeParagraph {\r\n  font-family: "PT Sans";\r\n  font-size: 0.875rem;\r\n  color: #42567a;\r\n}\r\n.navigateTimeButtonBlock {\r\n  display: flex;\r\n  width: 7.5rem;\r\n  justify-content: space-between;\r\n}\r\n.navigateTimeButton:disabled {\r\n  opacity: 0.5;\r\n  cursor: not-allowed;\r\n}\r\n@media (max-width: 900px) {\r\n  .navigateTime {\r\n    top: 30.6rem;\r\n  }\r\n}\r\n@media (max-width: 600px) {\r\n  .navigateTime {\r\n    left: 1rem;\r\n  }\r\n  .navigateTimeButton {\r\n    width: 1.56rem;\r\n    height: 1.56rem;\r\n    font-size: 1rem;\r\n  }\r\n  .navigateTimeButtonBlock {\r\n    width: 100%;\r\n    justify-content: center;\r\n    gap: 0.8rem;\r\n  }\r\n}\r\n'],sourceRoot:""}]),a.locals={navigateTime:"navigateTime__PpAvl",navigateTimeButton:"navigateTimeButton__nS1lu",navigateTimeParagraph:"navigateTimeParagraph__yXTFA",navigateTimeButtonBlock:"navigateTimeButtonBlock__wshtM"},e.exports=a},221:(e,t,n)=>{"use strict";var r=n(540);function a(e){var t="https://react.dev/errors/"+e;if(1<arguments.length){t+="?args[]="+encodeURIComponent(arguments[1]);for(var n=2;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n])}return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function i(){}var o={d:{f:i,r:function(){throw Error(a(522))},D:i,C:i,L:i,m:i,X:i,S:i,M:i},p:0,findDOMNode:null},l=Symbol.for("react.portal"),s=r.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;function u(e,t){return"font"===e?"":"string"==typeof t?"use-credentials"===t?t:"":void 0}t.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=o,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!t||1!==t.nodeType&&9!==t.nodeType&&11!==t.nodeType)throw Error(a(299));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:l,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.flushSync=function(e){var t=s.T,n=o.p;try{if(s.T=null,o.p=2,e)return e()}finally{s.T=t,o.p=n,o.d.f()}},t.preconnect=function(e,t){"string"==typeof e&&(t=t?"string"==typeof(t=t.crossOrigin)?"use-credentials"===t?t:"":void 0:null,o.d.C(e,t))},t.prefetchDNS=function(e){"string"==typeof e&&o.d.D(e)},t.preinit=function(e,t){if("string"==typeof e&&t&&"string"==typeof t.as){var n=t.as,r=u(n,t.crossOrigin),a="string"==typeof t.integrity?t.integrity:void 0,i="string"==typeof t.fetchPriority?t.fetchPriority:void 0;"style"===n?o.d.S(e,"string"==typeof t.precedence?t.precedence:void 0,{crossOrigin:r,integrity:a,fetchPriority:i}):"script"===n&&o.d.X(e,{crossOrigin:r,integrity:a,fetchPriority:i,nonce:"string"==typeof t.nonce?t.nonce:void 0})}},t.preinitModule=function(e,t){if("string"==typeof e)if("object"==typeof t&&null!==t){if(null==t.as||"script"===t.as){var n=u(t.as,t.crossOrigin);o.d.M(e,{crossOrigin:n,integrity:"string"==typeof t.integrity?t.integrity:void 0,nonce:"string"==typeof t.nonce?t.nonce:void 0})}}else null==t&&o.d.M(e)},t.preload=function(e,t){if("string"==typeof e&&"object"==typeof t&&null!==t&&"string"==typeof t.as){var n=t.as,r=u(n,t.crossOrigin);o.d.L(e,n,{crossOrigin:r,integrity:"string"==typeof t.integrity?t.integrity:void 0,nonce:"string"==typeof t.nonce?t.nonce:void 0,type:"string"==typeof t.type?t.type:void 0,fetchPriority:"string"==typeof t.fetchPriority?t.fetchPriority:void 0,referrerPolicy:"string"==typeof t.referrerPolicy?t.referrerPolicy:void 0,imageSrcSet:"string"==typeof t.imageSrcSet?t.imageSrcSet:void 0,imageSizes:"string"==typeof t.imageSizes?t.imageSizes:void 0,media:"string"==typeof t.media?t.media:void 0})}},t.preloadModule=function(e,t){if("string"==typeof e)if(t){var n=u(t.as,t.crossOrigin);o.d.m(e,{as:"string"==typeof t.as&&"script"!==t.as?t.as:void 0,crossOrigin:n,integrity:"string"==typeof t.integrity?t.integrity:void 0})}else o.d.m(e)},t.requestFormReset=function(e){o.d.r(e)},t.unstable_batchedUpdates=function(e,t){return e(t)},t.useFormState=function(e,t,n){return s.H.useFormState(e,t,n)},t.useFormStatus=function(){return s.H.useHostTransitionStatus()},t.version="19.1.1"},247:(e,t,n)=>{"use strict";var r=n(982),a=n(540),i=n(961);function o(e){var t="https://react.dev/errors/"+e;if(1<arguments.length){t+="?args[]="+encodeURIComponent(arguments[1]);for(var n=2;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n])}return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function l(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function s(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{!!(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function u(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function c(e){if(s(e)!==e)throw Error(o(188))}function f(e){var t=e.tag;if(5===t||26===t||27===t||6===t)return e;for(e=e.child;null!==e;){if(null!==(t=f(e)))return t;e=e.sibling}return null}var d=Object.assign,p=Symbol.for("react.element"),h=Symbol.for("react.transitional.element"),m=Symbol.for("react.portal"),g=Symbol.for("react.fragment"),v=Symbol.for("react.strict_mode"),y=Symbol.for("react.profiler"),b=Symbol.for("react.provider"),A=Symbol.for("react.consumer"),_=Symbol.for("react.context"),w=Symbol.for("react.forward_ref"),k=Symbol.for("react.suspense"),C=Symbol.for("react.suspense_list"),S=Symbol.for("react.memo"),x=Symbol.for("react.lazy");Symbol.for("react.scope");var E=Symbol.for("react.activity");Symbol.for("react.legacy_hidden"),Symbol.for("react.tracing_marker");var T=Symbol.for("react.memo_cache_sentinel");Symbol.for("react.view_transition");var P=Symbol.iterator;function z(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=P&&e[P]||e["@@iterator"])?e:null}var N=Symbol.for("react.client.reference");function O(e){if(null==e)return null;if("function"==typeof e)return e.$$typeof===N?null:e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case g:return"Fragment";case y:return"Profiler";case v:return"StrictMode";case k:return"Suspense";case C:return"SuspenseList";case E:return"Activity"}if("object"==typeof e)switch(e.$$typeof){case m:return"Portal";case _:return(e.displayName||"Context")+".Provider";case A:return(e._context.displayName||"Context")+".Consumer";case w:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case S:return null!==(t=e.displayName||null)?t:O(e.type)||"Memo";case x:t=e._payload,e=e._init;try{return O(e(t))}catch(e){}}return null}var M=Array.isArray,L=a.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,F=i.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,R={pending:!1,data:null,method:null,action:null},D=[],B=-1;function I(e){return{current:e}}function j(e){0>B||(e.current=D[B],D[B]=null,B--)}function U(e,t){B++,D[B]=e.current,e.current=t}var H=I(null),q=I(null),$=I(null),Y=I(null);function V(e,t){switch(U($,t),U(q,e),U(H,null),t.nodeType){case 9:case 11:e=(e=t.documentElement)&&(e=e.namespaceURI)?af(e):0;break;default:if(e=t.tagName,t=t.namespaceURI)e=of(t=af(t),e);else switch(e){case"svg":e=1;break;case"math":e=2;break;default:e=0}}j(H),U(H,e)}function Q(){j(H),j(q),j($)}function W(e){null!==e.memoizedState&&U(Y,e);var t=H.current,n=of(t,e.type);t!==n&&(U(q,e),U(H,n))}function X(e){q.current===e&&(j(H),j(q)),Y.current===e&&(j(Y),Xf._currentValue=R)}var G=Object.prototype.hasOwnProperty,K=r.unstable_scheduleCallback,J=r.unstable_cancelCallback,Z=r.unstable_shouldYield,ee=r.unstable_requestPaint,te=r.unstable_now,ne=r.unstable_getCurrentPriorityLevel,re=r.unstable_ImmediatePriority,ae=r.unstable_UserBlockingPriority,ie=r.unstable_NormalPriority,oe=r.unstable_LowPriority,le=r.unstable_IdlePriority,se=r.log,ue=r.unstable_setDisableYieldValue,ce=null,fe=null;function de(e){if("function"==typeof se&&ue(e),fe&&"function"==typeof fe.setStrictMode)try{fe.setStrictMode(ce,e)}catch(e){}}var pe=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(he(e)/me|0)|0},he=Math.log,me=Math.LN2,ge=256,ve=4194304;function ye(e){var t=42&e;if(0!==t)return t;switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:return 64;case 128:return 128;case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194048&e;case 4194304:case 8388608:case 16777216:case 33554432:return 62914560&e;case 67108864:return 67108864;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 0;default:return e}}function be(e,t,n){var r=e.pendingLanes;if(0===r)return 0;var a=0,i=e.suspendedLanes,o=e.pingedLanes;e=e.warmLanes;var l=134217727&r;return 0!==l?0!==(r=l&~i)?a=ye(r):0!==(o&=l)?a=ye(o):n||0!==(n=l&~e)&&(a=ye(n)):0!==(l=r&~i)?a=ye(l):0!==o?a=ye(o):n||0!==(n=r&~e)&&(a=ye(n)),0===a?0:0!==t&&t!==a&&0===(t&i)&&((i=a&-a)>=(n=t&-t)||32===i&&4194048&n)?t:a}function Ae(e,t){return 0===(e.pendingLanes&~(e.suspendedLanes&~e.pingedLanes)&t)}function _e(e,t){switch(e){case 1:case 2:case 4:case 8:case 64:return t+250;case 16:case 32:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function we(){var e=ge;return!(4194048&(ge<<=1))&&(ge=256),e}function ke(){var e=ve;return!(62914560&(ve<<=1))&&(ve=4194304),e}function Ce(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Se(e,t){e.pendingLanes|=t,268435456!==t&&(e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0)}function xe(e,t,n){e.pendingLanes|=t,e.suspendedLanes&=~t;var r=31-pe(t);e.entangledLanes|=t,e.entanglements[r]=1073741824|e.entanglements[r]|4194090&n}function Ee(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-pe(n),a=1<<r;a&t|e[r]&t&&(e[r]|=t),n&=~a}}function Te(e){switch(e){case 2:e=1;break;case 8:e=4;break;case 32:e=16;break;case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:e=128;break;case 268435456:e=134217728;break;default:e=0}return e}function Pe(e){return 2<(e&=-e)?8<e?134217727&e?32:268435456:8:2}function ze(){var e=F.p;return 0!==e?e:void 0===(e=window.event)?32:cd(e.type)}var Ne=Math.random().toString(36).slice(2),Oe="__reactFiber$"+Ne,Me="__reactProps$"+Ne,Le="__reactContainer$"+Ne,Fe="__reactEvents$"+Ne,Re="__reactListeners$"+Ne,De="__reactHandles$"+Ne,Be="__reactResources$"+Ne,Ie="__reactMarker$"+Ne;function je(e){delete e[Oe],delete e[Me],delete e[Fe],delete e[Re],delete e[De]}function Ue(e){var t=e[Oe];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Le]||n[Oe]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Af(e);null!==e;){if(n=e[Oe])return n;e=Af(e)}return t}n=(e=n).parentNode}return null}function He(e){if(e=e[Oe]||e[Le]){var t=e.tag;if(5===t||6===t||13===t||26===t||27===t||3===t)return e}return null}function qe(e){var t=e.tag;if(5===t||26===t||27===t||6===t)return e.stateNode;throw Error(o(33))}function $e(e){var t=e[Be];return t||(t=e[Be]={hoistableStyles:new Map,hoistableScripts:new Map}),t}function Ye(e){e[Ie]=!0}var Ve=new Set,Qe={};function We(e,t){Xe(e,t),Xe(e+"Capture",t)}function Xe(e,t){for(Qe[e]=t,e=0;e<t.length;e++)Ve.add(t[e])}var Ge,Ke,Je=RegExp("^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"),Ze={},et={};function tt(e,t,n){if(a=t,G.call(et,a)||!G.call(Ze,a)&&(Je.test(a)?et[a]=!0:(Ze[a]=!0,0)))if(null===n)e.removeAttribute(t);else{switch(typeof n){case"undefined":case"function":case"symbol":return void e.removeAttribute(t);case"boolean":var r=t.toLowerCase().slice(0,5);if("data-"!==r&&"aria-"!==r)return void e.removeAttribute(t)}e.setAttribute(t,""+n)}var a}function nt(e,t,n){if(null===n)e.removeAttribute(t);else{switch(typeof n){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(t)}e.setAttribute(t,""+n)}}function rt(e,t,n,r){if(null===r)e.removeAttribute(n);else{switch(typeof r){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(n)}e.setAttributeNS(t,n,""+r)}}function at(e){if(void 0===Ge)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);Ge=t&&t[1]||"",Ke=-1<e.stack.indexOf("\n    at")?" (<anonymous>)":-1<e.stack.indexOf("@")?"@unknown:0:0":""}return"\n"+Ge+e+Ke}var it=!1;function ot(e,t){if(!e||it)return"";it=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{var r={DetermineComponentFrameRoot:function(){try{if(t){var n=function(){throw Error()};if(Object.defineProperty(n.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(n,[])}catch(e){var r=e}Reflect.construct(e,[],n)}else{try{n.call()}catch(e){r=e}e.call(n.prototype)}}else{try{throw Error()}catch(e){r=e}(n=e())&&"function"==typeof n.catch&&n.catch(function(){})}}catch(e){if(e&&r&&"string"==typeof e.stack)return[e.stack,r.stack]}return[null,null]}};r.DetermineComponentFrameRoot.displayName="DetermineComponentFrameRoot";var a=Object.getOwnPropertyDescriptor(r.DetermineComponentFrameRoot,"name");a&&a.configurable&&Object.defineProperty(r.DetermineComponentFrameRoot,"name",{value:"DetermineComponentFrameRoot"});var i=r.DetermineComponentFrameRoot(),o=i[0],l=i[1];if(o&&l){var s=o.split("\n"),u=l.split("\n");for(a=r=0;r<s.length&&!s[r].includes("DetermineComponentFrameRoot");)r++;for(;a<u.length&&!u[a].includes("DetermineComponentFrameRoot");)a++;if(r===s.length||a===u.length)for(r=s.length-1,a=u.length-1;1<=r&&0<=a&&s[r]!==u[a];)a--;for(;1<=r&&0<=a;r--,a--)if(s[r]!==u[a]){if(1!==r||1!==a)do{if(r--,0>--a||s[r]!==u[a]){var c="\n"+s[r].replace(" at new "," at ");return e.displayName&&c.includes("<anonymous>")&&(c=c.replace("<anonymous>",e.displayName)),c}}while(1<=r&&0<=a);break}}}finally{it=!1,Error.prepareStackTrace=n}return(n=e?e.displayName||e.name:"")?at(n):""}function lt(e){switch(e.tag){case 26:case 27:case 5:return at(e.type);case 16:return at("Lazy");case 13:return at("Suspense");case 19:return at("SuspenseList");case 0:case 15:return ot(e.type,!1);case 11:return ot(e.type.render,!1);case 1:return ot(e.type,!0);case 31:return at("Activity");default:return""}}function st(e){try{var t="";do{t+=lt(e),e=e.return}while(e);return t}catch(e){return"\nError generating stack: "+e.message+"\n"+e.stack}}function ut(e){switch(typeof e){case"bigint":case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function ct(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function ft(e){e._valueTracker||(e._valueTracker=function(e){var t=ct(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function dt(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=ct(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function pt(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}var ht=/[\n"\\]/g;function mt(e){return e.replace(ht,function(e){return"\\"+e.charCodeAt(0).toString(16)+" "})}function gt(e,t,n,r,a,i,o,l){e.name="",null!=o&&"function"!=typeof o&&"symbol"!=typeof o&&"boolean"!=typeof o?e.type=o:e.removeAttribute("type"),null!=t?"number"===o?(0===t&&""===e.value||e.value!=t)&&(e.value=""+ut(t)):e.value!==""+ut(t)&&(e.value=""+ut(t)):"submit"!==o&&"reset"!==o||e.removeAttribute("value"),null!=t?yt(e,o,ut(t)):null!=n?yt(e,o,ut(n)):null!=r&&e.removeAttribute("value"),null==a&&null!=i&&(e.defaultChecked=!!i),null!=a&&(e.checked=a&&"function"!=typeof a&&"symbol"!=typeof a),null!=l&&"function"!=typeof l&&"symbol"!=typeof l&&"boolean"!=typeof l?e.name=""+ut(l):e.removeAttribute("name")}function vt(e,t,n,r,a,i,o,l){if(null!=i&&"function"!=typeof i&&"symbol"!=typeof i&&"boolean"!=typeof i&&(e.type=i),null!=t||null!=n){if(("submit"===i||"reset"===i)&&null==t)return;n=null!=n?""+ut(n):"",t=null!=t?""+ut(t):n,l||t===e.value||(e.value=t),e.defaultValue=t}r="function"!=typeof(r=null!=r?r:a)&&"symbol"!=typeof r&&!!r,e.checked=l?e.checked:!!r,e.defaultChecked=!!r,null!=o&&"function"!=typeof o&&"symbol"!=typeof o&&"boolean"!=typeof o&&(e.name=o)}function yt(e,t,n){"number"===t&&pt(e.ownerDocument)===e||e.defaultValue===""+n||(e.defaultValue=""+n)}function bt(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+ut(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function At(e,t,n){null==t||((t=""+ut(t))!==e.value&&(e.value=t),null!=n)?e.defaultValue=null!=n?""+ut(n):"":e.defaultValue!==t&&(e.defaultValue=t)}function _t(e,t,n,r){if(null==t){if(null!=r){if(null!=n)throw Error(o(92));if(M(r)){if(1<r.length)throw Error(o(93));r=r[0]}n=r}null==n&&(n=""),t=n}n=ut(t),e.defaultValue=n,(r=e.textContent)===n&&""!==r&&null!==r&&(e.value=r)}function wt(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var kt=new Set("animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(" "));function Ct(e,t,n){var r=0===t.indexOf("--");null==n||"boolean"==typeof n||""===n?r?e.setProperty(t,""):"float"===t?e.cssFloat="":e[t]="":r?e.setProperty(t,n):"number"!=typeof n||0===n||kt.has(t)?"float"===t?e.cssFloat=n:e[t]=(""+n).trim():e[t]=n+"px"}function St(e,t,n){if(null!=t&&"object"!=typeof t)throw Error(o(62));if(e=e.style,null!=n){for(var r in n)!n.hasOwnProperty(r)||null!=t&&t.hasOwnProperty(r)||(0===r.indexOf("--")?e.setProperty(r,""):"float"===r?e.cssFloat="":e[r]="");for(var a in t)r=t[a],t.hasOwnProperty(a)&&n[a]!==r&&Ct(e,a,r)}else for(var i in t)t.hasOwnProperty(i)&&Ct(e,i,t[i])}function xt(e){if(-1===e.indexOf("-"))return!1;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Et=new Map([["acceptCharset","accept-charset"],["htmlFor","for"],["httpEquiv","http-equiv"],["crossOrigin","crossorigin"],["accentHeight","accent-height"],["alignmentBaseline","alignment-baseline"],["arabicForm","arabic-form"],["baselineShift","baseline-shift"],["capHeight","cap-height"],["clipPath","clip-path"],["clipRule","clip-rule"],["colorInterpolation","color-interpolation"],["colorInterpolationFilters","color-interpolation-filters"],["colorProfile","color-profile"],["colorRendering","color-rendering"],["dominantBaseline","dominant-baseline"],["enableBackground","enable-background"],["fillOpacity","fill-opacity"],["fillRule","fill-rule"],["floodColor","flood-color"],["floodOpacity","flood-opacity"],["fontFamily","font-family"],["fontSize","font-size"],["fontSizeAdjust","font-size-adjust"],["fontStretch","font-stretch"],["fontStyle","font-style"],["fontVariant","font-variant"],["fontWeight","font-weight"],["glyphName","glyph-name"],["glyphOrientationHorizontal","glyph-orientation-horizontal"],["glyphOrientationVertical","glyph-orientation-vertical"],["horizAdvX","horiz-adv-x"],["horizOriginX","horiz-origin-x"],["imageRendering","image-rendering"],["letterSpacing","letter-spacing"],["lightingColor","lighting-color"],["markerEnd","marker-end"],["markerMid","marker-mid"],["markerStart","marker-start"],["overlinePosition","overline-position"],["overlineThickness","overline-thickness"],["paintOrder","paint-order"],["panose-1","panose-1"],["pointerEvents","pointer-events"],["renderingIntent","rendering-intent"],["shapeRendering","shape-rendering"],["stopColor","stop-color"],["stopOpacity","stop-opacity"],["strikethroughPosition","strikethrough-position"],["strikethroughThickness","strikethrough-thickness"],["strokeDasharray","stroke-dasharray"],["strokeDashoffset","stroke-dashoffset"],["strokeLinecap","stroke-linecap"],["strokeLinejoin","stroke-linejoin"],["strokeMiterlimit","stroke-miterlimit"],["strokeOpacity","stroke-opacity"],["strokeWidth","stroke-width"],["textAnchor","text-anchor"],["textDecoration","text-decoration"],["textRendering","text-rendering"],["transformOrigin","transform-origin"],["underlinePosition","underline-position"],["underlineThickness","underline-thickness"],["unicodeBidi","unicode-bidi"],["unicodeRange","unicode-range"],["unitsPerEm","units-per-em"],["vAlphabetic","v-alphabetic"],["vHanging","v-hanging"],["vIdeographic","v-ideographic"],["vMathematical","v-mathematical"],["vectorEffect","vector-effect"],["vertAdvY","vert-adv-y"],["vertOriginX","vert-origin-x"],["vertOriginY","vert-origin-y"],["wordSpacing","word-spacing"],["writingMode","writing-mode"],["xmlnsXlink","xmlns:xlink"],["xHeight","x-height"]]),Tt=/^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i;function Pt(e){return Tt.test(""+e)?"javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')":e}var zt=null;function Nt(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ot=null,Mt=null;function Lt(e){var t=He(e);if(t&&(e=t.stateNode)){var n=e[Me]||null;e:switch(e=t.stateNode,t.type){case"input":if(gt(e,n.value,n.defaultValue,n.defaultValue,n.checked,n.defaultChecked,n.type,n.name),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll('input[name="'+mt(""+t)+'"][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=r[Me]||null;if(!a)throw Error(o(90));gt(r,a.value,a.defaultValue,a.defaultValue,a.checked,a.defaultChecked,a.type,a.name)}}for(t=0;t<n.length;t++)(r=n[t]).form===e.form&&dt(r)}break e;case"textarea":At(e,n.value,n.defaultValue);break e;case"select":null!=(t=n.value)&&bt(e,!!n.multiple,t,!1)}}}var Ft=!1;function Rt(e,t,n){if(Ft)return e(t,n);Ft=!0;try{return e(t)}finally{if(Ft=!1,(null!==Ot||null!==Mt)&&(Uu(),Ot&&(t=Ot,e=Mt,Mt=Ot=null,Lt(t),e)))for(t=0;t<e.length;t++)Lt(e[t])}}function Dt(e,t){var n=e.stateNode;if(null===n)return null;var r=n[Me]||null;if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(o(231,t,typeof n));return n}var Bt=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),It=!1;if(Bt)try{var jt={};Object.defineProperty(jt,"passive",{get:function(){It=!0}}),window.addEventListener("test",jt,jt),window.removeEventListener("test",jt,jt)}catch(e){It=!1}var Ut=null,Ht=null,qt=null;function $t(){if(qt)return qt;var e,t,n=Ht,r=n.length,a="value"in Ut?Ut.value:Ut.textContent,i=a.length;for(e=0;e<r&&n[e]===a[e];e++);var o=r-e;for(t=1;t<=o&&n[r-t]===a[i-t];t++);return qt=a.slice(e,1<t?1-t:void 0)}function Yt(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function Vt(){return!0}function Qt(){return!1}function Wt(e){function t(t,n,r,a,i){for(var o in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=a,this.target=i,this.currentTarget=null,e)e.hasOwnProperty(o)&&(t=e[o],this[o]=t?t(a):a[o]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?Vt:Qt,this.isPropagationStopped=Qt,this}return d(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Vt)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Vt)},persist:function(){},isPersistent:Vt}),t}var Xt,Gt,Kt,Jt={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},Zt=Wt(Jt),en=d({},Jt,{view:0,detail:0}),tn=Wt(en),nn=d({},en,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:hn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==Kt&&(Kt&&"mousemove"===e.type?(Xt=e.screenX-Kt.screenX,Gt=e.screenY-Kt.screenY):Gt=Xt=0,Kt=e),Xt)},movementY:function(e){return"movementY"in e?e.movementY:Gt}}),rn=Wt(nn),an=Wt(d({},nn,{dataTransfer:0})),on=Wt(d({},en,{relatedTarget:0})),ln=Wt(d({},Jt,{animationName:0,elapsedTime:0,pseudoElement:0})),sn=Wt(d({},Jt,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),un=Wt(d({},Jt,{data:0})),cn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},fn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},dn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function pn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=dn[e])&&!!t[e]}function hn(){return pn}var mn=Wt(d({},en,{key:function(e){if(e.key){var t=cn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Yt(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?fn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:hn,charCode:function(e){return"keypress"===e.type?Yt(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Yt(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),gn=Wt(d({},nn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),vn=Wt(d({},en,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:hn})),yn=Wt(d({},Jt,{propertyName:0,elapsedTime:0,pseudoElement:0})),bn=Wt(d({},nn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),An=Wt(d({},Jt,{newState:0,oldState:0})),_n=[9,13,27,32],wn=Bt&&"CompositionEvent"in window,kn=null;Bt&&"documentMode"in document&&(kn=document.documentMode);var Cn=Bt&&"TextEvent"in window&&!kn,Sn=Bt&&(!wn||kn&&8<kn&&11>=kn),xn=String.fromCharCode(32),En=!1;function Tn(e,t){switch(e){case"keyup":return-1!==_n.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Pn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var zn=!1,Nn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function On(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Nn[e.type]:"textarea"===t}function Mn(e,t,n,r){Ot?Mt?Mt.push(r):Mt=[r]:Ot=r,0<(t=$c(t,"onChange")).length&&(n=new Zt("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Ln=null,Fn=null;function Rn(e){Rc(e,0)}function Dn(e){if(dt(qe(e)))return e}function Bn(e,t){if("change"===e)return t}var In=!1;if(Bt){var jn;if(Bt){var Un="oninput"in document;if(!Un){var Hn=document.createElement("div");Hn.setAttribute("oninput","return;"),Un="function"==typeof Hn.oninput}jn=Un}else jn=!1;In=jn&&(!document.documentMode||9<document.documentMode)}function qn(){Ln&&(Ln.detachEvent("onpropertychange",$n),Fn=Ln=null)}function $n(e){if("value"===e.propertyName&&Dn(Fn)){var t=[];Mn(t,Fn,e,Nt(e)),Rt(Rn,t)}}function Yn(e,t,n){"focusin"===e?(qn(),Fn=n,(Ln=t).attachEvent("onpropertychange",$n)):"focusout"===e&&qn()}function Vn(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Dn(Fn)}function Qn(e,t){if("click"===e)return Dn(t)}function Wn(e,t){if("input"===e||"change"===e)return Dn(t)}var Xn="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function Gn(e,t){if(Xn(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var a=n[r];if(!G.call(t,a)||!Xn(e[a],t[a]))return!1}return!0}function Kn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Jn(e,t){var n,r=Kn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Kn(r)}}function Zn(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?Zn(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function er(e){for(var t=pt((e=null!=e&&null!=e.ownerDocument&&null!=e.ownerDocument.defaultView?e.ownerDocument.defaultView:window).document);t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=pt((e=t.contentWindow).document)}return t}function tr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var nr=Bt&&"documentMode"in document&&11>=document.documentMode,rr=null,ar=null,ir=null,or=!1;function lr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;or||null==rr||rr!==pt(r)||(r="selectionStart"in(r=rr)&&tr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},ir&&Gn(ir,r)||(ir=r,0<(r=$c(ar,"onSelect")).length&&(t=new Zt("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=rr)))}function sr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var ur={animationend:sr("Animation","AnimationEnd"),animationiteration:sr("Animation","AnimationIteration"),animationstart:sr("Animation","AnimationStart"),transitionrun:sr("Transition","TransitionRun"),transitionstart:sr("Transition","TransitionStart"),transitioncancel:sr("Transition","TransitionCancel"),transitionend:sr("Transition","TransitionEnd")},cr={},fr={};function dr(e){if(cr[e])return cr[e];if(!ur[e])return e;var t,n=ur[e];for(t in n)if(n.hasOwnProperty(t)&&t in fr)return cr[e]=n[t];return e}Bt&&(fr=document.createElement("div").style,"AnimationEvent"in window||(delete ur.animationend.animation,delete ur.animationiteration.animation,delete ur.animationstart.animation),"TransitionEvent"in window||delete ur.transitionend.transition);var pr=dr("animationend"),hr=dr("animationiteration"),mr=dr("animationstart"),gr=dr("transitionrun"),vr=dr("transitionstart"),yr=dr("transitioncancel"),br=dr("transitionend"),Ar=new Map,_r="abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function wr(e,t){Ar.set(e,t),We(t,[e])}_r.push("scrollEnd");var kr=new WeakMap;function Cr(e,t){if("object"==typeof e&&null!==e){var n=kr.get(e);return void 0!==n?n:(t={value:e,source:t,stack:st(t)},kr.set(e,t),t)}return{value:e,source:t,stack:st(t)}}var Sr=[],xr=0,Er=0;function Tr(){for(var e=xr,t=Er=xr=0;t<e;){var n=Sr[t];Sr[t++]=null;var r=Sr[t];Sr[t++]=null;var a=Sr[t];Sr[t++]=null;var i=Sr[t];if(Sr[t++]=null,null!==r&&null!==a){var o=r.pending;null===o?a.next=a:(a.next=o.next,o.next=a),r.pending=a}0!==i&&Or(n,a,i)}}function Pr(e,t,n,r){Sr[xr++]=e,Sr[xr++]=t,Sr[xr++]=n,Sr[xr++]=r,Er|=r,e.lanes|=r,null!==(e=e.alternate)&&(e.lanes|=r)}function zr(e,t,n,r){return Pr(e,t,n,r),Mr(e)}function Nr(e,t){return Pr(e,null,null,t),Mr(e)}function Or(e,t,n){e.lanes|=n;var r=e.alternate;null!==r&&(r.lanes|=n);for(var a=!1,i=e.return;null!==i;)i.childLanes|=n,null!==(r=i.alternate)&&(r.childLanes|=n),22===i.tag&&(null===(e=i.stateNode)||1&e._visibility||(a=!0)),e=i,i=i.return;return 3===e.tag?(i=e.stateNode,a&&null!==t&&(a=31-pe(n),null===(r=(e=i.hiddenUpdates)[a])?e[a]=[t]:r.push(t),t.lane=536870912|n),i):null}function Mr(e){if(50<Ou)throw Ou=0,Mu=null,Error(o(185));for(var t=e.return;null!==t;)t=(e=t).return;return 3===e.tag?e.stateNode:null}var Lr={};function Fr(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.refCleanup=this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Rr(e,t,n,r){return new Fr(e,t,n,r)}function Dr(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Br(e,t){var n=e.alternate;return null===n?((n=Rr(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=65011712&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n.refCleanup=e.refCleanup,n}function Ir(e,t){e.flags&=65011714;var n=e.alternate;return null===n?(e.childLanes=0,e.lanes=t,e.child=null,e.subtreeFlags=0,e.memoizedProps=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.stateNode=null):(e.childLanes=n.childLanes,e.lanes=n.lanes,e.child=n.child,e.subtreeFlags=0,e.deletions=null,e.memoizedProps=n.memoizedProps,e.memoizedState=n.memoizedState,e.updateQueue=n.updateQueue,e.type=n.type,t=n.dependencies,e.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext}),e}function jr(e,t,n,r,a,i){var l=0;if(r=e,"function"==typeof e)Dr(e)&&(l=1);else if("string"==typeof e)l=function(e,t,n){if(1===n||null!=t.itemProp)return!1;switch(e){case"meta":case"title":return!0;case"style":if("string"!=typeof t.precedence||"string"!=typeof t.href||""===t.href)break;return!0;case"link":if("string"!=typeof t.rel||"string"!=typeof t.href||""===t.href||t.onLoad||t.onError)break;return"stylesheet"!==t.rel||(e=t.disabled,"string"==typeof t.precedence&&null==e);case"script":if(t.async&&"function"!=typeof t.async&&"symbol"!=typeof t.async&&!t.onLoad&&!t.onError&&t.src&&"string"==typeof t.src)return!0}return!1}(e,n,H.current)?26:"html"===e||"head"===e||"body"===e?27:5;else e:switch(e){case E:return(e=Rr(31,n,t,a)).elementType=E,e.lanes=i,e;case g:return Ur(n.children,a,i,t);case v:l=8,a|=24;break;case y:return(e=Rr(12,n,t,2|a)).elementType=y,e.lanes=i,e;case k:return(e=Rr(13,n,t,a)).elementType=k,e.lanes=i,e;case C:return(e=Rr(19,n,t,a)).elementType=C,e.lanes=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case b:case _:l=10;break e;case A:l=9;break e;case w:l=11;break e;case S:l=14;break e;case x:l=16,r=null;break e}l=29,n=Error(o(130,null===e?"null":typeof e,"")),r=null}return(t=Rr(l,n,t,a)).elementType=e,t.type=r,t.lanes=i,t}function Ur(e,t,n,r){return(e=Rr(7,e,r,t)).lanes=n,e}function Hr(e,t,n){return(e=Rr(6,e,null,t)).lanes=n,e}function qr(e,t,n){return(t=Rr(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}var $r=[],Yr=0,Vr=null,Qr=0,Wr=[],Xr=0,Gr=null,Kr=1,Jr="";function Zr(e,t){$r[Yr++]=Qr,$r[Yr++]=Vr,Vr=e,Qr=t}function ea(e,t,n){Wr[Xr++]=Kr,Wr[Xr++]=Jr,Wr[Xr++]=Gr,Gr=e;var r=Kr;e=Jr;var a=32-pe(r)-1;r&=~(1<<a),n+=1;var i=32-pe(t)+a;if(30<i){var o=a-a%5;i=(r&(1<<o)-1).toString(32),r>>=o,a-=o,Kr=1<<32-pe(t)+a|n<<a|r,Jr=i+e}else Kr=1<<i|n<<a|r,Jr=e}function ta(e){null!==e.return&&(Zr(e,1),ea(e,1,0))}function na(e){for(;e===Vr;)Vr=$r[--Yr],$r[Yr]=null,Qr=$r[--Yr],$r[Yr]=null;for(;e===Gr;)Gr=Wr[--Xr],Wr[Xr]=null,Jr=Wr[--Xr],Wr[Xr]=null,Kr=Wr[--Xr],Wr[Xr]=null}var ra=null,aa=null,ia=!1,oa=null,la=!1,sa=Error(o(519));function ua(e){throw ma(Cr(Error(o(418,"")),e)),sa}function ca(e){var t=e.stateNode,n=e.type,r=e.memoizedProps;switch(t[Oe]=e,t[Me]=r,n){case"dialog":Dc("cancel",t),Dc("close",t);break;case"iframe":case"object":case"embed":Dc("load",t);break;case"video":case"audio":for(n=0;n<Lc.length;n++)Dc(Lc[n],t);break;case"source":Dc("error",t);break;case"img":case"image":case"link":Dc("error",t),Dc("load",t);break;case"details":Dc("toggle",t);break;case"input":Dc("invalid",t),vt(t,r.value,r.defaultValue,r.checked,r.defaultChecked,r.type,r.name,!0),ft(t);break;case"select":Dc("invalid",t);break;case"textarea":Dc("invalid",t),_t(t,r.value,r.defaultValue,r.children),ft(t)}"string"!=typeof(n=r.children)&&"number"!=typeof n&&"bigint"!=typeof n||t.textContent===""+n||!0===r.suppressHydrationWarning||Gc(t.textContent,n)?(null!=r.popover&&(Dc("beforetoggle",t),Dc("toggle",t)),null!=r.onScroll&&Dc("scroll",t),null!=r.onScrollEnd&&Dc("scrollend",t),null!=r.onClick&&(t.onclick=Kc),t=!0):t=!1,t||ua(e)}function fa(e){for(ra=e.return;ra;)switch(ra.tag){case 5:case 13:return void(la=!1);case 27:case 3:return void(la=!0);default:ra=ra.return}}function da(e){if(e!==ra)return!1;if(!ia)return fa(e),ia=!0,!1;var t,n=e.tag;if((t=3!==n&&27!==n)&&((t=5===n)&&(t=!("form"!==(t=e.type)&&"button"!==t)||lf(e.type,e.memoizedProps)),t=!t),t&&aa&&ua(e),fa(e),13===n){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,n=0;e;){if(8===e.nodeType)if("/$"===(t=e.data)){if(0===n){aa=yf(e.nextSibling);break e}n--}else"$"!==t&&"$!"!==t&&"$?"!==t||n++;e=e.nextSibling}aa=null}}else 27===n?(n=aa,hf(e.type)?(e=bf,bf=null,aa=e):aa=n):aa=ra?yf(e.stateNode.nextSibling):null;return!0}function pa(){aa=ra=null,ia=!1}function ha(){var e=oa;return null!==e&&(null===bu?bu=e:bu.push.apply(bu,e),oa=null),e}function ma(e){null===oa?oa=[e]:oa.push(e)}var ga=I(null),va=null,ya=null;function ba(e,t,n){U(ga,t._currentValue),t._currentValue=n}function Aa(e){e._currentValue=ga.current,j(ga)}function _a(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function wa(e,t,n,r){var a=e.child;for(null!==a&&(a.return=e);null!==a;){var i=a.dependencies;if(null!==i){var l=a.child;i=i.firstContext;e:for(;null!==i;){var s=i;i=a;for(var u=0;u<t.length;u++)if(s.context===t[u]){i.lanes|=n,null!==(s=i.alternate)&&(s.lanes|=n),_a(i.return,n,e),r||(l=null);break e}i=s.next}}else if(18===a.tag){if(null===(l=a.return))throw Error(o(341));l.lanes|=n,null!==(i=l.alternate)&&(i.lanes|=n),_a(l,n,e),l=null}else l=a.child;if(null!==l)l.return=a;else for(l=a;null!==l;){if(l===e){l=null;break}if(null!==(a=l.sibling)){a.return=l.return,l=a;break}l=l.return}a=l}}function ka(e,t,n,r){e=null;for(var a=t,i=!1;null!==a;){if(!i)if(524288&a.flags)i=!0;else if(262144&a.flags)break;if(10===a.tag){var l=a.alternate;if(null===l)throw Error(o(387));if(null!==(l=l.memoizedProps)){var s=a.type;Xn(a.pendingProps.value,l.value)||(null!==e?e.push(s):e=[s])}}else if(a===Y.current){if(null===(l=a.alternate))throw Error(o(387));l.memoizedState.memoizedState!==a.memoizedState.memoizedState&&(null!==e?e.push(Xf):e=[Xf])}a=a.return}null!==e&&wa(t,e,n,r),t.flags|=262144}function Ca(e){for(e=e.firstContext;null!==e;){if(!Xn(e.context._currentValue,e.memoizedValue))return!0;e=e.next}return!1}function Sa(e){va=e,ya=null,null!==(e=e.dependencies)&&(e.firstContext=null)}function xa(e){return Ta(va,e)}function Ea(e,t){return null===va&&Sa(e),Ta(e,t)}function Ta(e,t){var n=t._currentValue;if(t={context:t,memoizedValue:n,next:null},null===ya){if(null===e)throw Error(o(308));ya=t,e.dependencies={lanes:0,firstContext:t},e.flags|=524288}else ya=ya.next=t;return n}var Pa="undefined"!=typeof AbortController?AbortController:function(){var e=[],t=this.signal={aborted:!1,addEventListener:function(t,n){e.push(n)}};this.abort=function(){t.aborted=!0,e.forEach(function(e){return e()})}},za=r.unstable_scheduleCallback,Na=r.unstable_NormalPriority,Oa={$$typeof:_,Consumer:null,Provider:null,_currentValue:null,_currentValue2:null,_threadCount:0};function Ma(){return{controller:new Pa,data:new Map,refCount:0}}function La(e){e.refCount--,0===e.refCount&&za(Na,function(){e.controller.abort()})}var Fa=null,Ra=0,Da=0,Ba=null;function Ia(){if(0===--Ra&&null!==Fa){null!==Ba&&(Ba.status="fulfilled");var e=Fa;Fa=null,Da=0,Ba=null;for(var t=0;t<e.length;t++)(0,e[t])()}}var ja=L.S;L.S=function(e,t){"object"==typeof t&&null!==t&&"function"==typeof t.then&&function(e,t){if(null===Fa){var n=Fa=[];Ra=0,Da=Pc(),Ba={status:"pending",value:void 0,then:function(e){n.push(e)}}}Ra++,t.then(Ia,Ia)}(0,t),null!==ja&&ja(e,t)};var Ua=I(null);function Ha(){var e=Ua.current;return null!==e?e:ru.pooledCache}function qa(e,t){U(Ua,null===t?Ua.current:t.pool)}function $a(){var e=Ha();return null===e?null:{parent:Oa._currentValue,pool:e}}var Ya=Error(o(460)),Va=Error(o(474)),Qa=Error(o(542)),Wa={then:function(){}};function Xa(e){return"fulfilled"===(e=e.status)||"rejected"===e}function Ga(){}function Ka(e,t,n){switch(void 0===(n=e[n])?e.push(t):n!==t&&(t.then(Ga,Ga),t=n),t.status){case"fulfilled":return t.value;case"rejected":throw ei(e=t.reason),e;default:if("string"==typeof t.status)t.then(Ga,Ga);else{if(null!==(e=ru)&&100<e.shellSuspendCounter)throw Error(o(482));(e=t).status="pending",e.then(function(e){if("pending"===t.status){var n=t;n.status="fulfilled",n.value=e}},function(e){if("pending"===t.status){var n=t;n.status="rejected",n.reason=e}})}switch(t.status){case"fulfilled":return t.value;case"rejected":throw ei(e=t.reason),e}throw Ja=t,Ya}}var Ja=null;function Za(){if(null===Ja)throw Error(o(459));var e=Ja;return Ja=null,e}function ei(e){if(e===Ya||e===Qa)throw Error(o(483))}var ti=!1;function ni(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,lanes:0,hiddenCallbacks:null},callbacks:null}}function ri(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,callbacks:null})}function ai(e){return{lane:e,tag:0,payload:null,callback:null,next:null}}function ii(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,2&nu){var a=r.pending;return null===a?t.next=t:(t.next=a.next,a.next=t),r.pending=t,t=Mr(e),Or(e,null,n),t}return Pr(e,r,t,n),Mr(e)}function oi(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,4194048&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,Ee(e,n)}}function li(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var a=null,i=null;if(null!==(n=n.firstBaseUpdate)){do{var o={lane:n.lane,tag:n.tag,payload:n.payload,callback:null,next:null};null===i?a=i=o:i=i.next=o,n=n.next}while(null!==n);null===i?a=i=t:i=i.next=t}else a=i=t;return n={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:i,shared:r.shared,callbacks:r.callbacks},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}var si=!1;function ui(){if(si&&null!==Ba)throw Ba}function ci(e,t,n,r){si=!1;var a=e.updateQueue;ti=!1;var i=a.firstBaseUpdate,o=a.lastBaseUpdate,l=a.shared.pending;if(null!==l){a.shared.pending=null;var s=l,u=s.next;s.next=null,null===o?i=u:o.next=u,o=s;var c=e.alternate;null!==c&&(l=(c=c.updateQueue).lastBaseUpdate)!==o&&(null===l?c.firstBaseUpdate=u:l.next=u,c.lastBaseUpdate=s)}if(null!==i){var f=a.baseState;for(o=0,c=u=s=null,l=i;;){var p=-536870913&l.lane,h=p!==l.lane;if(h?(iu&p)===p:(r&p)===p){0!==p&&p===Da&&(si=!0),null!==c&&(c=c.next={lane:0,tag:l.tag,payload:l.payload,callback:null,next:null});e:{var m=e,g=l;p=t;var v=n;switch(g.tag){case 1:if("function"==typeof(m=g.payload)){f=m.call(v,f,p);break e}f=m;break e;case 3:m.flags=-65537&m.flags|128;case 0:if(null==(p="function"==typeof(m=g.payload)?m.call(v,f,p):m))break e;f=d({},f,p);break e;case 2:ti=!0}}null!==(p=l.callback)&&(e.flags|=64,h&&(e.flags|=8192),null===(h=a.callbacks)?a.callbacks=[p]:h.push(p))}else h={lane:p,tag:l.tag,payload:l.payload,callback:l.callback,next:null},null===c?(u=c=h,s=f):c=c.next=h,o|=p;if(null===(l=l.next)){if(null===(l=a.shared.pending))break;l=(h=l).next,h.next=null,a.lastBaseUpdate=h,a.shared.pending=null}}null===c&&(s=f),a.baseState=s,a.firstBaseUpdate=u,a.lastBaseUpdate=c,null===i&&(a.shared.lanes=0),pu|=o,e.lanes=o,e.memoizedState=f}}function fi(e,t){if("function"!=typeof e)throw Error(o(191,e));e.call(t)}function di(e,t){var n=e.callbacks;if(null!==n)for(e.callbacks=null,e=0;e<n.length;e++)fi(n[e],t)}var pi=I(null),hi=I(0);function mi(e,t){U(hi,e=fu),U(pi,t),fu=e|t.baseLanes}function gi(){U(hi,fu),U(pi,pi.current)}function vi(){fu=hi.current,j(pi),j(hi)}var yi=0,bi=null,Ai=null,_i=null,wi=!1,ki=!1,Ci=!1,Si=0,xi=0,Ei=null,Ti=0;function Pi(){throw Error(o(321))}function zi(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Xn(e[n],t[n]))return!1;return!0}function Ni(e,t,n,r,a,i){return yi=i,bi=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,L.H=null===e||null===e.memoizedState?Vo:Qo,Ci=!1,i=n(r,a),Ci=!1,ki&&(i=Mi(t,n,r,a)),Oi(e),i}function Oi(e){L.H=Yo;var t=null!==Ai&&null!==Ai.next;if(yi=0,_i=Ai=bi=null,wi=!1,xi=0,Ei=null,t)throw Error(o(300));null===e||El||null!==(e=e.dependencies)&&Ca(e)&&(El=!0)}function Mi(e,t,n,r){bi=e;var a=0;do{if(ki&&(Ei=null),xi=0,ki=!1,25<=a)throw Error(o(301));if(a+=1,_i=Ai=null,null!=e.updateQueue){var i=e.updateQueue;i.lastEffect=null,i.events=null,i.stores=null,null!=i.memoCache&&(i.memoCache.index=0)}L.H=Wo,i=t(n,r)}while(ki);return i}function Li(){var e=L.H,t=e.useState()[0];return t="function"==typeof t.then?ji(t):t,e=e.useState()[0],(null!==Ai?Ai.memoizedState:null)!==e&&(bi.flags|=1024),t}function Fi(){var e=0!==Si;return Si=0,e}function Ri(e,t,n){t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~n}function Di(e){if(wi){for(e=e.memoizedState;null!==e;){var t=e.queue;null!==t&&(t.pending=null),e=e.next}wi=!1}yi=0,_i=Ai=bi=null,ki=!1,xi=Si=0,Ei=null}function Bi(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===_i?bi.memoizedState=_i=e:_i=_i.next=e,_i}function Ii(){if(null===Ai){var e=bi.alternate;e=null!==e?e.memoizedState:null}else e=Ai.next;var t=null===_i?bi.memoizedState:_i.next;if(null!==t)_i=t,Ai=e;else{if(null===e){if(null===bi.alternate)throw Error(o(467));throw Error(o(310))}e={memoizedState:(Ai=e).memoizedState,baseState:Ai.baseState,baseQueue:Ai.baseQueue,queue:Ai.queue,next:null},null===_i?bi.memoizedState=_i=e:_i=_i.next=e}return _i}function ji(e){var t=xi;return xi+=1,null===Ei&&(Ei=[]),e=Ka(Ei,e,t),t=bi,null===(null===_i?t.memoizedState:_i.next)&&(t=t.alternate,L.H=null===t||null===t.memoizedState?Vo:Qo),e}function Ui(e){if(null!==e&&"object"==typeof e){if("function"==typeof e.then)return ji(e);if(e.$$typeof===_)return xa(e)}throw Error(o(438,String(e)))}function Hi(e){var t=null,n=bi.updateQueue;if(null!==n&&(t=n.memoCache),null==t){var r=bi.alternate;null!==r&&null!==(r=r.updateQueue)&&null!=(r=r.memoCache)&&(t={data:r.data.map(function(e){return e.slice()}),index:0})}if(null==t&&(t={data:[],index:0}),null===n&&(n={lastEffect:null,events:null,stores:null,memoCache:null},bi.updateQueue=n),n.memoCache=t,void 0===(n=t.data[t.index]))for(n=t.data[t.index]=Array(e),r=0;r<e;r++)n[r]=T;return t.index++,n}function qi(e,t){return"function"==typeof t?t(e):t}function $i(e){return Yi(Ii(),Ai,e)}function Yi(e,t,n){var r=e.queue;if(null===r)throw Error(o(311));r.lastRenderedReducer=n;var a=e.baseQueue,i=r.pending;if(null!==i){if(null!==a){var l=a.next;a.next=i.next,i.next=l}t.baseQueue=a=i,r.pending=null}if(i=e.baseState,null===a)e.memoizedState=i;else{var s=l=null,u=null,c=t=a.next,f=!1;do{var d=-536870913&c.lane;if(d!==c.lane?(iu&d)===d:(yi&d)===d){var p=c.revertLane;if(0===p)null!==u&&(u=u.next={lane:0,revertLane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),d===Da&&(f=!0);else{if((yi&p)===p){c=c.next,p===Da&&(f=!0);continue}d={lane:0,revertLane:c.revertLane,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null},null===u?(s=u=d,l=i):u=u.next=d,bi.lanes|=p,pu|=p}d=c.action,Ci&&n(i,d),i=c.hasEagerState?c.eagerState:n(i,d)}else p={lane:d,revertLane:c.revertLane,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null},null===u?(s=u=p,l=i):u=u.next=p,bi.lanes|=d,pu|=d;c=c.next}while(null!==c&&c!==t);if(null===u?l=i:u.next=s,!Xn(i,e.memoizedState)&&(El=!0,f&&null!==(n=Ba)))throw n;e.memoizedState=i,e.baseState=l,e.baseQueue=u,r.lastRenderedState=i}return null===a&&(r.lanes=0),[e.memoizedState,r.dispatch]}function Vi(e){var t=Ii(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,i=t.memoizedState;if(null!==a){n.pending=null;var l=a=a.next;do{i=e(i,l.action),l=l.next}while(l!==a);Xn(i,t.memoizedState)||(El=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function Qi(e,t,n){var r=bi,a=Ii(),i=ia;if(i){if(void 0===n)throw Error(o(407));n=n()}else n=t();var l=!Xn((Ai||a).memoizedState,n);if(l&&(a.memoizedState=n,El=!0),a=a.queue,vo(2048,8,Gi.bind(null,r,a,e),[e]),a.getSnapshot!==t||l||null!==_i&&1&_i.memoizedState.tag){if(r.flags|=2048,ho(9,{destroy:void 0,resource:void 0},Xi.bind(null,r,a,n,t),null),null===ru)throw Error(o(349));i||124&yi||Wi(r,t,n)}return n}function Wi(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=bi.updateQueue)?(t={lastEffect:null,events:null,stores:null,memoCache:null},bi.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Xi(e,t,n,r){t.value=n,t.getSnapshot=r,Ki(t)&&Ji(e)}function Gi(e,t,n){return n(function(){Ki(t)&&Ji(e)})}function Ki(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!Xn(e,n)}catch(e){return!0}}function Ji(e){var t=Nr(e,2);null!==t&&Ru(t,0,2)}function Zi(e){var t=Bi();if("function"==typeof e){var n=e;if(e=n(),Ci){de(!0);try{n()}finally{de(!1)}}}return t.memoizedState=t.baseState=e,t.queue={pending:null,lanes:0,dispatch:null,lastRenderedReducer:qi,lastRenderedState:e},t}function eo(e,t,n,r){return e.baseState=n,Yi(e,Ai,"function"==typeof r?r:qi)}function to(e,t,n,r,a){if(Ho(e))throw Error(o(485));if(null!==(e=t.action)){var i={payload:a,action:e,next:null,isTransition:!0,status:"pending",value:null,reason:null,listeners:[],then:function(e){i.listeners.push(e)}};null!==L.T?n(!0):i.isTransition=!1,r(i),null===(n=t.pending)?(i.next=t.pending=i,no(t,i)):(i.next=n.next,t.pending=n.next=i)}}function no(e,t){var n=t.action,r=t.payload,a=e.state;if(t.isTransition){var i=L.T,o={};L.T=o;try{var l=n(a,r),s=L.S;null!==s&&s(o,l),ro(e,t,l)}catch(n){io(e,t,n)}finally{L.T=i}}else try{ro(e,t,i=n(a,r))}catch(n){io(e,t,n)}}function ro(e,t,n){null!==n&&"object"==typeof n&&"function"==typeof n.then?n.then(function(n){ao(e,t,n)},function(n){return io(e,t,n)}):ao(e,t,n)}function ao(e,t,n){t.status="fulfilled",t.value=n,oo(t),e.state=n,null!==(t=e.pending)&&((n=t.next)===t?e.pending=null:(n=n.next,t.next=n,no(e,n)))}function io(e,t,n){var r=e.pending;if(e.pending=null,null!==r){r=r.next;do{t.status="rejected",t.reason=n,oo(t),t=t.next}while(t!==r)}e.action=null}function oo(e){e=e.listeners;for(var t=0;t<e.length;t++)(0,e[t])()}function lo(e,t){return t}function so(e,t){if(ia){var n=ru.formState;if(null!==n){e:{var r=bi;if(ia){if(aa){t:{for(var a=aa,i=la;8!==a.nodeType;){if(!i){a=null;break t}if(null===(a=yf(a.nextSibling))){a=null;break t}}a="F!"===(i=a.data)||"F"===i?a:null}if(a){aa=yf(a.nextSibling),r="F!"===a.data;break e}}ua(r)}r=!1}r&&(t=n[0])}}return(n=Bi()).memoizedState=n.baseState=t,r={pending:null,lanes:0,dispatch:null,lastRenderedReducer:lo,lastRenderedState:t},n.queue=r,n=Io.bind(null,bi,r),r.dispatch=n,r=Zi(!1),i=Uo.bind(null,bi,!1,r.queue),a={state:t,dispatch:null,action:e,pending:null},(r=Bi()).queue=a,n=to.bind(null,bi,a,i,n),a.dispatch=n,r.memoizedState=e,[t,n,!1]}function uo(e){return co(Ii(),Ai,e)}function co(e,t,n){if(t=Yi(e,t,lo)[0],e=$i(qi)[0],"object"==typeof t&&null!==t&&"function"==typeof t.then)try{var r=ji(t)}catch(e){if(e===Ya)throw Qa;throw e}else r=t;var a=(t=Ii()).queue,i=a.dispatch;return n!==t.memoizedState&&(bi.flags|=2048,ho(9,{destroy:void 0,resource:void 0},fo.bind(null,a,n),null)),[r,i,e]}function fo(e,t){e.action=t}function po(e){var t=Ii(),n=Ai;if(null!==n)return co(t,n,e);Ii(),t=t.memoizedState;var r=(n=Ii()).queue.dispatch;return n.memoizedState=e,[t,r,!1]}function ho(e,t,n,r){return e={tag:e,create:n,deps:r,inst:t,next:null},null===(t=bi.updateQueue)&&(t={lastEffect:null,events:null,stores:null,memoCache:null},bi.updateQueue=t),null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function mo(){return Ii().memoizedState}function go(e,t,n,r){var a=Bi();r=void 0===r?null:r,bi.flags|=e,a.memoizedState=ho(1|t,{destroy:void 0,resource:void 0},n,r)}function vo(e,t,n,r){var a=Ii();r=void 0===r?null:r;var i=a.memoizedState.inst;null!==Ai&&null!==r&&zi(r,Ai.memoizedState.deps)?a.memoizedState=ho(t,i,n,r):(bi.flags|=e,a.memoizedState=ho(1|t,i,n,r))}function yo(e,t){go(8390656,8,e,t)}function bo(e,t){vo(2048,8,e,t)}function Ao(e,t){return vo(4,2,e,t)}function _o(e,t){return vo(4,4,e,t)}function wo(e,t){if("function"==typeof t){e=e();var n=t(e);return function(){"function"==typeof n?n():t(null)}}if(null!=t)return e=e(),t.current=e,function(){t.current=null}}function ko(e,t,n){n=null!=n?n.concat([e]):null,vo(4,4,wo.bind(null,t,e),n)}function Co(){}function So(e,t){var n=Ii();t=void 0===t?null:t;var r=n.memoizedState;return null!==t&&zi(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function xo(e,t){var n=Ii();t=void 0===t?null:t;var r=n.memoizedState;if(null!==t&&zi(t,r[1]))return r[0];if(r=e(),Ci){de(!0);try{e()}finally{de(!1)}}return n.memoizedState=[r,t],r}function Eo(e,t,n){return void 0===n||1073741824&yi?e.memoizedState=t:(e.memoizedState=n,e=Fu(),bi.lanes|=e,pu|=e,n)}function To(e,t,n,r){return Xn(n,t)?n:null!==pi.current?(e=Eo(e,n,r),Xn(e,t)||(El=!0),e):42&yi?(e=Fu(),bi.lanes|=e,pu|=e,t):(El=!0,e.memoizedState=n)}function Po(e,t,n,r,a){var i=F.p;F.p=0!==i&&8>i?i:8;var o,l,s,u=L.T,c={};L.T=c,Uo(e,!1,t,n);try{var f=a(),d=L.S;null!==d&&d(c,f),null!==f&&"object"==typeof f&&"function"==typeof f.then?jo(e,t,(o=r,l=[],s={status:"pending",value:null,reason:null,then:function(e){l.push(e)}},f.then(function(){s.status="fulfilled",s.value=o;for(var e=0;e<l.length;e++)(0,l[e])(o)},function(e){for(s.status="rejected",s.reason=e,e=0;e<l.length;e++)(0,l[e])(void 0)}),s),Lu()):jo(e,t,r,Lu())}catch(n){jo(e,t,{then:function(){},status:"rejected",reason:n},Lu())}finally{F.p=i,L.T=u}}function zo(){}function No(e,t,n,r){if(5!==e.tag)throw Error(o(476));var a=Oo(e).queue;Po(e,a,t,R,null===n?zo:function(){return Mo(e),n(r)})}function Oo(e){var t=e.memoizedState;if(null!==t)return t;var n={};return(t={memoizedState:R,baseState:R,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:qi,lastRenderedState:R},next:null}).next={memoizedState:n,baseState:n,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:qi,lastRenderedState:n},next:null},e.memoizedState=t,null!==(e=e.alternate)&&(e.memoizedState=t),t}function Mo(e){jo(e,Oo(e).next.queue,{},Lu())}function Lo(){return xa(Xf)}function Fo(){return Ii().memoizedState}function Ro(){return Ii().memoizedState}function Do(e){for(var t=e.return;null!==t;){switch(t.tag){case 24:case 3:var n=Lu(),r=ii(t,e=ai(n),n);return null!==r&&(Ru(r,0,n),oi(r,t,n)),t={cache:Ma()},void(e.payload=t)}t=t.return}}function Bo(e,t,n){var r=Lu();n={lane:r,revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null},Ho(e)?qo(t,n):null!==(n=zr(e,t,n,r))&&(Ru(n,0,r),$o(n,t,r))}function Io(e,t,n){jo(e,t,n,Lu())}function jo(e,t,n,r){var a={lane:r,revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null};if(Ho(e))qo(t,a);else{var i=e.alternate;if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=t.lastRenderedReducer))try{var o=t.lastRenderedState,l=i(o,n);if(a.hasEagerState=!0,a.eagerState=l,Xn(l,o))return Pr(e,t,a,0),null===ru&&Tr(),!1}catch(e){}if(null!==(n=zr(e,t,a,r)))return Ru(n,0,r),$o(n,t,r),!0}return!1}function Uo(e,t,n,r){if(r={lane:2,revertLane:Pc(),action:r,hasEagerState:!1,eagerState:null,next:null},Ho(e)){if(t)throw Error(o(479))}else null!==(t=zr(e,n,r,2))&&Ru(t,0,2)}function Ho(e){var t=e.alternate;return e===bi||null!==t&&t===bi}function qo(e,t){ki=wi=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function $o(e,t,n){if(4194048&n){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,Ee(e,n)}}var Yo={readContext:xa,use:Ui,useCallback:Pi,useContext:Pi,useEffect:Pi,useImperativeHandle:Pi,useLayoutEffect:Pi,useInsertionEffect:Pi,useMemo:Pi,useReducer:Pi,useRef:Pi,useState:Pi,useDebugValue:Pi,useDeferredValue:Pi,useTransition:Pi,useSyncExternalStore:Pi,useId:Pi,useHostTransitionStatus:Pi,useFormState:Pi,useActionState:Pi,useOptimistic:Pi,useMemoCache:Pi,useCacheRefresh:Pi},Vo={readContext:xa,use:Ui,useCallback:function(e,t){return Bi().memoizedState=[e,void 0===t?null:t],e},useContext:xa,useEffect:yo,useImperativeHandle:function(e,t,n){n=null!=n?n.concat([e]):null,go(4194308,4,wo.bind(null,t,e),n)},useLayoutEffect:function(e,t){return go(4194308,4,e,t)},useInsertionEffect:function(e,t){go(4,2,e,t)},useMemo:function(e,t){var n=Bi();t=void 0===t?null:t;var r=e();if(Ci){de(!0);try{e()}finally{de(!1)}}return n.memoizedState=[r,t],r},useReducer:function(e,t,n){var r=Bi();if(void 0!==n){var a=n(t);if(Ci){de(!0);try{n(t)}finally{de(!1)}}}else a=t;return r.memoizedState=r.baseState=a,e={pending:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:a},r.queue=e,e=e.dispatch=Bo.bind(null,bi,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Bi().memoizedState=e},useState:function(e){var t=(e=Zi(e)).queue,n=Io.bind(null,bi,t);return t.dispatch=n,[e.memoizedState,n]},useDebugValue:Co,useDeferredValue:function(e,t){return Eo(Bi(),e,t)},useTransition:function(){var e=Zi(!1);return e=Po.bind(null,bi,e.queue,!0,!1),Bi().memoizedState=e,[!1,e]},useSyncExternalStore:function(e,t,n){var r=bi,a=Bi();if(ia){if(void 0===n)throw Error(o(407));n=n()}else{if(n=t(),null===ru)throw Error(o(349));124&iu||Wi(r,t,n)}a.memoizedState=n;var i={value:n,getSnapshot:t};return a.queue=i,yo(Gi.bind(null,r,i,e),[e]),r.flags|=2048,ho(9,{destroy:void 0,resource:void 0},Xi.bind(null,r,i,n,t),null),n},useId:function(){var e=Bi(),t=ru.identifierPrefix;if(ia){var n=Jr;t="«"+t+"R"+(n=(Kr&~(1<<32-pe(Kr)-1)).toString(32)+n),0<(n=Si++)&&(t+="H"+n.toString(32)),t+="»"}else t="«"+t+"r"+(n=Ti++).toString(32)+"»";return e.memoizedState=t},useHostTransitionStatus:Lo,useFormState:so,useActionState:so,useOptimistic:function(e){var t=Bi();t.memoizedState=t.baseState=e;var n={pending:null,lanes:0,dispatch:null,lastRenderedReducer:null,lastRenderedState:null};return t.queue=n,t=Uo.bind(null,bi,!0,n),n.dispatch=t,[e,t]},useMemoCache:Hi,useCacheRefresh:function(){return Bi().memoizedState=Do.bind(null,bi)}},Qo={readContext:xa,use:Ui,useCallback:So,useContext:xa,useEffect:bo,useImperativeHandle:ko,useInsertionEffect:Ao,useLayoutEffect:_o,useMemo:xo,useReducer:$i,useRef:mo,useState:function(){return $i(qi)},useDebugValue:Co,useDeferredValue:function(e,t){return To(Ii(),Ai.memoizedState,e,t)},useTransition:function(){var e=$i(qi)[0],t=Ii().memoizedState;return["boolean"==typeof e?e:ji(e),t]},useSyncExternalStore:Qi,useId:Fo,useHostTransitionStatus:Lo,useFormState:uo,useActionState:uo,useOptimistic:function(e,t){return eo(Ii(),0,e,t)},useMemoCache:Hi,useCacheRefresh:Ro},Wo={readContext:xa,use:Ui,useCallback:So,useContext:xa,useEffect:bo,useImperativeHandle:ko,useInsertionEffect:Ao,useLayoutEffect:_o,useMemo:xo,useReducer:Vi,useRef:mo,useState:function(){return Vi(qi)},useDebugValue:Co,useDeferredValue:function(e,t){var n=Ii();return null===Ai?Eo(n,e,t):To(n,Ai.memoizedState,e,t)},useTransition:function(){var e=Vi(qi)[0],t=Ii().memoizedState;return["boolean"==typeof e?e:ji(e),t]},useSyncExternalStore:Qi,useId:Fo,useHostTransitionStatus:Lo,useFormState:po,useActionState:po,useOptimistic:function(e,t){var n=Ii();return null!==Ai?eo(n,0,e,t):(n.baseState=e,[e,n.queue.dispatch])},useMemoCache:Hi,useCacheRefresh:Ro},Xo=null,Go=0;function Ko(e){var t=Go;return Go+=1,null===Xo&&(Xo=[]),Ka(Xo,e,t)}function Jo(e,t){t=t.props.ref,e.ref=void 0!==t?t:null}function Zo(e,t){if(t.$$typeof===p)throw Error(o(525));throw e=Object.prototype.toString.call(t),Error(o(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function el(e){return(0,e._init)(e._payload)}function tl(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e){for(var t=new Map;null!==e;)null!==e.key?t.set(e.key,e):t.set(e.index,e),e=e.sibling;return t}function a(e,t){return(e=Br(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=67108866,n):r:(t.flags|=67108866,n):(t.flags|=1048576,n)}function l(t){return e&&null===t.alternate&&(t.flags|=67108866),t}function s(e,t,n,r){return null===t||6!==t.tag?((t=Hr(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function u(e,t,n,r){var i=n.type;return i===g?f(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===i||"object"==typeof i&&null!==i&&i.$$typeof===x&&el(i)===t.type)?(Jo(t=a(t,n.props),n),t.return=e,t):(Jo(t=jr(n.type,n.key,n.props,null,e.mode,r),n),t.return=e,t)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=qr(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=Ur(n,e.mode,r,i)).return=e,t):((t=a(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t||"bigint"==typeof t)return(t=Hr(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case h:return Jo(n=jr(t.type,t.key,t.props,null,e.mode,n),t),n.return=e,n;case m:return(t=qr(t,e.mode,n)).return=e,t;case x:return d(e,t=(0,t._init)(t._payload),n)}if(M(t)||z(t))return(t=Ur(t,e.mode,n,null)).return=e,t;if("function"==typeof t.then)return d(e,Ko(t),n);if(t.$$typeof===_)return d(e,Ea(e,t),n);Zo(e,t)}return null}function p(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n||"bigint"==typeof n)return null!==a?null:s(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case h:return n.key===a?u(e,t,n,r):null;case m:return n.key===a?c(e,t,n,r):null;case x:return p(e,t,n=(a=n._init)(n._payload),r)}if(M(n)||z(n))return null!==a?null:f(e,t,n,r,null);if("function"==typeof n.then)return p(e,t,Ko(n),r);if(n.$$typeof===_)return p(e,t,Ea(e,n),r);Zo(e,n)}return null}function v(e,t,n,r,a){if("string"==typeof r&&""!==r||"number"==typeof r||"bigint"==typeof r)return s(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case h:return u(t,e=e.get(null===r.key?n:r.key)||null,r,a);case m:return c(t,e=e.get(null===r.key?n:r.key)||null,r,a);case x:return v(e,t,n,r=(0,r._init)(r._payload),a)}if(M(r)||z(r))return f(t,e=e.get(n)||null,r,a,null);if("function"==typeof r.then)return v(e,t,n,Ko(r),a);if(r.$$typeof===_)return v(e,t,n,Ea(t,r),a);Zo(t,r)}return null}function y(s,u,c,f){if("object"==typeof c&&null!==c&&c.type===g&&null===c.key&&(c=c.props.children),"object"==typeof c&&null!==c){switch(c.$$typeof){case h:e:{for(var b=c.key;null!==u;){if(u.key===b){if((b=c.type)===g){if(7===u.tag){n(s,u.sibling),(f=a(u,c.props.children)).return=s,s=f;break e}}else if(u.elementType===b||"object"==typeof b&&null!==b&&b.$$typeof===x&&el(b)===u.type){n(s,u.sibling),Jo(f=a(u,c.props),c),f.return=s,s=f;break e}n(s,u);break}t(s,u),u=u.sibling}c.type===g?((f=Ur(c.props.children,s.mode,f,c.key)).return=s,s=f):(Jo(f=jr(c.type,c.key,c.props,null,s.mode,f),c),f.return=s,s=f)}return l(s);case m:e:{for(b=c.key;null!==u;){if(u.key===b){if(4===u.tag&&u.stateNode.containerInfo===c.containerInfo&&u.stateNode.implementation===c.implementation){n(s,u.sibling),(f=a(u,c.children||[])).return=s,s=f;break e}n(s,u);break}t(s,u),u=u.sibling}(f=qr(c,s.mode,f)).return=s,s=f}return l(s);case x:return y(s,u,c=(b=c._init)(c._payload),f)}if(M(c))return function(a,o,l,s){for(var u=null,c=null,f=o,h=o=0,m=null;null!==f&&h<l.length;h++){f.index>h?(m=f,f=null):m=f.sibling;var g=p(a,f,l[h],s);if(null===g){null===f&&(f=m);break}e&&f&&null===g.alternate&&t(a,f),o=i(g,o,h),null===c?u=g:c.sibling=g,c=g,f=m}if(h===l.length)return n(a,f),ia&&Zr(a,h),u;if(null===f){for(;h<l.length;h++)null!==(f=d(a,l[h],s))&&(o=i(f,o,h),null===c?u=f:c.sibling=f,c=f);return ia&&Zr(a,h),u}for(f=r(f);h<l.length;h++)null!==(m=v(f,a,h,l[h],s))&&(e&&null!==m.alternate&&f.delete(null===m.key?h:m.key),o=i(m,o,h),null===c?u=m:c.sibling=m,c=m);return e&&f.forEach(function(e){return t(a,e)}),ia&&Zr(a,h),u}(s,u,c,f);if(z(c)){if("function"!=typeof(b=z(c)))throw Error(o(150));return function(a,l,s,u){if(null==s)throw Error(o(151));for(var c=null,f=null,h=l,m=l=0,g=null,y=s.next();null!==h&&!y.done;m++,y=s.next()){h.index>m?(g=h,h=null):g=h.sibling;var b=p(a,h,y.value,u);if(null===b){null===h&&(h=g);break}e&&h&&null===b.alternate&&t(a,h),l=i(b,l,m),null===f?c=b:f.sibling=b,f=b,h=g}if(y.done)return n(a,h),ia&&Zr(a,m),c;if(null===h){for(;!y.done;m++,y=s.next())null!==(y=d(a,y.value,u))&&(l=i(y,l,m),null===f?c=y:f.sibling=y,f=y);return ia&&Zr(a,m),c}for(h=r(h);!y.done;m++,y=s.next())null!==(y=v(h,a,m,y.value,u))&&(e&&null!==y.alternate&&h.delete(null===y.key?m:y.key),l=i(y,l,m),null===f?c=y:f.sibling=y,f=y);return e&&h.forEach(function(e){return t(a,e)}),ia&&Zr(a,m),c}(s,u,c=b.call(c),f)}if("function"==typeof c.then)return y(s,u,Ko(c),f);if(c.$$typeof===_)return y(s,u,Ea(s,c),f);Zo(s,c)}return"string"==typeof c&&""!==c||"number"==typeof c||"bigint"==typeof c?(c=""+c,null!==u&&6===u.tag?(n(s,u.sibling),(f=a(u,c)).return=s,s=f):(n(s,u),(f=Hr(c,s.mode,f)).return=s,s=f),l(s)):n(s,u)}return function(e,t,n,r){try{Go=0;var a=y(e,t,n,r);return Xo=null,a}catch(t){if(t===Ya||t===Qa)throw t;var i=Rr(29,t,null,e.mode);return i.lanes=r,i.return=e,i}}}var nl=tl(!0),rl=tl(!1),al=I(null),il=null;function ol(e){var t=e.alternate;U(cl,1&cl.current),U(al,e),null===il&&(null===t||null!==pi.current||null!==t.memoizedState)&&(il=e)}function ll(e){if(22===e.tag){if(U(cl,cl.current),U(al,e),null===il){var t=e.alternate;null!==t&&null!==t.memoizedState&&(il=e)}}else sl()}function sl(){U(cl,cl.current),U(al,al.current)}function ul(e){j(al),il===e&&(il=null),j(cl)}var cl=I(0);function fl(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||vf(n)))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(128&t.flags)return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function dl(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:d({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var pl={enqueueSetState:function(e,t,n){e=e._reactInternals;var r=Lu(),a=ai(r);a.payload=t,null!=n&&(a.callback=n),null!==(t=ii(e,a,r))&&(Ru(t,0,r),oi(t,e,r))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=Lu(),a=ai(r);a.tag=1,a.payload=t,null!=n&&(a.callback=n),null!==(t=ii(e,a,r))&&(Ru(t,0,r),oi(t,e,r))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=Lu(),r=ai(n);r.tag=2,null!=t&&(r.callback=t),null!==(t=ii(e,r,n))&&(Ru(t,0,n),oi(t,e,n))}};function hl(e,t,n,r,a,i,o){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,o):!(t.prototype&&t.prototype.isPureReactComponent&&Gn(n,r)&&Gn(a,i))}function ml(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&pl.enqueueReplaceState(t,t.state,null)}function gl(e,t){var n=t;if("ref"in t)for(var r in n={},t)"ref"!==r&&(n[r]=t[r]);if(e=e.defaultProps)for(var a in n===t&&(n=d({},n)),e)void 0===n[a]&&(n[a]=e[a]);return n}var vl="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(t))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)};function yl(e){vl(e)}function bl(e){console.error(e)}function Al(e){vl(e)}function _l(e,t){try{(0,e.onUncaughtError)(t.value,{componentStack:t.stack})}catch(e){setTimeout(function(){throw e})}}function wl(e,t,n){try{(0,e.onCaughtError)(n.value,{componentStack:n.stack,errorBoundary:1===t.tag?t.stateNode:null})}catch(e){setTimeout(function(){throw e})}}function kl(e,t,n){return(n=ai(n)).tag=3,n.payload={element:null},n.callback=function(){_l(e,t)},n}function Cl(e){return(e=ai(e)).tag=3,e}function Sl(e,t,n,r){var a=n.type.getDerivedStateFromError;if("function"==typeof a){var i=r.value;e.payload=function(){return a(i)},e.callback=function(){wl(t,n,r)}}var o=n.stateNode;null!==o&&"function"==typeof o.componentDidCatch&&(e.callback=function(){wl(t,n,r),"function"!=typeof a&&(null===Cu?Cu=new Set([this]):Cu.add(this));var e=r.stack;this.componentDidCatch(r.value,{componentStack:null!==e?e:""})})}var xl=Error(o(461)),El=!1;function Tl(e,t,n,r){t.child=null===e?rl(t,null,n,r):nl(t,e.child,n,r)}function Pl(e,t,n,r,a){n=n.render;var i=t.ref;if("ref"in r){var o={};for(var l in r)"ref"!==l&&(o[l]=r[l])}else o=r;return Sa(t),r=Ni(e,t,n,o,i,a),l=Fi(),null===e||El?(ia&&l&&ta(t),t.flags|=1,Tl(e,t,r,a),t.child):(Ri(e,t,a),Xl(e,t,a))}function zl(e,t,n,r,a){if(null===e){var i=n.type;return"function"!=typeof i||Dr(i)||void 0!==i.defaultProps||null!==n.compare?((e=jr(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,Nl(e,t,i,r,a))}if(i=e.child,!Gl(e,a)){var o=i.memoizedProps;if((n=null!==(n=n.compare)?n:Gn)(o,r)&&e.ref===t.ref)return Xl(e,t,a)}return t.flags|=1,(e=Br(i,r)).ref=t.ref,e.return=t,t.child=e}function Nl(e,t,n,r,a){if(null!==e){var i=e.memoizedProps;if(Gn(i,r)&&e.ref===t.ref){if(El=!1,t.pendingProps=r=i,!Gl(e,a))return t.lanes=e.lanes,Xl(e,t,a);131072&e.flags&&(El=!0)}}return Fl(e,t,n,r,a)}function Ol(e,t,n){var r=t.pendingProps,a=r.children,i=null!==e?e.memoizedState:null;if("hidden"===r.mode){if(128&t.flags){if(r=null!==i?i.baseLanes|n:n,null!==e){for(a=t.child=e.child,i=0;null!==a;)i=i|a.lanes|a.childLanes,a=a.sibling;t.childLanes=i&~r}else t.childLanes=0,t.child=null;return Ml(e,t,r,n)}if(!(536870912&n))return t.lanes=t.childLanes=536870912,Ml(e,t,null!==i?i.baseLanes|n:n,n);t.memoizedState={baseLanes:0,cachePool:null},null!==e&&qa(0,null!==i?i.cachePool:null),null!==i?mi(t,i):gi(),ll(t)}else null!==i?(qa(0,i.cachePool),mi(t,i),sl(),t.memoizedState=null):(null!==e&&qa(0,null),gi(),sl());return Tl(e,t,a,n),t.child}function Ml(e,t,n,r){var a=Ha();return a=null===a?null:{parent:Oa._currentValue,pool:a},t.memoizedState={baseLanes:n,cachePool:a},null!==e&&qa(0,null),gi(),ll(t),null!==e&&ka(e,t,r,!0),null}function Ll(e,t){var n=t.ref;if(null===n)null!==e&&null!==e.ref&&(t.flags|=4194816);else{if("function"!=typeof n&&"object"!=typeof n)throw Error(o(284));null!==e&&e.ref===n||(t.flags|=4194816)}}function Fl(e,t,n,r,a){return Sa(t),n=Ni(e,t,n,r,void 0,a),r=Fi(),null===e||El?(ia&&r&&ta(t),t.flags|=1,Tl(e,t,n,a),t.child):(Ri(e,t,a),Xl(e,t,a))}function Rl(e,t,n,r,a,i){return Sa(t),t.updateQueue=null,n=Mi(t,r,n,a),Oi(e),r=Fi(),null===e||El?(ia&&r&&ta(t),t.flags|=1,Tl(e,t,n,i),t.child):(Ri(e,t,i),Xl(e,t,i))}function Dl(e,t,n,r,a){if(Sa(t),null===t.stateNode){var i=Lr,o=n.contextType;"object"==typeof o&&null!==o&&(i=xa(o)),i=new n(r,i),t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null,i.updater=pl,t.stateNode=i,i._reactInternals=t,(i=t.stateNode).props=r,i.state=t.memoizedState,i.refs={},ni(t),o=n.contextType,i.context="object"==typeof o&&null!==o?xa(o):Lr,i.state=t.memoizedState,"function"==typeof(o=n.getDerivedStateFromProps)&&(dl(t,n,o,r),i.state=t.memoizedState),"function"==typeof n.getDerivedStateFromProps||"function"==typeof i.getSnapshotBeforeUpdate||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||(o=i.state,"function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),o!==i.state&&pl.enqueueReplaceState(i,i.state,null),ci(t,r,i,a),ui(),i.state=t.memoizedState),"function"==typeof i.componentDidMount&&(t.flags|=4194308),r=!0}else if(null===e){i=t.stateNode;var l=t.memoizedProps,s=gl(n,l);i.props=s;var u=i.context,c=n.contextType;o=Lr,"object"==typeof c&&null!==c&&(o=xa(c));var f=n.getDerivedStateFromProps;c="function"==typeof f||"function"==typeof i.getSnapshotBeforeUpdate,l=t.pendingProps!==l,c||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l||u!==o)&&ml(t,i,r,o),ti=!1;var d=t.memoizedState;i.state=d,ci(t,r,i,a),ui(),u=t.memoizedState,l||d!==u||ti?("function"==typeof f&&(dl(t,n,f,r),u=t.memoizedState),(s=ti||hl(t,n,s,r,d,u,o))?(c||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4194308)):("function"==typeof i.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=u),i.props=r,i.state=u,i.context=o,r=s):("function"==typeof i.componentDidMount&&(t.flags|=4194308),r=!1)}else{i=t.stateNode,ri(e,t),c=gl(n,o=t.memoizedProps),i.props=c,f=t.pendingProps,d=i.context,u=n.contextType,s=Lr,"object"==typeof u&&null!==u&&(s=xa(u)),(u="function"==typeof(l=n.getDerivedStateFromProps)||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(o!==f||d!==s)&&ml(t,i,r,s),ti=!1,d=t.memoizedState,i.state=d,ci(t,r,i,a),ui();var p=t.memoizedState;o!==f||d!==p||ti||null!==e&&null!==e.dependencies&&Ca(e.dependencies)?("function"==typeof l&&(dl(t,n,l,r),p=t.memoizedState),(c=ti||hl(t,n,c,r,d,p,s)||null!==e&&null!==e.dependencies&&Ca(e.dependencies))?(u||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,p,s),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,p,s)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof i.componentDidUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=p),i.props=r,i.state=p,i.context=s,r=c):("function"!=typeof i.componentDidUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),r=!1)}return i=r,Ll(e,t),r=!!(128&t.flags),i||r?(i=t.stateNode,n=r&&"function"!=typeof n.getDerivedStateFromError?null:i.render(),t.flags|=1,null!==e&&r?(t.child=nl(t,e.child,null,a),t.child=nl(t,null,n,a)):Tl(e,t,n,a),t.memoizedState=i.state,e=t.child):e=Xl(e,t,a),e}function Bl(e,t,n,r){return pa(),t.flags|=256,Tl(e,t,n,r),t.child}var Il={dehydrated:null,treeContext:null,retryLane:0,hydrationErrors:null};function jl(e){return{baseLanes:e,cachePool:$a()}}function Ul(e,t,n){return e=null!==e?e.childLanes&~n:0,t&&(e|=gu),e}function Hl(e,t,n){var r,a=t.pendingProps,i=!1,l=!!(128&t.flags);if((r=l)||(r=(null===e||null!==e.memoizedState)&&!!(2&cl.current)),r&&(i=!0,t.flags&=-129),r=!!(32&t.flags),t.flags&=-33,null===e){if(ia){if(i?ol(t):sl(),ia){var s,u=aa;if(s=u){e:{for(s=u,u=la;8!==s.nodeType;){if(!u){u=null;break e}if(null===(s=yf(s.nextSibling))){u=null;break e}}u=s}null!==u?(t.memoizedState={dehydrated:u,treeContext:null!==Gr?{id:Kr,overflow:Jr}:null,retryLane:536870912,hydrationErrors:null},(s=Rr(18,null,null,0)).stateNode=u,s.return=t,t.child=s,ra=t,aa=null,s=!0):s=!1}s||ua(t)}if(null!==(u=t.memoizedState)&&null!==(u=u.dehydrated))return vf(u)?t.lanes=32:t.lanes=536870912,null;ul(t)}return u=a.children,a=a.fallback,i?(sl(),u=$l({mode:"hidden",children:u},i=t.mode),a=Ur(a,i,n,null),u.return=t,a.return=t,u.sibling=a,t.child=u,(i=t.child).memoizedState=jl(n),i.childLanes=Ul(e,r,n),t.memoizedState=Il,a):(ol(t),ql(t,u))}if(null!==(s=e.memoizedState)&&null!==(u=s.dehydrated)){if(l)256&t.flags?(ol(t),t.flags&=-257,t=Yl(e,t,n)):null!==t.memoizedState?(sl(),t.child=e.child,t.flags|=128,t=null):(sl(),i=a.fallback,u=t.mode,a=$l({mode:"visible",children:a.children},u),(i=Ur(i,u,n,null)).flags|=2,a.return=t,i.return=t,a.sibling=i,t.child=a,nl(t,e.child,null,n),(a=t.child).memoizedState=jl(n),a.childLanes=Ul(e,r,n),t.memoizedState=Il,t=i);else if(ol(t),vf(u)){if(r=u.nextSibling&&u.nextSibling.dataset)var c=r.dgst;r=c,(a=Error(o(419))).stack="",a.digest=r,ma({value:a,source:null,stack:null}),t=Yl(e,t,n)}else if(El||ka(e,t,n,!1),r=0!==(n&e.childLanes),El||r){if(null!==(r=ru)&&0!==(a=0!==((a=42&(a=n&-n)?1:Te(a))&(r.suspendedLanes|n))?0:a)&&a!==s.retryLane)throw s.retryLane=a,Nr(e,a),Ru(r,0,a),xl;"$?"===u.data||Qu(),t=Yl(e,t,n)}else"$?"===u.data?(t.flags|=192,t.child=e.child,t=null):(e=s.treeContext,aa=yf(u.nextSibling),ra=t,ia=!0,oa=null,la=!1,null!==e&&(Wr[Xr++]=Kr,Wr[Xr++]=Jr,Wr[Xr++]=Gr,Kr=e.id,Jr=e.overflow,Gr=t),(t=ql(t,a.children)).flags|=4096);return t}return i?(sl(),i=a.fallback,u=t.mode,c=(s=e.child).sibling,(a=Br(s,{mode:"hidden",children:a.children})).subtreeFlags=65011712&s.subtreeFlags,null!==c?i=Br(c,i):(i=Ur(i,u,n,null)).flags|=2,i.return=t,a.return=t,a.sibling=i,t.child=a,a=i,i=t.child,null===(u=e.child.memoizedState)?u=jl(n):(null!==(s=u.cachePool)?(c=Oa._currentValue,s=s.parent!==c?{parent:c,pool:c}:s):s=$a(),u={baseLanes:u.baseLanes|n,cachePool:s}),i.memoizedState=u,i.childLanes=Ul(e,r,n),t.memoizedState=Il,a):(ol(t),e=(n=e.child).sibling,(n=Br(n,{mode:"visible",children:a.children})).return=t,n.sibling=null,null!==e&&(null===(r=t.deletions)?(t.deletions=[e],t.flags|=16):r.push(e)),t.child=n,t.memoizedState=null,n)}function ql(e,t){return(t=$l({mode:"visible",children:t},e.mode)).return=e,e.child=t}function $l(e,t){return(e=Rr(22,e,null,t)).lanes=0,e.stateNode={_visibility:1,_pendingMarkers:null,_retryCache:null,_transitions:null},e}function Yl(e,t,n){return nl(t,e.child,null,n),(e=ql(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Vl(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),_a(e.return,t,n)}function Ql(e,t,n,r,a){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailMode=a)}function Wl(e,t,n){var r=t.pendingProps,a=r.revealOrder,i=r.tail;if(Tl(e,t,r.children,n),2&(r=cl.current))r=1&r|2,t.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Vl(e,n,t);else if(19===e.tag)Vl(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}switch(U(cl,r),a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===fl(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),Ql(t,!1,a,n,i);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===fl(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}Ql(t,!0,n,null,i);break;case"together":Ql(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Xl(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),pu|=t.lanes,0===(n&t.childLanes)){if(null===e)return null;if(ka(e,t,n,!1),0===(n&t.childLanes))return null}if(null!==e&&t.child!==e.child)throw Error(o(153));if(null!==t.child){for(n=Br(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Br(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Gl(e,t){return 0!==(e.lanes&t)||!(null===(e=e.dependencies)||!Ca(e))}function Kl(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps)El=!0;else{if(!(Gl(e,n)||128&t.flags))return El=!1,function(e,t,n){switch(t.tag){case 3:V(t,t.stateNode.containerInfo),ba(0,Oa,e.memoizedState.cache),pa();break;case 27:case 5:W(t);break;case 4:V(t,t.stateNode.containerInfo);break;case 10:ba(0,t.type,t.memoizedProps.value);break;case 13:var r=t.memoizedState;if(null!==r)return null!==r.dehydrated?(ol(t),t.flags|=128,null):0!==(n&t.child.childLanes)?Hl(e,t,n):(ol(t),null!==(e=Xl(e,t,n))?e.sibling:null);ol(t);break;case 19:var a=!!(128&e.flags);if((r=0!==(n&t.childLanes))||(ka(e,t,n,!1),r=0!==(n&t.childLanes)),a){if(r)return Wl(e,t,n);t.flags|=128}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),U(cl,cl.current),r)break;return null;case 22:case 23:return t.lanes=0,Ol(e,t,n);case 24:ba(0,Oa,e.memoizedState.cache)}return Xl(e,t,n)}(e,t,n);El=!!(131072&e.flags)}else El=!1,ia&&1048576&t.flags&&ea(t,Qr,t.index);switch(t.lanes=0,t.tag){case 16:e:{e=t.pendingProps;var r=t.elementType,a=r._init;if(r=a(r._payload),t.type=r,"function"!=typeof r){if(null!=r){if((a=r.$$typeof)===w){t.tag=11,t=Pl(null,t,r,e,n);break e}if(a===S){t.tag=14,t=zl(null,t,r,e,n);break e}}throw t=O(r)||r,Error(o(306,t,""))}Dr(r)?(e=gl(r,e),t.tag=1,t=Dl(null,t,r,e,n)):(t.tag=0,t=Fl(null,t,r,e,n))}return t;case 0:return Fl(e,t,t.type,t.pendingProps,n);case 1:return Dl(e,t,r=t.type,a=gl(r,t.pendingProps),n);case 3:e:{if(V(t,t.stateNode.containerInfo),null===e)throw Error(o(387));r=t.pendingProps;var i=t.memoizedState;a=i.element,ri(e,t),ci(t,r,null,n);var l=t.memoizedState;if(r=l.cache,ba(0,Oa,r),r!==i.cache&&wa(t,[Oa],n,!0),ui(),r=l.element,i.isDehydrated){if(i={element:r,isDehydrated:!1,cache:l.cache},t.updateQueue.baseState=i,t.memoizedState=i,256&t.flags){t=Bl(e,t,r,n);break e}if(r!==a){ma(a=Cr(Error(o(424)),t)),t=Bl(e,t,r,n);break e}for(e=9===(e=t.stateNode.containerInfo).nodeType?e.body:"HTML"===e.nodeName?e.ownerDocument.body:e,aa=yf(e.firstChild),ra=t,ia=!0,oa=null,la=!0,n=rl(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(pa(),r===a){t=Xl(e,t,n);break e}Tl(e,t,r,n)}t=t.child}return t;case 26:return Ll(e,t),null===e?(n=Pf(t.type,null,t.pendingProps,null))?t.memoizedState=n:ia||(n=t.type,e=t.pendingProps,(r=rf($.current).createElement(n))[Oe]=t,r[Me]=e,ef(r,n,e),Ye(r),t.stateNode=r):t.memoizedState=Pf(t.type,e.memoizedProps,t.pendingProps,e.memoizedState),null;case 27:return W(t),null===e&&ia&&(r=t.stateNode=_f(t.type,t.pendingProps,$.current),ra=t,la=!0,a=aa,hf(t.type)?(bf=a,aa=yf(r.firstChild)):aa=a),Tl(e,t,t.pendingProps.children,n),Ll(e,t),null===e&&(t.flags|=4194304),t.child;case 5:return null===e&&ia&&((a=r=aa)&&(null!==(r=function(e,t,n,r){for(;1===e.nodeType;){var a=n;if(e.nodeName.toLowerCase()!==t.toLowerCase()){if(!r&&("INPUT"!==e.nodeName||"hidden"!==e.type))break}else if(r){if(!e[Ie])switch(t){case"meta":if(!e.hasAttribute("itemprop"))break;return e;case"link":if("stylesheet"===(i=e.getAttribute("rel"))&&e.hasAttribute("data-precedence"))break;if(i!==a.rel||e.getAttribute("href")!==(null==a.href||""===a.href?null:a.href)||e.getAttribute("crossorigin")!==(null==a.crossOrigin?null:a.crossOrigin)||e.getAttribute("title")!==(null==a.title?null:a.title))break;return e;case"style":if(e.hasAttribute("data-precedence"))break;return e;case"script":if(((i=e.getAttribute("src"))!==(null==a.src?null:a.src)||e.getAttribute("type")!==(null==a.type?null:a.type)||e.getAttribute("crossorigin")!==(null==a.crossOrigin?null:a.crossOrigin))&&i&&e.hasAttribute("async")&&!e.hasAttribute("itemprop"))break;return e;default:return e}}else{if("input"!==t||"hidden"!==e.type)return e;var i=null==a.name?null:""+a.name;if("hidden"===a.type&&e.getAttribute("name")===i)return e}if(null===(e=yf(e.nextSibling)))break}return null}(r,t.type,t.pendingProps,la))?(t.stateNode=r,ra=t,aa=yf(r.firstChild),la=!1,a=!0):a=!1),a||ua(t)),W(t),a=t.type,i=t.pendingProps,l=null!==e?e.memoizedProps:null,r=i.children,lf(a,i)?r=null:null!==l&&lf(a,l)&&(t.flags|=32),null!==t.memoizedState&&(a=Ni(e,t,Li,null,null,n),Xf._currentValue=a),Ll(e,t),Tl(e,t,r,n),t.child;case 6:return null===e&&ia&&((e=n=aa)&&(null!==(n=function(e,t,n){if(""===t)return null;for(;3!==e.nodeType;){if((1!==e.nodeType||"INPUT"!==e.nodeName||"hidden"!==e.type)&&!n)return null;if(null===(e=yf(e.nextSibling)))return null}return e}(n,t.pendingProps,la))?(t.stateNode=n,ra=t,aa=null,e=!0):e=!1),e||ua(t)),null;case 13:return Hl(e,t,n);case 4:return V(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=nl(t,null,r,n):Tl(e,t,r,n),t.child;case 11:return Pl(e,t,t.type,t.pendingProps,n);case 7:return Tl(e,t,t.pendingProps,n),t.child;case 8:case 12:return Tl(e,t,t.pendingProps.children,n),t.child;case 10:return r=t.pendingProps,ba(0,t.type,r.value),Tl(e,t,r.children,n),t.child;case 9:return a=t.type._context,r=t.pendingProps.children,Sa(t),r=r(a=xa(a)),t.flags|=1,Tl(e,t,r,n),t.child;case 14:return zl(e,t,t.type,t.pendingProps,n);case 15:return Nl(e,t,t.type,t.pendingProps,n);case 19:return Wl(e,t,n);case 31:return r=t.pendingProps,n=t.mode,r={mode:r.mode,children:r.children},null===e?((n=$l(r,n)).ref=t.ref,t.child=n,n.return=t,t=n):((n=Br(e.child,r)).ref=t.ref,t.child=n,n.return=t,t=n),t;case 22:return Ol(e,t,n);case 24:return Sa(t),r=xa(Oa),null===e?(null===(a=Ha())&&(a=ru,i=Ma(),a.pooledCache=i,i.refCount++,null!==i&&(a.pooledCacheLanes|=n),a=i),t.memoizedState={parent:r,cache:a},ni(t),ba(0,Oa,a)):(0!==(e.lanes&n)&&(ri(e,t),ci(t,null,null,n),ui()),a=e.memoizedState,i=t.memoizedState,a.parent!==r?(a={parent:r,cache:r},t.memoizedState=a,0===t.lanes&&(t.memoizedState=t.updateQueue.baseState=a),ba(0,Oa,r)):(r=i.cache,ba(0,Oa,r),r!==a.cache&&wa(t,[Oa],n,!0))),Tl(e,t,t.pendingProps.children,n),t.child;case 29:throw t.pendingProps}throw Error(o(156,t.tag))}function Jl(e){e.flags|=4}function Zl(e,t){if("stylesheet"!==t.type||4&t.state.loading)e.flags&=-16777217;else if(e.flags|=16777216,!Hf(t)){if(null!==(t=al.current)&&((4194048&iu)===iu?null!==il:(62914560&iu)!==iu&&!(536870912&iu)||t!==il))throw Ja=Wa,Va;e.flags|=8192}}function es(e,t){null!==t&&(e.flags|=4),16384&e.flags&&(t=22!==e.tag?ke():536870912,e.lanes|=t,vu|=t)}function ts(e,t){if(!ia)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function ns(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=65011712&a.subtreeFlags,r|=65011712&a.flags,a.return=e,a=a.sibling;else for(a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=a.subtreeFlags,r|=a.flags,a.return=e,a=a.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function rs(e,t,n){var r=t.pendingProps;switch(na(t),t.tag){case 31:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:case 1:return ns(t),null;case 3:return n=t.stateNode,r=null,null!==e&&(r=e.memoizedState.cache),t.memoizedState.cache!==r&&(t.flags|=2048),Aa(Oa),Q(),n.pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||(da(t)?Jl(t):null===e||e.memoizedState.isDehydrated&&!(256&t.flags)||(t.flags|=1024,ha())),ns(t),null;case 26:return n=t.memoizedState,null===e?(Jl(t),null!==n?(ns(t),Zl(t,n)):(ns(t),t.flags&=-16777217)):n?n!==e.memoizedState?(Jl(t),ns(t),Zl(t,n)):(ns(t),t.flags&=-16777217):(e.memoizedProps!==r&&Jl(t),ns(t),t.flags&=-16777217),null;case 27:X(t),n=$.current;var a=t.type;if(null!==e&&null!=t.stateNode)e.memoizedProps!==r&&Jl(t);else{if(!r){if(null===t.stateNode)throw Error(o(166));return ns(t),null}e=H.current,da(t)?ca(t):(e=_f(a,r,n),t.stateNode=e,Jl(t))}return ns(t),null;case 5:if(X(t),n=t.type,null!==e&&null!=t.stateNode)e.memoizedProps!==r&&Jl(t);else{if(!r){if(null===t.stateNode)throw Error(o(166));return ns(t),null}if(e=H.current,da(t))ca(t);else{switch(a=rf($.current),e){case 1:e=a.createElementNS("http://www.w3.org/2000/svg",n);break;case 2:e=a.createElementNS("http://www.w3.org/1998/Math/MathML",n);break;default:switch(n){case"svg":e=a.createElementNS("http://www.w3.org/2000/svg",n);break;case"math":e=a.createElementNS("http://www.w3.org/1998/Math/MathML",n);break;case"script":(e=a.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild);break;case"select":e="string"==typeof r.is?a.createElement("select",{is:r.is}):a.createElement("select"),r.multiple?e.multiple=!0:r.size&&(e.size=r.size);break;default:e="string"==typeof r.is?a.createElement(n,{is:r.is}):a.createElement(n)}}e[Oe]=t,e[Me]=r;e:for(a=t.child;null!==a;){if(5===a.tag||6===a.tag)e.appendChild(a.stateNode);else if(4!==a.tag&&27!==a.tag&&null!==a.child){a.child.return=a,a=a.child;continue}if(a===t)break e;for(;null===a.sibling;){if(null===a.return||a.return===t)break e;a=a.return}a.sibling.return=a.return,a=a.sibling}t.stateNode=e;e:switch(ef(e,n,r),n){case"button":case"input":case"select":case"textarea":e=!!r.autoFocus;break e;case"img":e=!0;break e;default:e=!1}e&&Jl(t)}}return ns(t),t.flags&=-16777217,null;case 6:if(e&&null!=t.stateNode)e.memoizedProps!==r&&Jl(t);else{if("string"!=typeof r&&null===t.stateNode)throw Error(o(166));if(e=$.current,da(t)){if(e=t.stateNode,n=t.memoizedProps,r=null,null!==(a=ra))switch(a.tag){case 27:case 5:r=a.memoizedProps}e[Oe]=t,(e=!!(e.nodeValue===n||null!==r&&!0===r.suppressHydrationWarning||Gc(e.nodeValue,n)))||ua(t)}else(e=rf(e).createTextNode(r))[Oe]=t,t.stateNode=e}return ns(t),null;case 13:if(r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(a=da(t),null!==r&&null!==r.dehydrated){if(null===e){if(!a)throw Error(o(318));if(!(a=null!==(a=t.memoizedState)?a.dehydrated:null))throw Error(o(317));a[Oe]=t}else pa(),!(128&t.flags)&&(t.memoizedState=null),t.flags|=4;ns(t),a=!1}else a=ha(),null!==e&&null!==e.memoizedState&&(e.memoizedState.hydrationErrors=a),a=!0;if(!a)return 256&t.flags?(ul(t),t):(ul(t),null)}if(ul(t),128&t.flags)return t.lanes=n,t;if(n=null!==r,e=null!==e&&null!==e.memoizedState,n){a=null,null!==(r=t.child).alternate&&null!==r.alternate.memoizedState&&null!==r.alternate.memoizedState.cachePool&&(a=r.alternate.memoizedState.cachePool.pool);var i=null;null!==r.memoizedState&&null!==r.memoizedState.cachePool&&(i=r.memoizedState.cachePool.pool),i!==a&&(r.flags|=2048)}return n!==e&&n&&(t.child.flags|=8192),es(t,t.updateQueue),ns(t),null;case 4:return Q(),null===e&&jc(t.stateNode.containerInfo),ns(t),null;case 10:return Aa(t.type),ns(t),null;case 19:if(j(cl),null===(a=t.memoizedState))return ns(t),null;if(r=!!(128&t.flags),null===(i=a.rendering))if(r)ts(a,!1);else{if(0!==du||null!==e&&128&e.flags)for(e=t.child;null!==e;){if(null!==(i=fl(e))){for(t.flags|=128,ts(a,!1),e=i.updateQueue,t.updateQueue=e,es(t,e),t.subtreeFlags=0,e=n,n=t.child;null!==n;)Ir(n,e),n=n.sibling;return U(cl,1&cl.current|2),t.child}e=e.sibling}null!==a.tail&&te()>wu&&(t.flags|=128,r=!0,ts(a,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=fl(i))){if(t.flags|=128,r=!0,e=e.updateQueue,t.updateQueue=e,es(t,e),ts(a,!0),null===a.tail&&"hidden"===a.tailMode&&!i.alternate&&!ia)return ns(t),null}else 2*te()-a.renderingStartTime>wu&&536870912!==n&&(t.flags|=128,r=!0,ts(a,!1),t.lanes=4194304);a.isBackwards?(i.sibling=t.child,t.child=i):(null!==(e=a.last)?e.sibling=i:t.child=i,a.last=i)}return null!==a.tail?(t=a.tail,a.rendering=t,a.tail=t.sibling,a.renderingStartTime=te(),t.sibling=null,e=cl.current,U(cl,r?1&e|2:1&e),t):(ns(t),null);case 22:case 23:return ul(t),vi(),r=null!==t.memoizedState,null!==e?null!==e.memoizedState!==r&&(t.flags|=8192):r&&(t.flags|=8192),r?!!(536870912&n)&&!(128&t.flags)&&(ns(t),6&t.subtreeFlags&&(t.flags|=8192)):ns(t),null!==(n=t.updateQueue)&&es(t,n.retryQueue),n=null,null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(n=e.memoizedState.cachePool.pool),r=null,null!==t.memoizedState&&null!==t.memoizedState.cachePool&&(r=t.memoizedState.cachePool.pool),r!==n&&(t.flags|=2048),null!==e&&j(Ua),null;case 24:return n=null,null!==e&&(n=e.memoizedState.cache),t.memoizedState.cache!==n&&(t.flags|=2048),Aa(Oa),ns(t),null;case 25:case 30:return null}throw Error(o(156,t.tag))}function as(e,t){switch(na(t),t.tag){case 1:return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return Aa(Oa),Q(),65536&(e=t.flags)&&!(128&e)?(t.flags=-65537&e|128,t):null;case 26:case 27:case 5:return X(t),null;case 13:if(ul(t),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(o(340));pa()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return j(cl),null;case 4:return Q(),null;case 10:return Aa(t.type),null;case 22:case 23:return ul(t),vi(),null!==e&&j(Ua),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 24:return Aa(Oa),null;default:return null}}function is(e,t){switch(na(t),t.tag){case 3:Aa(Oa),Q();break;case 26:case 27:case 5:X(t);break;case 4:Q();break;case 13:ul(t);break;case 19:j(cl);break;case 10:Aa(t.type);break;case 22:case 23:ul(t),vi(),null!==e&&j(Ua);break;case 24:Aa(Oa)}}function os(e,t){try{var n=t.updateQueue,r=null!==n?n.lastEffect:null;if(null!==r){var a=r.next;n=a;do{if((n.tag&e)===e){r=void 0;var i=n.create,o=n.inst;r=i(),o.destroy=r}n=n.next}while(n!==a)}}catch(e){cc(t,t.return,e)}}function ls(e,t,n){try{var r=t.updateQueue,a=null!==r?r.lastEffect:null;if(null!==a){var i=a.next;r=i;do{if((r.tag&e)===e){var o=r.inst,l=o.destroy;if(void 0!==l){o.destroy=void 0,a=t;var s=n,u=l;try{u()}catch(e){cc(a,s,e)}}}r=r.next}while(r!==i)}}catch(e){cc(t,t.return,e)}}function ss(e){var t=e.updateQueue;if(null!==t){var n=e.stateNode;try{di(t,n)}catch(t){cc(e,e.return,t)}}}function us(e,t,n){n.props=gl(e.type,e.memoizedProps),n.state=e.memoizedState;try{n.componentWillUnmount()}catch(n){cc(e,t,n)}}function cs(e,t){try{var n=e.ref;if(null!==n){switch(e.tag){case 26:case 27:case 5:var r=e.stateNode;break;default:r=e.stateNode}"function"==typeof n?e.refCleanup=n(r):n.current=r}}catch(n){cc(e,t,n)}}function fs(e,t){var n=e.ref,r=e.refCleanup;if(null!==n)if("function"==typeof r)try{r()}catch(n){cc(e,t,n)}finally{e.refCleanup=null,null!=(e=e.alternate)&&(e.refCleanup=null)}else if("function"==typeof n)try{n(null)}catch(n){cc(e,t,n)}else n.current=null}function ds(e){var t=e.type,n=e.memoizedProps,r=e.stateNode;try{e:switch(t){case"button":case"input":case"select":case"textarea":n.autoFocus&&r.focus();break e;case"img":n.src?r.src=n.src:n.srcSet&&(r.srcset=n.srcSet)}}catch(t){cc(e,e.return,t)}}function ps(e,t,n){try{var r=e.stateNode;!function(e,t,n,r){switch(t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"input":var a=null,i=null,l=null,s=null,u=null,c=null,f=null;for(h in n){var d=n[h];if(n.hasOwnProperty(h)&&null!=d)switch(h){case"checked":case"value":break;case"defaultValue":u=d;default:r.hasOwnProperty(h)||Jc(e,t,h,null,r,d)}}for(var p in r){var h=r[p];if(d=n[p],r.hasOwnProperty(p)&&(null!=h||null!=d))switch(p){case"type":i=h;break;case"name":a=h;break;case"checked":c=h;break;case"defaultChecked":f=h;break;case"value":l=h;break;case"defaultValue":s=h;break;case"children":case"dangerouslySetInnerHTML":if(null!=h)throw Error(o(137,t));break;default:h!==d&&Jc(e,t,p,h,r,d)}}return void gt(e,l,s,u,c,f,i,a);case"select":for(i in h=l=s=p=null,n)if(u=n[i],n.hasOwnProperty(i)&&null!=u)switch(i){case"value":break;case"multiple":h=u;default:r.hasOwnProperty(i)||Jc(e,t,i,null,r,u)}for(a in r)if(i=r[a],u=n[a],r.hasOwnProperty(a)&&(null!=i||null!=u))switch(a){case"value":p=i;break;case"defaultValue":s=i;break;case"multiple":l=i;default:i!==u&&Jc(e,t,a,i,r,u)}return t=s,n=l,r=h,void(null!=p?bt(e,!!n,p,!1):!!r!=!!n&&(null!=t?bt(e,!!n,t,!0):bt(e,!!n,n?[]:"",!1)));case"textarea":for(s in h=p=null,n)if(a=n[s],n.hasOwnProperty(s)&&null!=a&&!r.hasOwnProperty(s))switch(s){case"value":case"children":break;default:Jc(e,t,s,null,r,a)}for(l in r)if(a=r[l],i=n[l],r.hasOwnProperty(l)&&(null!=a||null!=i))switch(l){case"value":p=a;break;case"defaultValue":h=a;break;case"children":break;case"dangerouslySetInnerHTML":if(null!=a)throw Error(o(91));break;default:a!==i&&Jc(e,t,l,a,r,i)}return void At(e,p,h);case"option":for(var m in n)p=n[m],n.hasOwnProperty(m)&&null!=p&&!r.hasOwnProperty(m)&&("selected"===m?e.selected=!1:Jc(e,t,m,null,r,p));for(u in r)p=r[u],h=n[u],!r.hasOwnProperty(u)||p===h||null==p&&null==h||("selected"===u?e.selected=p&&"function"!=typeof p&&"symbol"!=typeof p:Jc(e,t,u,p,r,h));return;case"img":case"link":case"area":case"base":case"br":case"col":case"embed":case"hr":case"keygen":case"meta":case"param":case"source":case"track":case"wbr":case"menuitem":for(var g in n)p=n[g],n.hasOwnProperty(g)&&null!=p&&!r.hasOwnProperty(g)&&Jc(e,t,g,null,r,p);for(c in r)if(p=r[c],h=n[c],r.hasOwnProperty(c)&&p!==h&&(null!=p||null!=h))switch(c){case"children":case"dangerouslySetInnerHTML":if(null!=p)throw Error(o(137,t));break;default:Jc(e,t,c,p,r,h)}return;default:if(xt(t)){for(var v in n)p=n[v],n.hasOwnProperty(v)&&void 0!==p&&!r.hasOwnProperty(v)&&Zc(e,t,v,void 0,r,p);for(f in r)p=r[f],h=n[f],!r.hasOwnProperty(f)||p===h||void 0===p&&void 0===h||Zc(e,t,f,p,r,h);return}}for(var y in n)p=n[y],n.hasOwnProperty(y)&&null!=p&&!r.hasOwnProperty(y)&&Jc(e,t,y,null,r,p);for(d in r)p=r[d],h=n[d],!r.hasOwnProperty(d)||p===h||null==p&&null==h||Jc(e,t,d,p,r,h)}(r,e.type,n,t),r[Me]=t}catch(t){cc(e,e.return,t)}}function hs(e){return 5===e.tag||3===e.tag||26===e.tag||27===e.tag&&hf(e.type)||4===e.tag}function ms(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||hs(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(27===e.tag&&hf(e.type))continue e;if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function gs(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?(9===n.nodeType?n.body:"HTML"===n.nodeName?n.ownerDocument.body:n).insertBefore(e,t):((t=9===n.nodeType?n.body:"HTML"===n.nodeName?n.ownerDocument.body:n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Kc));else if(4!==r&&(27===r&&hf(e.type)&&(n=e.stateNode,t=null),null!==(e=e.child)))for(gs(e,t,n),e=e.sibling;null!==e;)gs(e,t,n),e=e.sibling}function vs(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&(27===r&&hf(e.type)&&(n=e.stateNode),null!==(e=e.child)))for(vs(e,t,n),e=e.sibling;null!==e;)vs(e,t,n),e=e.sibling}function ys(e){var t=e.stateNode,n=e.memoizedProps;try{for(var r=e.type,a=t.attributes;a.length;)t.removeAttributeNode(a[0]);ef(t,r,n),t[Oe]=e,t[Me]=n}catch(t){cc(e,e.return,t)}}var bs=!1,As=!1,_s=!1,ws="function"==typeof WeakSet?WeakSet:Set,ks=null;function Cs(e,t,n){var r=n.flags;switch(n.tag){case 0:case 11:case 15:Ds(e,n),4&r&&os(5,n);break;case 1:if(Ds(e,n),4&r)if(e=n.stateNode,null===t)try{e.componentDidMount()}catch(e){cc(n,n.return,e)}else{var a=gl(n.type,t.memoizedProps);t=t.memoizedState;try{e.componentDidUpdate(a,t,e.__reactInternalSnapshotBeforeUpdate)}catch(e){cc(n,n.return,e)}}64&r&&ss(n),512&r&&cs(n,n.return);break;case 3:if(Ds(e,n),64&r&&null!==(e=n.updateQueue)){if(t=null,null!==n.child)switch(n.child.tag){case 27:case 5:case 1:t=n.child.stateNode}try{di(e,t)}catch(e){cc(n,n.return,e)}}break;case 27:null===t&&4&r&&ys(n);case 26:case 5:Ds(e,n),null===t&&4&r&&ds(n),512&r&&cs(n,n.return);break;case 12:Ds(e,n);break;case 13:Ds(e,n),4&r&&zs(e,n),64&r&&null!==(e=n.memoizedState)&&null!==(e=e.dehydrated)&&function(e,t){var n=e.ownerDocument;if("$?"!==e.data||"complete"===n.readyState)t();else{var r=function(){t(),n.removeEventListener("DOMContentLoaded",r)};n.addEventListener("DOMContentLoaded",r),e._reactRetry=r}}(e,n=hc.bind(null,n));break;case 22:if(!(r=null!==n.memoizedState||bs)){t=null!==t&&null!==t.memoizedState||As,a=bs;var i=As;bs=r,(As=t)&&!i?Is(e,n,!!(8772&n.subtreeFlags)):Ds(e,n),bs=a,As=i}break;case 30:break;default:Ds(e,n)}}function Ss(e){var t=e.alternate;null!==t&&(e.alternate=null,Ss(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&je(t),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}var xs=null,Es=!1;function Ts(e,t,n){for(n=n.child;null!==n;)Ps(e,t,n),n=n.sibling}function Ps(e,t,n){if(fe&&"function"==typeof fe.onCommitFiberUnmount)try{fe.onCommitFiberUnmount(ce,n)}catch(e){}switch(n.tag){case 26:As||fs(n,t),Ts(e,t,n),n.memoizedState?n.memoizedState.count--:n.stateNode&&(n=n.stateNode).parentNode.removeChild(n);break;case 27:As||fs(n,t);var r=xs,a=Es;hf(n.type)&&(xs=n.stateNode,Es=!1),Ts(e,t,n),wf(n.stateNode),xs=r,Es=a;break;case 5:As||fs(n,t);case 6:if(r=xs,a=Es,xs=null,Ts(e,t,n),Es=a,null!==(xs=r))if(Es)try{(9===xs.nodeType?xs.body:"HTML"===xs.nodeName?xs.ownerDocument.body:xs).removeChild(n.stateNode)}catch(e){cc(n,t,e)}else try{xs.removeChild(n.stateNode)}catch(e){cc(n,t,e)}break;case 18:null!==xs&&(Es?(mf(9===(e=xs).nodeType?e.body:"HTML"===e.nodeName?e.ownerDocument.body:e,n.stateNode),Td(e)):mf(xs,n.stateNode));break;case 4:r=xs,a=Es,xs=n.stateNode.containerInfo,Es=!0,Ts(e,t,n),xs=r,Es=a;break;case 0:case 11:case 14:case 15:As||ls(2,n,t),As||ls(4,n,t),Ts(e,t,n);break;case 1:As||(fs(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount&&us(n,t,r)),Ts(e,t,n);break;case 21:Ts(e,t,n);break;case 22:As=(r=As)||null!==n.memoizedState,Ts(e,t,n),As=r;break;default:Ts(e,t,n)}}function zs(e,t){if(null===t.memoizedState&&null!==(e=t.alternate)&&null!==(e=e.memoizedState)&&null!==(e=e.dehydrated))try{Td(e)}catch(e){cc(t,t.return,e)}}function Ns(e,t){var n=function(e){switch(e.tag){case 13:case 19:var t=e.stateNode;return null===t&&(t=e.stateNode=new ws),t;case 22:return null===(t=(e=e.stateNode)._retryCache)&&(t=e._retryCache=new ws),t;default:throw Error(o(435,e.tag))}}(e);t.forEach(function(t){var r=mc.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))})}function Os(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var a=n[r],i=e,l=t,s=l;e:for(;null!==s;){switch(s.tag){case 27:if(hf(s.type)){xs=s.stateNode,Es=!1;break e}break;case 5:xs=s.stateNode,Es=!1;break e;case 3:case 4:xs=s.stateNode.containerInfo,Es=!0;break e}s=s.return}if(null===xs)throw Error(o(160));Ps(i,l,a),xs=null,Es=!1,null!==(i=a.alternate)&&(i.return=null),a.return=null}if(13878&t.subtreeFlags)for(t=t.child;null!==t;)Ls(t,e),t=t.sibling}var Ms=null;function Ls(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:Os(t,e),Fs(e),4&r&&(ls(3,e,e.return),os(3,e),ls(5,e,e.return));break;case 1:Os(t,e),Fs(e),512&r&&(As||null===n||fs(n,n.return)),64&r&&bs&&null!==(e=e.updateQueue)&&null!==(r=e.callbacks)&&(n=e.shared.hiddenCallbacks,e.shared.hiddenCallbacks=null===n?r:n.concat(r));break;case 26:var a=Ms;if(Os(t,e),Fs(e),512&r&&(As||null===n||fs(n,n.return)),4&r){var i=null!==n?n.memoizedState:null;if(r=e.memoizedState,null===n)if(null===r)if(null===e.stateNode){e:{r=e.type,n=e.memoizedProps,a=a.ownerDocument||a;t:switch(r){case"title":(!(i=a.getElementsByTagName("title")[0])||i[Ie]||i[Oe]||"http://www.w3.org/2000/svg"===i.namespaceURI||i.hasAttribute("itemprop"))&&(i=a.createElement(r),a.head.insertBefore(i,a.querySelector("head > title"))),ef(i,r,n),i[Oe]=e,Ye(i),r=i;break e;case"link":var l=jf("link","href",a).get(r+(n.href||""));if(l)for(var s=0;s<l.length;s++)if((i=l[s]).getAttribute("href")===(null==n.href||""===n.href?null:n.href)&&i.getAttribute("rel")===(null==n.rel?null:n.rel)&&i.getAttribute("title")===(null==n.title?null:n.title)&&i.getAttribute("crossorigin")===(null==n.crossOrigin?null:n.crossOrigin)){l.splice(s,1);break t}ef(i=a.createElement(r),r,n),a.head.appendChild(i);break;case"meta":if(l=jf("meta","content",a).get(r+(n.content||"")))for(s=0;s<l.length;s++)if((i=l[s]).getAttribute("content")===(null==n.content?null:""+n.content)&&i.getAttribute("name")===(null==n.name?null:n.name)&&i.getAttribute("property")===(null==n.property?null:n.property)&&i.getAttribute("http-equiv")===(null==n.httpEquiv?null:n.httpEquiv)&&i.getAttribute("charset")===(null==n.charSet?null:n.charSet)){l.splice(s,1);break t}ef(i=a.createElement(r),r,n),a.head.appendChild(i);break;default:throw Error(o(468,r))}i[Oe]=e,Ye(i),r=i}e.stateNode=r}else Uf(a,e.type,e.stateNode);else e.stateNode=Ff(a,r,e.memoizedProps);else i!==r?(null===i?null!==n.stateNode&&(n=n.stateNode).parentNode.removeChild(n):i.count--,null===r?Uf(a,e.type,e.stateNode):Ff(a,r,e.memoizedProps)):null===r&&null!==e.stateNode&&ps(e,e.memoizedProps,n.memoizedProps)}break;case 27:Os(t,e),Fs(e),512&r&&(As||null===n||fs(n,n.return)),null!==n&&4&r&&ps(e,e.memoizedProps,n.memoizedProps);break;case 5:if(Os(t,e),Fs(e),512&r&&(As||null===n||fs(n,n.return)),32&e.flags){a=e.stateNode;try{wt(a,"")}catch(t){cc(e,e.return,t)}}4&r&&null!=e.stateNode&&ps(e,a=e.memoizedProps,null!==n?n.memoizedProps:a),1024&r&&(_s=!0);break;case 6:if(Os(t,e),Fs(e),4&r){if(null===e.stateNode)throw Error(o(162));r=e.memoizedProps,n=e.stateNode;try{n.nodeValue=r}catch(t){cc(e,e.return,t)}}break;case 3:if(If=null,a=Ms,Ms=Sf(t.containerInfo),Os(t,e),Ms=a,Fs(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Td(t.containerInfo)}catch(t){cc(e,e.return,t)}_s&&(_s=!1,Rs(e));break;case 4:r=Ms,Ms=Sf(e.stateNode.containerInfo),Os(t,e),Fs(e),Ms=r;break;case 12:default:Os(t,e),Fs(e);break;case 13:Os(t,e),Fs(e),8192&e.child.flags&&null!==e.memoizedState!=(null!==n&&null!==n.memoizedState)&&(_u=te()),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,Ns(e,r));break;case 22:a=null!==e.memoizedState;var u=null!==n&&null!==n.memoizedState,c=bs,f=As;if(bs=c||a,As=f||u,Os(t,e),As=f,bs=c,Fs(e),8192&r)e:for(t=e.stateNode,t._visibility=a?-2&t._visibility:1|t._visibility,a&&(null===n||u||bs||As||Bs(e)),n=null,t=e;;){if(5===t.tag||26===t.tag){if(null===n){u=n=t;try{if(i=u.stateNode,a)"function"==typeof(l=i.style).setProperty?l.setProperty("display","none","important"):l.display="none";else{s=u.stateNode;var d=u.memoizedProps.style,p=null!=d&&d.hasOwnProperty("display")?d.display:null;s.style.display=null==p||"boolean"==typeof p?"":(""+p).trim()}}catch(e){cc(u,u.return,e)}}}else if(6===t.tag){if(null===n){u=t;try{u.stateNode.nodeValue=a?"":u.memoizedProps}catch(e){cc(u,u.return,e)}}}else if((22!==t.tag&&23!==t.tag||null===t.memoizedState||t===e)&&null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break e;for(;null===t.sibling;){if(null===t.return||t.return===e)break e;n===t&&(n=null),t=t.return}n===t&&(n=null),t.sibling.return=t.return,t=t.sibling}4&r&&null!==(r=e.updateQueue)&&null!==(n=r.retryQueue)&&(r.retryQueue=null,Ns(e,n));break;case 19:Os(t,e),Fs(e),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,Ns(e,r));case 30:case 21:}}function Fs(e){var t=e.flags;if(2&t){try{for(var n,r=e.return;null!==r;){if(hs(r)){n=r;break}r=r.return}if(null==n)throw Error(o(160));switch(n.tag){case 27:var a=n.stateNode;vs(e,ms(e),a);break;case 5:var i=n.stateNode;32&n.flags&&(wt(i,""),n.flags&=-33),vs(e,ms(e),i);break;case 3:case 4:var l=n.stateNode.containerInfo;gs(e,ms(e),l);break;default:throw Error(o(161))}}catch(t){cc(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function Rs(e){if(1024&e.subtreeFlags)for(e=e.child;null!==e;){var t=e;Rs(t),5===t.tag&&1024&t.flags&&t.stateNode.reset(),e=e.sibling}}function Ds(e,t){if(8772&t.subtreeFlags)for(t=t.child;null!==t;)Cs(e,t.alternate,t),t=t.sibling}function Bs(e){for(e=e.child;null!==e;){var t=e;switch(t.tag){case 0:case 11:case 14:case 15:ls(4,t,t.return),Bs(t);break;case 1:fs(t,t.return);var n=t.stateNode;"function"==typeof n.componentWillUnmount&&us(t,t.return,n),Bs(t);break;case 27:wf(t.stateNode);case 26:case 5:fs(t,t.return),Bs(t);break;case 22:null===t.memoizedState&&Bs(t);break;default:Bs(t)}e=e.sibling}}function Is(e,t,n){for(n=n&&!!(8772&t.subtreeFlags),t=t.child;null!==t;){var r=t.alternate,a=e,i=t,o=i.flags;switch(i.tag){case 0:case 11:case 15:Is(a,i,n),os(4,i);break;case 1:if(Is(a,i,n),"function"==typeof(a=(r=i).stateNode).componentDidMount)try{a.componentDidMount()}catch(e){cc(r,r.return,e)}if(null!==(a=(r=i).updateQueue)){var l=r.stateNode;try{var s=a.shared.hiddenCallbacks;if(null!==s)for(a.shared.hiddenCallbacks=null,a=0;a<s.length;a++)fi(s[a],l)}catch(e){cc(r,r.return,e)}}n&&64&o&&ss(i),cs(i,i.return);break;case 27:ys(i);case 26:case 5:Is(a,i,n),n&&null===r&&4&o&&ds(i),cs(i,i.return);break;case 12:Is(a,i,n);break;case 13:Is(a,i,n),n&&4&o&&zs(a,i);break;case 22:null===i.memoizedState&&Is(a,i,n),cs(i,i.return);break;case 30:break;default:Is(a,i,n)}t=t.sibling}}function js(e,t){var n=null;null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(n=e.memoizedState.cachePool.pool),e=null,null!==t.memoizedState&&null!==t.memoizedState.cachePool&&(e=t.memoizedState.cachePool.pool),e!==n&&(null!=e&&e.refCount++,null!=n&&La(n))}function Us(e,t){e=null,null!==t.alternate&&(e=t.alternate.memoizedState.cache),(t=t.memoizedState.cache)!==e&&(t.refCount++,null!=e&&La(e))}function Hs(e,t,n,r){if(10256&t.subtreeFlags)for(t=t.child;null!==t;)qs(e,t,n,r),t=t.sibling}function qs(e,t,n,r){var a=t.flags;switch(t.tag){case 0:case 11:case 15:Hs(e,t,n,r),2048&a&&os(9,t);break;case 1:case 13:default:Hs(e,t,n,r);break;case 3:Hs(e,t,n,r),2048&a&&(e=null,null!==t.alternate&&(e=t.alternate.memoizedState.cache),(t=t.memoizedState.cache)!==e&&(t.refCount++,null!=e&&La(e)));break;case 12:if(2048&a){Hs(e,t,n,r),e=t.stateNode;try{var i=t.memoizedProps,o=i.id,l=i.onPostCommit;"function"==typeof l&&l(o,null===t.alternate?"mount":"update",e.passiveEffectDuration,-0)}catch(e){cc(t,t.return,e)}}else Hs(e,t,n,r);break;case 23:break;case 22:i=t.stateNode,o=t.alternate,null!==t.memoizedState?2&i._visibility?Hs(e,t,n,r):Ys(e,t):2&i._visibility?Hs(e,t,n,r):(i._visibility|=2,$s(e,t,n,r,!!(10256&t.subtreeFlags))),2048&a&&js(o,t);break;case 24:Hs(e,t,n,r),2048&a&&Us(t.alternate,t)}}function $s(e,t,n,r,a){for(a=a&&!!(10256&t.subtreeFlags),t=t.child;null!==t;){var i=e,o=t,l=n,s=r,u=o.flags;switch(o.tag){case 0:case 11:case 15:$s(i,o,l,s,a),os(8,o);break;case 23:break;case 22:var c=o.stateNode;null!==o.memoizedState?2&c._visibility?$s(i,o,l,s,a):Ys(i,o):(c._visibility|=2,$s(i,o,l,s,a)),a&&2048&u&&js(o.alternate,o);break;case 24:$s(i,o,l,s,a),a&&2048&u&&Us(o.alternate,o);break;default:$s(i,o,l,s,a)}t=t.sibling}}function Ys(e,t){if(10256&t.subtreeFlags)for(t=t.child;null!==t;){var n=e,r=t,a=r.flags;switch(r.tag){case 22:Ys(n,r),2048&a&&js(r.alternate,r);break;case 24:Ys(n,r),2048&a&&Us(r.alternate,r);break;default:Ys(n,r)}t=t.sibling}}var Vs=8192;function Qs(e){if(e.subtreeFlags&Vs)for(e=e.child;null!==e;)Ws(e),e=e.sibling}function Ws(e){switch(e.tag){case 26:Qs(e),e.flags&Vs&&null!==e.memoizedState&&function(e,t,n){if(null===qf)throw Error(o(475));var r=qf;if(!("stylesheet"!==t.type||"string"==typeof n.media&&!1===matchMedia(n.media).matches||4&t.state.loading)){if(null===t.instance){var a=zf(n.href),i=e.querySelector(Nf(a));if(i)return null!==(e=i._p)&&"object"==typeof e&&"function"==typeof e.then&&(r.count++,r=Yf.bind(r),e.then(r,r)),t.state.loading|=4,t.instance=i,void Ye(i);i=e.ownerDocument||e,n=Of(n),(a=kf.get(a))&&Df(n,a),Ye(i=i.createElement("link"));var l=i;l._p=new Promise(function(e,t){l.onload=e,l.onerror=t}),ef(i,"link",n),t.instance=i}null===r.stylesheets&&(r.stylesheets=new Map),r.stylesheets.set(t,e),(e=t.state.preload)&&!(3&t.state.loading)&&(r.count++,t=Yf.bind(r),e.addEventListener("load",t),e.addEventListener("error",t))}}(Ms,e.memoizedState,e.memoizedProps);break;case 5:default:Qs(e);break;case 3:case 4:var t=Ms;Ms=Sf(e.stateNode.containerInfo),Qs(e),Ms=t;break;case 22:null===e.memoizedState&&(null!==(t=e.alternate)&&null!==t.memoizedState?(t=Vs,Vs=16777216,Qs(e),Vs=t):Qs(e))}}function Xs(e){var t=e.alternate;if(null!==t&&null!==(e=t.child)){t.child=null;do{t=e.sibling,e.sibling=null,e=t}while(null!==e)}}function Gs(e){var t=e.deletions;if(16&e.flags){if(null!==t)for(var n=0;n<t.length;n++){var r=t[n];ks=r,Zs(r,e)}Xs(e)}if(10256&e.subtreeFlags)for(e=e.child;null!==e;)Ks(e),e=e.sibling}function Ks(e){switch(e.tag){case 0:case 11:case 15:Gs(e),2048&e.flags&&ls(9,e,e.return);break;case 3:case 12:default:Gs(e);break;case 22:var t=e.stateNode;null!==e.memoizedState&&2&t._visibility&&(null===e.return||13!==e.return.tag)?(t._visibility&=-3,Js(e)):Gs(e)}}function Js(e){var t=e.deletions;if(16&e.flags){if(null!==t)for(var n=0;n<t.length;n++){var r=t[n];ks=r,Zs(r,e)}Xs(e)}for(e=e.child;null!==e;){switch((t=e).tag){case 0:case 11:case 15:ls(8,t,t.return),Js(t);break;case 22:2&(n=t.stateNode)._visibility&&(n._visibility&=-3,Js(t));break;default:Js(t)}e=e.sibling}}function Zs(e,t){for(;null!==ks;){var n=ks;switch(n.tag){case 0:case 11:case 15:ls(8,n,t);break;case 23:case 22:if(null!==n.memoizedState&&null!==n.memoizedState.cachePool){var r=n.memoizedState.cachePool.pool;null!=r&&r.refCount++}break;case 24:La(n.memoizedState.cache)}if(null!==(r=n.child))r.return=n,ks=r;else e:for(n=e;null!==ks;){var a=(r=ks).sibling,i=r.return;if(Ss(r),r===n){ks=null;break e}if(null!==a){a.return=i,ks=a;break e}ks=i}}}var eu={getCacheForType:function(e){var t=xa(Oa),n=t.data.get(e);return void 0===n&&(n=e(),t.data.set(e,n)),n}},tu="function"==typeof WeakMap?WeakMap:Map,nu=0,ru=null,au=null,iu=0,ou=0,lu=null,su=!1,uu=!1,cu=!1,fu=0,du=0,pu=0,hu=0,mu=0,gu=0,vu=0,yu=null,bu=null,Au=!1,_u=0,wu=1/0,ku=null,Cu=null,Su=0,xu=null,Eu=null,Tu=0,Pu=0,zu=null,Nu=null,Ou=0,Mu=null;function Lu(){return 2&nu&&0!==iu?iu&-iu:null!==L.T?0!==Da?Da:Pc():ze()}function Fu(){0===gu&&(gu=536870912&iu&&!ia?536870912:we());var e=al.current;return null!==e&&(e.flags|=32),gu}function Ru(e,t,n){(e!==ru||2!==ou&&9!==ou)&&null===e.cancelPendingCommit||(qu(e,0),ju(e,iu,gu,!1)),Se(e,n),2&nu&&e===ru||(e===ru&&(!(2&nu)&&(hu|=n),4===du&&ju(e,iu,gu,!1)),wc(e))}function Du(e,t,n){if(6&nu)throw Error(o(327));for(var r=!n&&!(124&t)&&0===(t&e.expiredLanes)||Ae(e,t),a=r?function(e,t){var n=nu;nu|=2;var r=Yu(),a=Vu();ru!==e||iu!==t?(ku=null,wu=te()+500,qu(e,t)):uu=Ae(e,t);e:for(;;)try{if(0!==ou&&null!==au){t=au;var i=lu;t:switch(ou){case 1:ou=0,lu=null,Zu(e,t,i,1);break;case 2:case 9:if(Xa(i)){ou=0,lu=null,Ju(t);break}t=function(){2!==ou&&9!==ou||ru!==e||(ou=7),wc(e)},i.then(t,t);break e;case 3:ou=7;break e;case 4:ou=5;break e;case 7:Xa(i)?(ou=0,lu=null,Ju(t)):(ou=0,lu=null,Zu(e,t,i,7));break;case 5:var l=null;switch(au.tag){case 26:l=au.memoizedState;case 5:case 27:var s=au;if(!l||Hf(l)){ou=0,lu=null;var u=s.sibling;if(null!==u)au=u;else{var c=s.return;null!==c?(au=c,ec(c)):au=null}break t}}ou=0,lu=null,Zu(e,t,i,5);break;case 6:ou=0,lu=null,Zu(e,t,i,6);break;case 8:Hu(),du=6;break e;default:throw Error(o(462))}}Gu();break}catch(t){$u(e,t)}return ya=va=null,L.H=r,L.A=a,nu=n,null!==au?0:(ru=null,iu=0,Tr(),du)}(e,t):Wu(e,t,!0),i=r;;){if(0===a){uu&&!r&&ju(e,t,0,!1);break}if(n=e.current.alternate,!i||Iu(n)){if(2===a){if(i=t,e.errorRecoveryDisabledLanes&i)var l=0;else l=0!=(l=-536870913&e.pendingLanes)?l:536870912&l?536870912:0;if(0!==l){t=l;e:{var s=e;a=yu;var u=s.current.memoizedState.isDehydrated;if(u&&(qu(s,l).flags|=256),2!==(l=Wu(s,l,!1))){if(cu&&!u){s.errorRecoveryDisabledLanes|=i,hu|=i,a=4;break e}i=bu,bu=a,null!==i&&(null===bu?bu=i:bu.push.apply(bu,i))}a=l}if(i=!1,2!==a)continue}}if(1===a){qu(e,0),ju(e,t,0,!0);break}e:{switch(r=e,i=a){case 0:case 1:throw Error(o(345));case 4:if((4194048&t)!==t)break;case 6:ju(r,t,gu,!su);break e;case 2:bu=null;break;case 3:case 5:break;default:throw Error(o(329))}if((62914560&t)===t&&10<(a=_u+300-te())){if(ju(r,t,gu,!su),0!==be(r,0,!0))break e;r.timeoutHandle=uf(Bu.bind(null,r,n,bu,ku,Au,t,gu,hu,vu,su,i,2,-0,0),a)}else Bu(r,n,bu,ku,Au,t,gu,hu,vu,su,i,0,-0,0)}break}a=Wu(e,t,!1),i=!1}wc(e)}function Bu(e,t,n,r,a,i,l,s,u,c,f,d,p,h){if(e.timeoutHandle=-1,(8192&(d=t.subtreeFlags)||!(16785408&~d))&&(qf={stylesheets:null,count:0,unsuspend:$f},Ws(t),null!==(d=function(){if(null===qf)throw Error(o(475));var e=qf;return e.stylesheets&&0===e.count&&Qf(e,e.stylesheets),0<e.count?function(t){var n=setTimeout(function(){if(e.stylesheets&&Qf(e,e.stylesheets),e.unsuspend){var t=e.unsuspend;e.unsuspend=null,t()}},6e4);return e.unsuspend=t,function(){e.unsuspend=null,clearTimeout(n)}}:null}())))return e.cancelPendingCommit=d(nc.bind(null,e,t,i,n,r,a,l,s,u,f,1,p,h)),void ju(e,i,l,!c);nc(e,t,i,n,r,a,l,s,u)}function Iu(e){for(var t=e;;){var n=t.tag;if((0===n||11===n||15===n)&&16384&t.flags&&null!==(n=t.updateQueue)&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var a=n[r],i=a.getSnapshot;a=a.value;try{if(!Xn(i(),a))return!1}catch(e){return!1}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}function ju(e,t,n,r){t&=~mu,t&=~hu,e.suspendedLanes|=t,e.pingedLanes&=~t,r&&(e.warmLanes|=t),r=e.expirationTimes;for(var a=t;0<a;){var i=31-pe(a),o=1<<i;r[i]=-1,a&=~o}0!==n&&xe(e,n,t)}function Uu(){return!!(6&nu)||(kc(0,!1),!1)}function Hu(){if(null!==au){if(0===ou)var e=au.return;else ya=va=null,Di(e=au),Xo=null,Go=0,e=au;for(;null!==e;)is(e.alternate,e),e=e.return;au=null}}function qu(e,t){var n=e.timeoutHandle;-1!==n&&(e.timeoutHandle=-1,cf(n)),null!==(n=e.cancelPendingCommit)&&(e.cancelPendingCommit=null,n()),Hu(),ru=e,au=n=Br(e.current,null),iu=t,ou=0,lu=null,su=!1,uu=Ae(e,t),cu=!1,vu=gu=mu=hu=pu=du=0,bu=yu=null,Au=!1,8&t&&(t|=32&t);var r=e.entangledLanes;if(0!==r)for(e=e.entanglements,r&=t;0<r;){var a=31-pe(r),i=1<<a;t|=e[a],r&=~i}return fu=t,Tr(),n}function $u(e,t){bi=null,L.H=Yo,t===Ya||t===Qa?(t=Za(),ou=3):t===Va?(t=Za(),ou=4):ou=t===xl?8:null!==t&&"object"==typeof t&&"function"==typeof t.then?6:1,lu=t,null===au&&(du=1,_l(e,Cr(t,e.current)))}function Yu(){var e=L.H;return L.H=Yo,null===e?Yo:e}function Vu(){var e=L.A;return L.A=eu,e}function Qu(){du=4,su||(4194048&iu)!==iu&&null!==al.current||(uu=!0),!(134217727&pu)&&!(134217727&hu)||null===ru||ju(ru,iu,gu,!1)}function Wu(e,t,n){var r=nu;nu|=2;var a=Yu(),i=Vu();ru===e&&iu===t||(ku=null,qu(e,t)),t=!1;var o=du;e:for(;;)try{if(0!==ou&&null!==au){var l=au,s=lu;switch(ou){case 8:Hu(),o=6;break e;case 3:case 2:case 9:case 6:null===al.current&&(t=!0);var u=ou;if(ou=0,lu=null,Zu(e,l,s,u),n&&uu){o=0;break e}break;default:u=ou,ou=0,lu=null,Zu(e,l,s,u)}}Xu(),o=du;break}catch(t){$u(e,t)}return t&&e.shellSuspendCounter++,ya=va=null,nu=r,L.H=a,L.A=i,null===au&&(ru=null,iu=0,Tr()),o}function Xu(){for(;null!==au;)Ku(au)}function Gu(){for(;null!==au&&!Z();)Ku(au)}function Ku(e){var t=Kl(e.alternate,e,fu);e.memoizedProps=e.pendingProps,null===t?ec(e):au=t}function Ju(e){var t=e,n=t.alternate;switch(t.tag){case 15:case 0:t=Rl(n,t,t.pendingProps,t.type,void 0,iu);break;case 11:t=Rl(n,t,t.pendingProps,t.type.render,t.ref,iu);break;case 5:Di(t);default:is(n,t),t=Kl(n,t=au=Ir(t,fu),fu)}e.memoizedProps=e.pendingProps,null===t?ec(e):au=t}function Zu(e,t,n,r){ya=va=null,Di(t),Xo=null,Go=0;var a=t.return;try{if(function(e,t,n,r,a){if(n.flags|=32768,null!==r&&"object"==typeof r&&"function"==typeof r.then){if(null!==(t=n.alternate)&&ka(t,n,a,!0),null!==(n=al.current)){switch(n.tag){case 13:return null===il?Qu():null===n.alternate&&0===du&&(du=3),n.flags&=-257,n.flags|=65536,n.lanes=a,r===Wa?n.flags|=16384:(null===(t=n.updateQueue)?n.updateQueue=new Set([r]):t.add(r),fc(e,r,a)),!1;case 22:return n.flags|=65536,r===Wa?n.flags|=16384:(null===(t=n.updateQueue)?(t={transitions:null,markerInstances:null,retryQueue:new Set([r])},n.updateQueue=t):null===(n=t.retryQueue)?t.retryQueue=new Set([r]):n.add(r),fc(e,r,a)),!1}throw Error(o(435,n.tag))}return fc(e,r,a),Qu(),!1}if(ia)return null!==(t=al.current)?(!(65536&t.flags)&&(t.flags|=256),t.flags|=65536,t.lanes=a,r!==sa&&ma(Cr(e=Error(o(422),{cause:r}),n))):(r!==sa&&ma(Cr(t=Error(o(423),{cause:r}),n)),(e=e.current.alternate).flags|=65536,a&=-a,e.lanes|=a,r=Cr(r,n),li(e,a=kl(e.stateNode,r,a)),4!==du&&(du=2)),!1;var i=Error(o(520),{cause:r});if(i=Cr(i,n),null===yu?yu=[i]:yu.push(i),4!==du&&(du=2),null===t)return!0;r=Cr(r,n),n=t;do{switch(n.tag){case 3:return n.flags|=65536,e=a&-a,n.lanes|=e,li(n,e=kl(n.stateNode,r,e)),!1;case 1:if(t=n.type,i=n.stateNode,!(128&n.flags||"function"!=typeof t.getDerivedStateFromError&&(null===i||"function"!=typeof i.componentDidCatch||null!==Cu&&Cu.has(i))))return n.flags|=65536,a&=-a,n.lanes|=a,Sl(a=Cl(a),e,n,r),li(n,a),!1}n=n.return}while(null!==n);return!1}(e,a,t,n,iu))return du=1,_l(e,Cr(n,e.current)),void(au=null)}catch(t){if(null!==a)throw au=a,t;return du=1,_l(e,Cr(n,e.current)),void(au=null)}32768&t.flags?(ia||1===r?e=!0:uu||536870912&iu?e=!1:(su=e=!0,(2===r||9===r||3===r||6===r)&&null!==(r=al.current)&&13===r.tag&&(r.flags|=16384)),tc(t,e)):ec(t)}function ec(e){var t=e;do{if(32768&t.flags)return void tc(t,su);e=t.return;var n=rs(t.alternate,t,fu);if(null!==n)return void(au=n);if(null!==(t=t.sibling))return void(au=t);au=t=e}while(null!==t);0===du&&(du=5)}function tc(e,t){do{var n=as(e.alternate,e);if(null!==n)return n.flags&=32767,void(au=n);if(null!==(n=e.return)&&(n.flags|=32768,n.subtreeFlags=0,n.deletions=null),!t&&null!==(e=e.sibling))return void(au=e);au=e=n}while(null!==e);du=6,au=null}function nc(e,t,n,r,a,i,l,s,u){e.cancelPendingCommit=null;do{lc()}while(0!==Su);if(6&nu)throw Error(o(327));if(null!==t){if(t===e.current)throw Error(o(177));if(i=t.lanes|t.childLanes,function(e,t,n,r,a,i){var o=e.pendingLanes;e.pendingLanes=n,e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0,e.expiredLanes&=n,e.entangledLanes&=n,e.errorRecoveryDisabledLanes&=n,e.shellSuspendCounter=0;var l=e.entanglements,s=e.expirationTimes,u=e.hiddenUpdates;for(n=o&~n;0<n;){var c=31-pe(n),f=1<<c;l[c]=0,s[c]=-1;var d=u[c];if(null!==d)for(u[c]=null,c=0;c<d.length;c++){var p=d[c];null!==p&&(p.lane&=-536870913)}n&=~f}0!==r&&xe(e,r,0),0!==i&&0===a&&0!==e.tag&&(e.suspendedLanes|=i&~(o&~t))}(e,n,i|=Er,l,s,u),e===ru&&(au=ru=null,iu=0),Eu=t,xu=e,Tu=n,Pu=i,zu=a,Nu=r,10256&t.subtreeFlags||10256&t.flags?(e.callbackNode=null,e.callbackPriority=0,K(ie,function(){return sc(),null})):(e.callbackNode=null,e.callbackPriority=0),r=!!(13878&t.flags),13878&t.subtreeFlags||r){r=L.T,L.T=null,a=F.p,F.p=2,l=nu,nu|=4;try{!function(e,t){if(e=e.containerInfo,tf=rd,tr(e=er(e))){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var a=r.anchorOffset,i=r.focusNode;r=r.focusOffset;try{n.nodeType,i.nodeType}catch(e){n=null;break e}var l=0,s=-1,u=-1,c=0,f=0,d=e,p=null;t:for(;;){for(var h;d!==n||0!==a&&3!==d.nodeType||(s=l+a),d!==i||0!==r&&3!==d.nodeType||(u=l+r),3===d.nodeType&&(l+=d.nodeValue.length),null!==(h=d.firstChild);)p=d,d=h;for(;;){if(d===e)break t;if(p===n&&++c===a&&(s=l),p===i&&++f===r&&(u=l),null!==(h=d.nextSibling))break;p=(d=p).parentNode}d=h}n=-1===s||-1===u?null:{start:s,end:u}}else n=null}n=n||{start:0,end:0}}else n=null;for(nf={focusedElem:e,selectionRange:n},rd=!1,ks=t;null!==ks;)if(e=(t=ks).child,1024&t.subtreeFlags&&null!==e)e.return=t,ks=e;else for(;null!==ks;){switch(i=(t=ks).alternate,e=t.flags,t.tag){case 0:case 11:case 15:case 5:case 26:case 27:case 6:case 4:case 17:break;case 1:if(1024&e&&null!==i){e=void 0,n=t,a=i.memoizedProps,i=i.memoizedState,r=n.stateNode;try{var m=gl(n.type,a,(n.elementType,n.type));e=r.getSnapshotBeforeUpdate(m,i),r.__reactInternalSnapshotBeforeUpdate=e}catch(e){cc(n,n.return,e)}}break;case 3:if(1024&e)if(9===(n=(e=t.stateNode.containerInfo).nodeType))gf(e);else if(1===n)switch(e.nodeName){case"HEAD":case"HTML":case"BODY":gf(e);break;default:e.textContent=""}break;default:if(1024&e)throw Error(o(163))}if(null!==(e=t.sibling)){e.return=t.return,ks=e;break}ks=t.return}}(e,t)}finally{nu=l,F.p=a,L.T=r}}Su=1,rc(),ac(),ic()}}function rc(){if(1===Su){Su=0;var e=xu,t=Eu,n=!!(13878&t.flags);if(13878&t.subtreeFlags||n){n=L.T,L.T=null;var r=F.p;F.p=2;var a=nu;nu|=4;try{Ls(t,e);var i=nf,o=er(e.containerInfo),l=i.focusedElem,s=i.selectionRange;if(o!==l&&l&&l.ownerDocument&&Zn(l.ownerDocument.documentElement,l)){if(null!==s&&tr(l)){var u=s.start,c=s.end;if(void 0===c&&(c=u),"selectionStart"in l)l.selectionStart=u,l.selectionEnd=Math.min(c,l.value.length);else{var f=l.ownerDocument||document,d=f&&f.defaultView||window;if(d.getSelection){var p=d.getSelection(),h=l.textContent.length,m=Math.min(s.start,h),g=void 0===s.end?m:Math.min(s.end,h);!p.extend&&m>g&&(o=g,g=m,m=o);var v=Jn(l,m),y=Jn(l,g);if(v&&y&&(1!==p.rangeCount||p.anchorNode!==v.node||p.anchorOffset!==v.offset||p.focusNode!==y.node||p.focusOffset!==y.offset)){var b=f.createRange();b.setStart(v.node,v.offset),p.removeAllRanges(),m>g?(p.addRange(b),p.extend(y.node,y.offset)):(b.setEnd(y.node,y.offset),p.addRange(b))}}}}for(f=[],p=l;p=p.parentNode;)1===p.nodeType&&f.push({element:p,left:p.scrollLeft,top:p.scrollTop});for("function"==typeof l.focus&&l.focus(),l=0;l<f.length;l++){var A=f[l];A.element.scrollLeft=A.left,A.element.scrollTop=A.top}}rd=!!tf,nf=tf=null}finally{nu=a,F.p=r,L.T=n}}e.current=t,Su=2}}function ac(){if(2===Su){Su=0;var e=xu,t=Eu,n=!!(8772&t.flags);if(8772&t.subtreeFlags||n){n=L.T,L.T=null;var r=F.p;F.p=2;var a=nu;nu|=4;try{Cs(e,t.alternate,t)}finally{nu=a,F.p=r,L.T=n}}Su=3}}function ic(){if(4===Su||3===Su){Su=0,ee();var e=xu,t=Eu,n=Tu,r=Nu;10256&t.subtreeFlags||10256&t.flags?Su=5:(Su=0,Eu=xu=null,oc(e,e.pendingLanes));var a=e.pendingLanes;if(0===a&&(Cu=null),Pe(n),t=t.stateNode,fe&&"function"==typeof fe.onCommitFiberRoot)try{fe.onCommitFiberRoot(ce,t,void 0,!(128&~t.current.flags))}catch(e){}if(null!==r){t=L.T,a=F.p,F.p=2,L.T=null;try{for(var i=e.onRecoverableError,o=0;o<r.length;o++){var l=r[o];i(l.value,{componentStack:l.stack})}}finally{L.T=t,F.p=a}}3&Tu&&lc(),wc(e),a=e.pendingLanes,4194090&n&&42&a?e===Mu?Ou++:(Ou=0,Mu=e):Ou=0,kc(0,!1)}}function oc(e,t){0===(e.pooledCacheLanes&=t)&&null!=(t=e.pooledCache)&&(e.pooledCache=null,La(t))}function lc(e){return rc(),ac(),ic(),sc()}function sc(){if(5!==Su)return!1;var e=xu,t=Pu;Pu=0;var n=Pe(Tu),r=L.T,a=F.p;try{F.p=32>n?32:n,L.T=null,n=zu,zu=null;var i=xu,l=Tu;if(Su=0,Eu=xu=null,Tu=0,6&nu)throw Error(o(331));var s=nu;if(nu|=4,Ks(i.current),qs(i,i.current,l,n),nu=s,kc(0,!1),fe&&"function"==typeof fe.onPostCommitFiberRoot)try{fe.onPostCommitFiberRoot(ce,i)}catch(e){}return!0}finally{F.p=a,L.T=r,oc(e,t)}}function uc(e,t,n){t=Cr(n,t),null!==(e=ii(e,t=kl(e.stateNode,t,2),2))&&(Se(e,2),wc(e))}function cc(e,t,n){if(3===e.tag)uc(e,e,n);else for(;null!==t;){if(3===t.tag){uc(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Cu||!Cu.has(r))){e=Cr(n,e),null!==(r=ii(t,n=Cl(2),2))&&(Sl(n,r,t,e),Se(r,2),wc(r));break}}t=t.return}}function fc(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new tu;var a=new Set;r.set(t,a)}else void 0===(a=r.get(t))&&(a=new Set,r.set(t,a));a.has(n)||(cu=!0,a.add(n),e=dc.bind(null,e,t,n),t.then(e,e))}function dc(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),e.pingedLanes|=e.suspendedLanes&n,e.warmLanes&=~n,ru===e&&(iu&n)===n&&(4===du||3===du&&(62914560&iu)===iu&&300>te()-_u?!(2&nu)&&qu(e,0):mu|=n,vu===iu&&(vu=0)),wc(e)}function pc(e,t){0===t&&(t=ke()),null!==(e=Nr(e,t))&&(Se(e,t),wc(e))}function hc(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),pc(e,n)}function mc(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,a=e.memoizedState;null!==a&&(n=a.retryLane);break;case 19:r=e.stateNode;break;case 22:r=e.stateNode._retryCache;break;default:throw Error(o(314))}null!==r&&r.delete(t),pc(e,n)}var gc=null,vc=null,yc=!1,bc=!1,Ac=!1,_c=0;function wc(e){e!==vc&&null===e.next&&(null===vc?gc=vc=e:vc=vc.next=e),bc=!0,yc||(yc=!0,df(function(){6&nu?K(re,Cc):Sc()}))}function kc(e,t){if(!Ac&&bc){Ac=!0;do{for(var n=!1,r=gc;null!==r;){if(!t)if(0!==e){var a=r.pendingLanes;if(0===a)var i=0;else{var o=r.suspendedLanes,l=r.pingedLanes;i=(1<<31-pe(42|e)+1)-1,i=201326741&(i&=a&~(o&~l))?201326741&i|1:i?2|i:0}0!==i&&(n=!0,Tc(r,i))}else i=iu,!(3&(i=be(r,r===ru?i:0,null!==r.cancelPendingCommit||-1!==r.timeoutHandle)))||Ae(r,i)||(n=!0,Tc(r,i));r=r.next}}while(n);Ac=!1}}function Cc(){Sc()}function Sc(){bc=yc=!1;var e,t=0;0!==_c&&(((e=window.event)&&"popstate"===e.type?e!==sf&&(sf=e,!0):(sf=null,!1))&&(t=_c),_c=0);for(var n=te(),r=null,a=gc;null!==a;){var i=a.next,o=xc(a,n);0===o?(a.next=null,null===r?gc=i:r.next=i,null===i&&(vc=r)):(r=a,(0!==t||3&o)&&(bc=!0)),a=i}kc(t,!1)}function xc(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,a=e.expirationTimes,i=-62914561&e.pendingLanes;0<i;){var o=31-pe(i),l=1<<o,s=a[o];-1===s?0!==(l&n)&&0===(l&r)||(a[o]=_e(l,t)):s<=t&&(e.expiredLanes|=l),i&=~l}if(n=iu,n=be(e,e===(t=ru)?n:0,null!==e.cancelPendingCommit||-1!==e.timeoutHandle),r=e.callbackNode,0===n||e===t&&(2===ou||9===ou)||null!==e.cancelPendingCommit)return null!==r&&null!==r&&J(r),e.callbackNode=null,e.callbackPriority=0;if(!(3&n)||Ae(e,n)){if((t=n&-n)===e.callbackPriority)return t;switch(null!==r&&J(r),Pe(n)){case 2:case 8:n=ae;break;case 32:default:n=ie;break;case 268435456:n=le}return r=Ec.bind(null,e),n=K(n,r),e.callbackPriority=t,e.callbackNode=n,t}return null!==r&&null!==r&&J(r),e.callbackPriority=2,e.callbackNode=null,2}function Ec(e,t){if(0!==Su&&5!==Su)return e.callbackNode=null,e.callbackPriority=0,null;var n=e.callbackNode;if(lc()&&e.callbackNode!==n)return null;var r=iu;return 0===(r=be(e,e===ru?r:0,null!==e.cancelPendingCommit||-1!==e.timeoutHandle))?null:(Du(e,r,t),xc(e,te()),null!=e.callbackNode&&e.callbackNode===n?Ec.bind(null,e):null)}function Tc(e,t){if(lc())return null;Du(e,t,!0)}function Pc(){return 0===_c&&(_c=we()),_c}function zc(e){return null==e||"symbol"==typeof e||"boolean"==typeof e?null:"function"==typeof e?e:Pt(""+e)}function Nc(e,t){var n=t.ownerDocument.createElement("input");return n.name=t.name,n.value=t.value,e.id&&n.setAttribute("form",e.id),t.parentNode.insertBefore(n,t),e=new FormData(e),n.parentNode.removeChild(n),e}for(var Oc=0;Oc<_r.length;Oc++){var Mc=_r[Oc];wr(Mc.toLowerCase(),"on"+(Mc[0].toUpperCase()+Mc.slice(1)))}wr(pr,"onAnimationEnd"),wr(hr,"onAnimationIteration"),wr(mr,"onAnimationStart"),wr("dblclick","onDoubleClick"),wr("focusin","onFocus"),wr("focusout","onBlur"),wr(gr,"onTransitionRun"),wr(vr,"onTransitionStart"),wr(yr,"onTransitionCancel"),wr(br,"onTransitionEnd"),Xe("onMouseEnter",["mouseout","mouseover"]),Xe("onMouseLeave",["mouseout","mouseover"]),Xe("onPointerEnter",["pointerout","pointerover"]),Xe("onPointerLeave",["pointerout","pointerover"]),We("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),We("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),We("onBeforeInput",["compositionend","keypress","textInput","paste"]),We("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),We("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),We("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Lc="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Fc=new Set("beforetoggle cancel close invalid load scroll scrollend toggle".split(" ").concat(Lc));function Rc(e,t){t=!!(4&t);for(var n=0;n<e.length;n++){var r=e[n],a=r.event;r=r.listeners;e:{var i=void 0;if(t)for(var o=r.length-1;0<=o;o--){var l=r[o],s=l.instance,u=l.currentTarget;if(l=l.listener,s!==i&&a.isPropagationStopped())break e;i=l,a.currentTarget=u;try{i(a)}catch(e){vl(e)}a.currentTarget=null,i=s}else for(o=0;o<r.length;o++){if(s=(l=r[o]).instance,u=l.currentTarget,l=l.listener,s!==i&&a.isPropagationStopped())break e;i=l,a.currentTarget=u;try{i(a)}catch(e){vl(e)}a.currentTarget=null,i=s}}}}function Dc(e,t){var n=t[Fe];void 0===n&&(n=t[Fe]=new Set);var r=e+"__bubble";n.has(r)||(Uc(t,e,2,!1),n.add(r))}function Bc(e,t,n){var r=0;t&&(r|=4),Uc(n,e,r,t)}var Ic="_reactListening"+Math.random().toString(36).slice(2);function jc(e){if(!e[Ic]){e[Ic]=!0,Ve.forEach(function(t){"selectionchange"!==t&&(Fc.has(t)||Bc(t,!1,e),Bc(t,!0,e))});var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Ic]||(t[Ic]=!0,Bc("selectionchange",!1,t))}}function Uc(e,t,n,r){switch(cd(t)){case 2:var a=ad;break;case 8:a=id;break;default:a=od}n=a.bind(null,t,n,e),a=void 0,!It||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(a=!0),r?void 0!==a?e.addEventListener(t,n,{capture:!0,passive:a}):e.addEventListener(t,n,!0):void 0!==a?e.addEventListener(t,n,{passive:a}):e.addEventListener(t,n,!1)}function Hc(e,t,n,r,a){var i=r;if(!(1&t||2&t||null===r))e:for(;;){if(null===r)return;var o=r.tag;if(3===o||4===o){var l=r.stateNode.containerInfo;if(l===a)break;if(4===o)for(o=r.return;null!==o;){var u=o.tag;if((3===u||4===u)&&o.stateNode.containerInfo===a)return;o=o.return}for(;null!==l;){if(null===(o=Ue(l)))return;if(5===(u=o.tag)||6===u||26===u||27===u){r=i=o;continue e}l=l.parentNode}}r=r.return}Rt(function(){var r=i,a=Nt(n),o=[];e:{var l=Ar.get(e);if(void 0!==l){var u=Zt,c=e;switch(e){case"keypress":if(0===Yt(n))break e;case"keydown":case"keyup":u=mn;break;case"focusin":c="focus",u=on;break;case"focusout":c="blur",u=on;break;case"beforeblur":case"afterblur":u=on;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=rn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=an;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=vn;break;case pr:case hr:case mr:u=ln;break;case br:u=yn;break;case"scroll":case"scrollend":u=tn;break;case"wheel":u=bn;break;case"copy":case"cut":case"paste":u=sn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=gn;break;case"toggle":case"beforetoggle":u=An}var f=!!(4&t),d=!f&&("scroll"===e||"scrollend"===e),p=f?null!==l?l+"Capture":null:l;f=[];for(var h,m=r;null!==m;){var g=m;if(h=g.stateNode,5!==(g=g.tag)&&26!==g&&27!==g||null===h||null===p||null!=(g=Dt(m,p))&&f.push(qc(m,g,h)),d)break;m=m.return}0<f.length&&(l=new u(l,c,null,n,a),o.push({event:l,listeners:f}))}}if(!(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||n===zt||!(c=n.relatedTarget||n.fromElement)||!Ue(c)&&!c[Le])&&(u||l)&&(l=a.window===a?a:(l=a.ownerDocument)?l.defaultView||l.parentWindow:window,u?(u=r,null!==(c=(c=n.relatedTarget||n.toElement)?Ue(c):null)&&(d=s(c),f=c.tag,c!==d||5!==f&&27!==f&&6!==f)&&(c=null)):(u=null,c=r),u!==c)){if(f=rn,g="onMouseLeave",p="onMouseEnter",m="mouse","pointerout"!==e&&"pointerover"!==e||(f=gn,g="onPointerLeave",p="onPointerEnter",m="pointer"),d=null==u?l:qe(u),h=null==c?l:qe(c),(l=new f(g,m+"leave",u,n,a)).target=d,l.relatedTarget=h,g=null,Ue(a)===r&&((f=new f(p,m+"enter",c,n,a)).target=h,f.relatedTarget=d,g=f),d=g,u&&c)e:{for(p=c,m=0,h=f=u;h;h=Yc(h))m++;for(h=0,g=p;g;g=Yc(g))h++;for(;0<m-h;)f=Yc(f),m--;for(;0<h-m;)p=Yc(p),h--;for(;m--;){if(f===p||null!==p&&f===p.alternate)break e;f=Yc(f),p=Yc(p)}f=null}else f=null;null!==u&&Vc(o,l,u,f,!1),null!==c&&null!==d&&Vc(o,d,c,f,!0)}if("select"===(u=(l=r?qe(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===u&&"file"===l.type)var v=Bn;else if(On(l))if(In)v=Wn;else{v=Vn;var y=Yn}else!(u=l.nodeName)||"input"!==u.toLowerCase()||"checkbox"!==l.type&&"radio"!==l.type?r&&xt(r.elementType)&&(v=Bn):v=Qn;switch(v&&(v=v(e,r))?Mn(o,v,n,a):(y&&y(e,l,r),"focusout"===e&&r&&"number"===l.type&&null!=r.memoizedProps.value&&yt(l,"number",l.value)),y=r?qe(r):window,e){case"focusin":(On(y)||"true"===y.contentEditable)&&(rr=y,ar=r,ir=null);break;case"focusout":ir=ar=rr=null;break;case"mousedown":or=!0;break;case"contextmenu":case"mouseup":case"dragend":or=!1,lr(o,n,a);break;case"selectionchange":if(nr)break;case"keydown":case"keyup":lr(o,n,a)}var b;if(wn)e:{switch(e){case"compositionstart":var A="onCompositionStart";break e;case"compositionend":A="onCompositionEnd";break e;case"compositionupdate":A="onCompositionUpdate";break e}A=void 0}else zn?Tn(e,n)&&(A="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(A="onCompositionStart");A&&(Sn&&"ko"!==n.locale&&(zn||"onCompositionStart"!==A?"onCompositionEnd"===A&&zn&&(b=$t()):(Ht="value"in(Ut=a)?Ut.value:Ut.textContent,zn=!0)),0<(y=$c(r,A)).length&&(A=new un(A,e,null,n,a),o.push({event:A,listeners:y}),(b||null!==(b=Pn(n)))&&(A.data=b))),(b=Cn?function(e,t){switch(e){case"compositionend":return Pn(t);case"keypress":return 32!==t.which?null:(En=!0,xn);case"textInput":return(e=t.data)===xn&&En?null:e;default:return null}}(e,n):function(e,t){if(zn)return"compositionend"===e||!wn&&Tn(e,t)?(e=$t(),qt=Ht=Ut=null,zn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Sn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(A=$c(r,"onBeforeInput")).length&&(y=new un("onBeforeInput","beforeinput",null,n,a),o.push({event:y,listeners:A}),y.data=b),function(e,t,n,r,a){if("submit"===t&&n&&n.stateNode===a){var i=zc((a[Me]||null).action),o=r.submitter;o&&null!==(t=(t=o[Me]||null)?zc(t.formAction):o.getAttribute("formAction"))&&(i=t,o=null);var l=new Zt("action","action",null,r,a);e.push({event:l,listeners:[{instance:null,listener:function(){if(r.defaultPrevented){if(0!==_c){var e=o?Nc(a,o):new FormData(a);No(n,{pending:!0,data:e,method:a.method,action:i},null,e)}}else"function"==typeof i&&(l.preventDefault(),e=o?Nc(a,o):new FormData(a),No(n,{pending:!0,data:e,method:a.method,action:i},i,e))},currentTarget:a}]})}}(o,e,r,n,a)}Rc(o,t)})}function qc(e,t,n){return{instance:e,listener:t,currentTarget:n}}function $c(e,t){for(var n=t+"Capture",r=[];null!==e;){var a=e,i=a.stateNode;if(5!==(a=a.tag)&&26!==a&&27!==a||null===i||(null!=(a=Dt(e,n))&&r.unshift(qc(e,a,i)),null!=(a=Dt(e,t))&&r.push(qc(e,a,i))),3===e.tag)return r;e=e.return}return[]}function Yc(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag&&27!==e.tag);return e||null}function Vc(e,t,n,r,a){for(var i=t._reactName,o=[];null!==n&&n!==r;){var l=n,s=l.alternate,u=l.stateNode;if(l=l.tag,null!==s&&s===r)break;5!==l&&26!==l&&27!==l||null===u||(s=u,a?null!=(u=Dt(n,i))&&o.unshift(qc(n,u,s)):a||null!=(u=Dt(n,i))&&o.push(qc(n,u,s))),n=n.return}0!==o.length&&e.push({event:t,listeners:o})}var Qc=/\r\n?/g,Wc=/\u0000|\uFFFD/g;function Xc(e){return("string"==typeof e?e:""+e).replace(Qc,"\n").replace(Wc,"")}function Gc(e,t){return t=Xc(t),Xc(e)===t}function Kc(){}function Jc(e,t,n,r,a,i){switch(n){case"children":"string"==typeof r?"body"===t||"textarea"===t&&""===r||wt(e,r):("number"==typeof r||"bigint"==typeof r)&&"body"!==t&&wt(e,""+r);break;case"className":nt(e,"class",r);break;case"tabIndex":nt(e,"tabindex",r);break;case"dir":case"role":case"viewBox":case"width":case"height":nt(e,n,r);break;case"style":St(e,r,i);break;case"data":if("object"!==t){nt(e,"data",r);break}case"src":case"href":if(""===r&&("a"!==t||"href"!==n)){e.removeAttribute(n);break}if(null==r||"function"==typeof r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(n);break}r=Pt(""+r),e.setAttribute(n,r);break;case"action":case"formAction":if("function"==typeof r){e.setAttribute(n,"javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')");break}if("function"==typeof i&&("formAction"===n?("input"!==t&&Jc(e,t,"name",a.name,a,null),Jc(e,t,"formEncType",a.formEncType,a,null),Jc(e,t,"formMethod",a.formMethod,a,null),Jc(e,t,"formTarget",a.formTarget,a,null)):(Jc(e,t,"encType",a.encType,a,null),Jc(e,t,"method",a.method,a,null),Jc(e,t,"target",a.target,a,null))),null==r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(n);break}r=Pt(""+r),e.setAttribute(n,r);break;case"onClick":null!=r&&(e.onclick=Kc);break;case"onScroll":null!=r&&Dc("scroll",e);break;case"onScrollEnd":null!=r&&Dc("scrollend",e);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error(o(61));if(null!=(n=r.__html)){if(null!=a.children)throw Error(o(60));e.innerHTML=n}}break;case"multiple":e.multiple=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"muted":e.muted=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"defaultValue":case"defaultChecked":case"innerHTML":case"ref":case"autoFocus":break;case"xlinkHref":if(null==r||"function"==typeof r||"boolean"==typeof r||"symbol"==typeof r){e.removeAttribute("xlink:href");break}n=Pt(""+r),e.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href",n);break;case"contentEditable":case"spellCheck":case"draggable":case"value":case"autoReverse":case"externalResourcesRequired":case"focusable":case"preserveAlpha":null!=r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,""+r):e.removeAttribute(n);break;case"inert":case"allowFullScreen":case"async":case"autoPlay":case"controls":case"default":case"defer":case"disabled":case"disablePictureInPicture":case"disableRemotePlayback":case"formNoValidate":case"hidden":case"loop":case"noModule":case"noValidate":case"open":case"playsInline":case"readOnly":case"required":case"reversed":case"scoped":case"seamless":case"itemScope":r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,""):e.removeAttribute(n);break;case"capture":case"download":!0===r?e.setAttribute(n,""):!1!==r&&null!=r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,r):e.removeAttribute(n);break;case"cols":case"rows":case"size":case"span":null!=r&&"function"!=typeof r&&"symbol"!=typeof r&&!isNaN(r)&&1<=r?e.setAttribute(n,r):e.removeAttribute(n);break;case"rowSpan":case"start":null==r||"function"==typeof r||"symbol"==typeof r||isNaN(r)?e.removeAttribute(n):e.setAttribute(n,r);break;case"popover":Dc("beforetoggle",e),Dc("toggle",e),tt(e,"popover",r);break;case"xlinkActuate":rt(e,"http://www.w3.org/1999/xlink","xlink:actuate",r);break;case"xlinkArcrole":rt(e,"http://www.w3.org/1999/xlink","xlink:arcrole",r);break;case"xlinkRole":rt(e,"http://www.w3.org/1999/xlink","xlink:role",r);break;case"xlinkShow":rt(e,"http://www.w3.org/1999/xlink","xlink:show",r);break;case"xlinkTitle":rt(e,"http://www.w3.org/1999/xlink","xlink:title",r);break;case"xlinkType":rt(e,"http://www.w3.org/1999/xlink","xlink:type",r);break;case"xmlBase":rt(e,"http://www.w3.org/XML/1998/namespace","xml:base",r);break;case"xmlLang":rt(e,"http://www.w3.org/XML/1998/namespace","xml:lang",r);break;case"xmlSpace":rt(e,"http://www.w3.org/XML/1998/namespace","xml:space",r);break;case"is":tt(e,"is",r);break;case"innerText":case"textContent":break;default:(!(2<n.length)||"o"!==n[0]&&"O"!==n[0]||"n"!==n[1]&&"N"!==n[1])&&tt(e,n=Et.get(n)||n,r)}}function Zc(e,t,n,r,a,i){switch(n){case"style":St(e,r,i);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error(o(61));if(null!=(n=r.__html)){if(null!=a.children)throw Error(o(60));e.innerHTML=n}}break;case"children":"string"==typeof r?wt(e,r):("number"==typeof r||"bigint"==typeof r)&&wt(e,""+r);break;case"onScroll":null!=r&&Dc("scroll",e);break;case"onScrollEnd":null!=r&&Dc("scrollend",e);break;case"onClick":null!=r&&(e.onclick=Kc);break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"innerHTML":case"ref":case"innerText":case"textContent":break;default:Qe.hasOwnProperty(n)||("o"!==n[0]||"n"!==n[1]||(a=n.endsWith("Capture"),t=n.slice(2,a?n.length-7:void 0),"function"==typeof(i=null!=(i=e[Me]||null)?i[n]:null)&&e.removeEventListener(t,i,a),"function"!=typeof r)?n in e?e[n]=r:!0===r?e.setAttribute(n,""):tt(e,n,r):("function"!=typeof i&&null!==i&&(n in e?e[n]=null:e.hasAttribute(n)&&e.removeAttribute(n)),e.addEventListener(t,r,a)))}}function ef(e,t,n){switch(t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"img":Dc("error",e),Dc("load",e);var r,a=!1,i=!1;for(r in n)if(n.hasOwnProperty(r)){var l=n[r];if(null!=l)switch(r){case"src":a=!0;break;case"srcSet":i=!0;break;case"children":case"dangerouslySetInnerHTML":throw Error(o(137,t));default:Jc(e,t,r,l,n,null)}}return i&&Jc(e,t,"srcSet",n.srcSet,n,null),void(a&&Jc(e,t,"src",n.src,n,null));case"input":Dc("invalid",e);var s=r=l=i=null,u=null,c=null;for(a in n)if(n.hasOwnProperty(a)){var f=n[a];if(null!=f)switch(a){case"name":i=f;break;case"type":l=f;break;case"checked":u=f;break;case"defaultChecked":c=f;break;case"value":r=f;break;case"defaultValue":s=f;break;case"children":case"dangerouslySetInnerHTML":if(null!=f)throw Error(o(137,t));break;default:Jc(e,t,a,f,n,null)}}return vt(e,r,s,u,c,l,i,!1),void ft(e);case"select":for(i in Dc("invalid",e),a=l=r=null,n)if(n.hasOwnProperty(i)&&null!=(s=n[i]))switch(i){case"value":r=s;break;case"defaultValue":l=s;break;case"multiple":a=s;default:Jc(e,t,i,s,n,null)}return t=r,n=l,e.multiple=!!a,void(null!=t?bt(e,!!a,t,!1):null!=n&&bt(e,!!a,n,!0));case"textarea":for(l in Dc("invalid",e),r=i=a=null,n)if(n.hasOwnProperty(l)&&null!=(s=n[l]))switch(l){case"value":a=s;break;case"defaultValue":i=s;break;case"children":r=s;break;case"dangerouslySetInnerHTML":if(null!=s)throw Error(o(91));break;default:Jc(e,t,l,s,n,null)}return _t(e,a,i,r),void ft(e);case"option":for(u in n)n.hasOwnProperty(u)&&null!=(a=n[u])&&("selected"===u?e.selected=a&&"function"!=typeof a&&"symbol"!=typeof a:Jc(e,t,u,a,n,null));return;case"dialog":Dc("beforetoggle",e),Dc("toggle",e),Dc("cancel",e),Dc("close",e);break;case"iframe":case"object":Dc("load",e);break;case"video":case"audio":for(a=0;a<Lc.length;a++)Dc(Lc[a],e);break;case"image":Dc("error",e),Dc("load",e);break;case"details":Dc("toggle",e);break;case"embed":case"source":case"link":Dc("error",e),Dc("load",e);case"area":case"base":case"br":case"col":case"hr":case"keygen":case"meta":case"param":case"track":case"wbr":case"menuitem":for(c in n)if(n.hasOwnProperty(c)&&null!=(a=n[c]))switch(c){case"children":case"dangerouslySetInnerHTML":throw Error(o(137,t));default:Jc(e,t,c,a,n,null)}return;default:if(xt(t)){for(f in n)n.hasOwnProperty(f)&&void 0!==(a=n[f])&&Zc(e,t,f,a,n,void 0);return}}for(s in n)n.hasOwnProperty(s)&&null!=(a=n[s])&&Jc(e,t,s,a,n,null)}var tf=null,nf=null;function rf(e){return 9===e.nodeType?e:e.ownerDocument}function af(e){switch(e){case"http://www.w3.org/2000/svg":return 1;case"http://www.w3.org/1998/Math/MathML":return 2;default:return 0}}function of(e,t){if(0===e)switch(t){case"svg":return 1;case"math":return 2;default:return 0}return 1===e&&"foreignObject"===t?0:e}function lf(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"bigint"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var sf=null,uf="function"==typeof setTimeout?setTimeout:void 0,cf="function"==typeof clearTimeout?clearTimeout:void 0,ff="function"==typeof Promise?Promise:void 0,df="function"==typeof queueMicrotask?queueMicrotask:void 0!==ff?function(e){return ff.resolve(null).then(e).catch(pf)}:uf;function pf(e){setTimeout(function(){throw e})}function hf(e){return"head"===e}function mf(e,t){var n=t,r=0,a=0;do{var i=n.nextSibling;if(e.removeChild(n),i&&8===i.nodeType)if("/$"===(n=i.data)){if(0<r&&8>r){n=r;var o=e.ownerDocument;if(1&n&&wf(o.documentElement),2&n&&wf(o.body),4&n)for(wf(n=o.head),o=n.firstChild;o;){var l=o.nextSibling,s=o.nodeName;o[Ie]||"SCRIPT"===s||"STYLE"===s||"LINK"===s&&"stylesheet"===o.rel.toLowerCase()||n.removeChild(o),o=l}}if(0===a)return e.removeChild(i),void Td(t);a--}else"$"===n||"$?"===n||"$!"===n?a++:r=n.charCodeAt(0)-48;else r=0;n=i}while(n);Td(t)}function gf(e){var t=e.firstChild;for(t&&10===t.nodeType&&(t=t.nextSibling);t;){var n=t;switch(t=t.nextSibling,n.nodeName){case"HTML":case"HEAD":case"BODY":gf(n),je(n);continue;case"SCRIPT":case"STYLE":continue;case"LINK":if("stylesheet"===n.rel.toLowerCase())continue}e.removeChild(n)}}function vf(e){return"$!"===e.data||"$?"===e.data&&"complete"===e.ownerDocument.readyState}function yf(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t||"F!"===t||"F"===t)break;if("/$"===t)return null}}return e}var bf=null;function Af(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}function _f(e,t,n){switch(t=rf(n),e){case"html":if(!(e=t.documentElement))throw Error(o(452));return e;case"head":if(!(e=t.head))throw Error(o(453));return e;case"body":if(!(e=t.body))throw Error(o(454));return e;default:throw Error(o(451))}}function wf(e){for(var t=e.attributes;t.length;)e.removeAttributeNode(t[0]);je(e)}var kf=new Map,Cf=new Set;function Sf(e){return"function"==typeof e.getRootNode?e.getRootNode():9===e.nodeType?e:e.ownerDocument}var xf=F.d;F.d={f:function(){var e=xf.f(),t=Uu();return e||t},r:function(e){var t=He(e);null!==t&&5===t.tag&&"form"===t.type?Mo(t):xf.r(e)},D:function(e){xf.D(e),Tf("dns-prefetch",e,null)},C:function(e,t){xf.C(e,t),Tf("preconnect",e,t)},L:function(e,t,n){xf.L(e,t,n);var r=Ef;if(r&&e&&t){var a='link[rel="preload"][as="'+mt(t)+'"]';"image"===t&&n&&n.imageSrcSet?(a+='[imagesrcset="'+mt(n.imageSrcSet)+'"]',"string"==typeof n.imageSizes&&(a+='[imagesizes="'+mt(n.imageSizes)+'"]')):a+='[href="'+mt(e)+'"]';var i=a;switch(t){case"style":i=zf(e);break;case"script":i=Mf(e)}kf.has(i)||(e=d({rel:"preload",href:"image"===t&&n&&n.imageSrcSet?void 0:e,as:t},n),kf.set(i,e),null!==r.querySelector(a)||"style"===t&&r.querySelector(Nf(i))||"script"===t&&r.querySelector(Lf(i))||(ef(t=r.createElement("link"),"link",e),Ye(t),r.head.appendChild(t)))}},m:function(e,t){xf.m(e,t);var n=Ef;if(n&&e){var r=t&&"string"==typeof t.as?t.as:"script",a='link[rel="modulepreload"][as="'+mt(r)+'"][href="'+mt(e)+'"]',i=a;switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":i=Mf(e)}if(!kf.has(i)&&(e=d({rel:"modulepreload",href:e},t),kf.set(i,e),null===n.querySelector(a))){switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":if(n.querySelector(Lf(i)))return}ef(r=n.createElement("link"),"link",e),Ye(r),n.head.appendChild(r)}}},X:function(e,t){xf.X(e,t);var n=Ef;if(n&&e){var r=$e(n).hoistableScripts,a=Mf(e),i=r.get(a);i||((i=n.querySelector(Lf(a)))||(e=d({src:e,async:!0},t),(t=kf.get(a))&&Bf(e,t),Ye(i=n.createElement("script")),ef(i,"link",e),n.head.appendChild(i)),i={type:"script",instance:i,count:1,state:null},r.set(a,i))}},S:function(e,t,n){xf.S(e,t,n);var r=Ef;if(r&&e){var a=$e(r).hoistableStyles,i=zf(e);t=t||"default";var o=a.get(i);if(!o){var l={loading:0,preload:null};if(o=r.querySelector(Nf(i)))l.loading=5;else{e=d({rel:"stylesheet",href:e,"data-precedence":t},n),(n=kf.get(i))&&Df(e,n);var s=o=r.createElement("link");Ye(s),ef(s,"link",e),s._p=new Promise(function(e,t){s.onload=e,s.onerror=t}),s.addEventListener("load",function(){l.loading|=1}),s.addEventListener("error",function(){l.loading|=2}),l.loading|=4,Rf(o,t,r)}o={type:"stylesheet",instance:o,count:1,state:l},a.set(i,o)}}},M:function(e,t){xf.M(e,t);var n=Ef;if(n&&e){var r=$e(n).hoistableScripts,a=Mf(e),i=r.get(a);i||((i=n.querySelector(Lf(a)))||(e=d({src:e,async:!0,type:"module"},t),(t=kf.get(a))&&Bf(e,t),Ye(i=n.createElement("script")),ef(i,"link",e),n.head.appendChild(i)),i={type:"script",instance:i,count:1,state:null},r.set(a,i))}}};var Ef="undefined"==typeof document?null:document;function Tf(e,t,n){var r=Ef;if(r&&"string"==typeof t&&t){var a=mt(t);a='link[rel="'+e+'"][href="'+a+'"]',"string"==typeof n&&(a+='[crossorigin="'+n+'"]'),Cf.has(a)||(Cf.add(a),e={rel:e,crossOrigin:n,href:t},null===r.querySelector(a)&&(ef(t=r.createElement("link"),"link",e),Ye(t),r.head.appendChild(t)))}}function Pf(e,t,n,r){var a,i,l,s,u=(u=$.current)?Sf(u):null;if(!u)throw Error(o(446));switch(e){case"meta":case"title":return null;case"style":return"string"==typeof n.precedence&&"string"==typeof n.href?(t=zf(n.href),(r=(n=$e(u).hoistableStyles).get(t))||(r={type:"style",instance:null,count:0,state:null},n.set(t,r)),r):{type:"void",instance:null,count:0,state:null};case"link":if("stylesheet"===n.rel&&"string"==typeof n.href&&"string"==typeof n.precedence){e=zf(n.href);var c=$e(u).hoistableStyles,f=c.get(e);if(f||(u=u.ownerDocument||u,f={type:"stylesheet",instance:null,count:0,state:{loading:0,preload:null}},c.set(e,f),(c=u.querySelector(Nf(e)))&&!c._p&&(f.instance=c,f.state.loading=5),kf.has(e)||(n={rel:"preload",as:"style",href:n.href,crossOrigin:n.crossOrigin,integrity:n.integrity,media:n.media,hrefLang:n.hrefLang,referrerPolicy:n.referrerPolicy},kf.set(e,n),c||(a=u,i=e,l=n,s=f.state,a.querySelector('link[rel="preload"][as="style"]['+i+"]")?s.loading=1:(i=a.createElement("link"),s.preload=i,i.addEventListener("load",function(){return s.loading|=1}),i.addEventListener("error",function(){return s.loading|=2}),ef(i,"link",l),Ye(i),a.head.appendChild(i))))),t&&null===r)throw Error(o(528,""));return f}if(t&&null!==r)throw Error(o(529,""));return null;case"script":return t=n.async,"string"==typeof(n=n.src)&&t&&"function"!=typeof t&&"symbol"!=typeof t?(t=Mf(n),(r=(n=$e(u).hoistableScripts).get(t))||(r={type:"script",instance:null,count:0,state:null},n.set(t,r)),r):{type:"void",instance:null,count:0,state:null};default:throw Error(o(444,e))}}function zf(e){return'href="'+mt(e)+'"'}function Nf(e){return'link[rel="stylesheet"]['+e+"]"}function Of(e){return d({},e,{"data-precedence":e.precedence,precedence:null})}function Mf(e){return'[src="'+mt(e)+'"]'}function Lf(e){return"script[async]"+e}function Ff(e,t,n){if(t.count++,null===t.instance)switch(t.type){case"style":var r=e.querySelector('style[data-href~="'+mt(n.href)+'"]');if(r)return t.instance=r,Ye(r),r;var a=d({},n,{"data-href":n.href,"data-precedence":n.precedence,href:null,precedence:null});return Ye(r=(e.ownerDocument||e).createElement("style")),ef(r,"style",a),Rf(r,n.precedence,e),t.instance=r;case"stylesheet":a=zf(n.href);var i=e.querySelector(Nf(a));if(i)return t.state.loading|=4,t.instance=i,Ye(i),i;r=Of(n),(a=kf.get(a))&&Df(r,a),Ye(i=(e.ownerDocument||e).createElement("link"));var l=i;return l._p=new Promise(function(e,t){l.onload=e,l.onerror=t}),ef(i,"link",r),t.state.loading|=4,Rf(i,n.precedence,e),t.instance=i;case"script":return i=Mf(n.src),(a=e.querySelector(Lf(i)))?(t.instance=a,Ye(a),a):(r=n,(a=kf.get(i))&&Bf(r=d({},n),a),Ye(a=(e=e.ownerDocument||e).createElement("script")),ef(a,"link",r),e.head.appendChild(a),t.instance=a);case"void":return null;default:throw Error(o(443,t.type))}else"stylesheet"===t.type&&!(4&t.state.loading)&&(r=t.instance,t.state.loading|=4,Rf(r,n.precedence,e));return t.instance}function Rf(e,t,n){for(var r=n.querySelectorAll('link[rel="stylesheet"][data-precedence],style[data-precedence]'),a=r.length?r[r.length-1]:null,i=a,o=0;o<r.length;o++){var l=r[o];if(l.dataset.precedence===t)i=l;else if(i!==a)break}i?i.parentNode.insertBefore(e,i.nextSibling):(t=9===n.nodeType?n.head:n).insertBefore(e,t.firstChild)}function Df(e,t){null==e.crossOrigin&&(e.crossOrigin=t.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),null==e.title&&(e.title=t.title)}function Bf(e,t){null==e.crossOrigin&&(e.crossOrigin=t.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),null==e.integrity&&(e.integrity=t.integrity)}var If=null;function jf(e,t,n){if(null===If){var r=new Map,a=If=new Map;a.set(n,r)}else(r=(a=If).get(n))||(r=new Map,a.set(n,r));if(r.has(e))return r;for(r.set(e,null),n=n.getElementsByTagName(e),a=0;a<n.length;a++){var i=n[a];if(!(i[Ie]||i[Oe]||"link"===e&&"stylesheet"===i.getAttribute("rel"))&&"http://www.w3.org/2000/svg"!==i.namespaceURI){var o=i.getAttribute(t)||"";o=e+o;var l=r.get(o);l?l.push(i):r.set(o,[i])}}return r}function Uf(e,t,n){(e=e.ownerDocument||e).head.insertBefore(n,"title"===t?e.querySelector("head > title"):null)}function Hf(e){return!!("stylesheet"!==e.type||3&e.state.loading)}var qf=null;function $f(){}function Yf(){if(this.count--,0===this.count)if(this.stylesheets)Qf(this,this.stylesheets);else if(this.unsuspend){var e=this.unsuspend;this.unsuspend=null,e()}}var Vf=null;function Qf(e,t){e.stylesheets=null,null!==e.unsuspend&&(e.count++,Vf=new Map,t.forEach(Wf,e),Vf=null,Yf.call(e))}function Wf(e,t){if(!(4&t.state.loading)){var n=Vf.get(e);if(n)var r=n.get(null);else{n=new Map,Vf.set(e,n);for(var a=e.querySelectorAll("link[data-precedence],style[data-precedence]"),i=0;i<a.length;i++){var o=a[i];"LINK"!==o.nodeName&&"not all"===o.getAttribute("media")||(n.set(o.dataset.precedence,o),r=o)}r&&n.set(null,r)}o=(a=t.instance).getAttribute("data-precedence"),(i=n.get(o)||r)===r&&n.set(null,a),n.set(o,a),this.count++,r=Yf.bind(this),a.addEventListener("load",r),a.addEventListener("error",r),i?i.parentNode.insertBefore(a,i.nextSibling):(e=9===e.nodeType?e.head:e).insertBefore(a,e.firstChild),t.state.loading|=4}}var Xf={$$typeof:_,Provider:null,Consumer:null,_currentValue:R,_currentValue2:R,_threadCount:0};function Gf(e,t,n,r,a,i,o,l){this.tag=1,this.containerInfo=e,this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.next=this.pendingContext=this.context=this.cancelPendingCommit=null,this.callbackPriority=0,this.expirationTimes=Ce(-1),this.entangledLanes=this.shellSuspendCounter=this.errorRecoveryDisabledLanes=this.expiredLanes=this.warmLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Ce(0),this.hiddenUpdates=Ce(null),this.identifierPrefix=r,this.onUncaughtError=a,this.onCaughtError=i,this.onRecoverableError=o,this.pooledCache=null,this.pooledCacheLanes=0,this.formState=l,this.incompleteTransitions=new Map}function Kf(e,t,n,r,a,i,o,l,s,u,c,f){return e=new Gf(e,t,n,o,l,s,u,f),t=1,!0===i&&(t|=24),i=Rr(3,null,null,t),e.current=i,i.stateNode=e,(t=Ma()).refCount++,e.pooledCache=t,t.refCount++,i.memoizedState={element:r,isDehydrated:n,cache:t},ni(i),e}function Jf(e){return e?e=Lr:Lr}function Zf(e,t,n,r,a,i){a=Jf(a),null===r.context?r.context=a:r.pendingContext=a,(r=ai(t)).payload={element:n},null!==(i=void 0===i?null:i)&&(r.callback=i),null!==(n=ii(e,r,t))&&(Ru(n,0,t),oi(n,e,t))}function ed(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function td(e,t){ed(e,t),(e=e.alternate)&&ed(e,t)}function nd(e){if(13===e.tag){var t=Nr(e,67108864);null!==t&&Ru(t,0,67108864),td(e,67108864)}}var rd=!0;function ad(e,t,n,r){var a=L.T;L.T=null;var i=F.p;try{F.p=2,od(e,t,n,r)}finally{F.p=i,L.T=a}}function id(e,t,n,r){var a=L.T;L.T=null;var i=F.p;try{F.p=8,od(e,t,n,r)}finally{F.p=i,L.T=a}}function od(e,t,n,r){if(rd){var a=ld(r);if(null===a)Hc(e,t,r,sd,n),bd(e,r);else if(function(e,t,n,r,a){switch(t){case"focusin":return dd=Ad(dd,e,t,n,r,a),!0;case"dragenter":return pd=Ad(pd,e,t,n,r,a),!0;case"mouseover":return hd=Ad(hd,e,t,n,r,a),!0;case"pointerover":var i=a.pointerId;return md.set(i,Ad(md.get(i)||null,e,t,n,r,a)),!0;case"gotpointercapture":return i=a.pointerId,gd.set(i,Ad(gd.get(i)||null,e,t,n,r,a)),!0}return!1}(a,e,t,n,r))r.stopPropagation();else if(bd(e,r),4&t&&-1<yd.indexOf(e)){for(;null!==a;){var i=He(a);if(null!==i)switch(i.tag){case 3:if((i=i.stateNode).current.memoizedState.isDehydrated){var o=ye(i.pendingLanes);if(0!==o){var l=i;for(l.pendingLanes|=2,l.entangledLanes|=2;o;){var s=1<<31-pe(o);l.entanglements[1]|=s,o&=~s}wc(i),!(6&nu)&&(wu=te()+500,kc(0,!1))}}break;case 13:null!==(l=Nr(i,2))&&Ru(l,0,2),Uu(),td(i,2)}if(null===(i=ld(r))&&Hc(e,t,r,sd,n),i===a)break;a=i}null!==a&&r.stopPropagation()}else Hc(e,t,r,null,n)}}function ld(e){return ud(e=Nt(e))}var sd=null;function ud(e){if(sd=null,null!==(e=Ue(e))){var t=s(e);if(null===t)e=null;else{var n=t.tag;if(13===n){if(null!==(e=u(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null)}}return sd=e,null}function cd(e){switch(e){case"beforetoggle":case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"toggle":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 2;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 8;case"message":switch(ne()){case re:return 2;case ae:return 8;case ie:case oe:return 32;case le:return 268435456;default:return 32}default:return 32}}var fd=!1,dd=null,pd=null,hd=null,md=new Map,gd=new Map,vd=[],yd="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(" ");function bd(e,t){switch(e){case"focusin":case"focusout":dd=null;break;case"dragenter":case"dragleave":pd=null;break;case"mouseover":case"mouseout":hd=null;break;case"pointerover":case"pointerout":md.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":gd.delete(t.pointerId)}}function Ad(e,t,n,r,a,i){return null===e||e.nativeEvent!==i?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:i,targetContainers:[a]},null!==t&&null!==(t=He(t))&&nd(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==a&&-1===t.indexOf(a)&&t.push(a),e)}function _d(e){var t=Ue(e.target);if(null!==t){var n=s(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=u(n)))return e.blockedOn=t,void function(e){var t=F.p;try{return F.p=e,function(){if(13===n.tag){var e=Lu();e=Te(e);var t=Nr(n,e);null!==t&&Ru(t,0,e),td(n,e)}}()}finally{F.p=t}}(e.priority)}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function wd(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=ld(e.nativeEvent);if(null!==n)return null!==(t=He(n))&&nd(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);zt=r,n.target.dispatchEvent(r),zt=null,t.shift()}return!0}function kd(e,t,n){wd(e)&&n.delete(t)}function Cd(){fd=!1,null!==dd&&wd(dd)&&(dd=null),null!==pd&&wd(pd)&&(pd=null),null!==hd&&wd(hd)&&(hd=null),md.forEach(kd),gd.forEach(kd)}function Sd(e,t){e.blockedOn===t&&(e.blockedOn=null,fd||(fd=!0,r.unstable_scheduleCallback(r.unstable_NormalPriority,Cd)))}var xd=null;function Ed(e){xd!==e&&(xd=e,r.unstable_scheduleCallback(r.unstable_NormalPriority,function(){xd===e&&(xd=null);for(var t=0;t<e.length;t+=3){var n=e[t],r=e[t+1],a=e[t+2];if("function"!=typeof r){if(null===ud(r||n))continue;break}var i=He(n);null!==i&&(e.splice(t,3),t-=3,No(i,{pending:!0,data:a,method:n.method,action:r},r,a))}}))}function Td(e){function t(t){return Sd(t,e)}null!==dd&&Sd(dd,e),null!==pd&&Sd(pd,e),null!==hd&&Sd(hd,e),md.forEach(t),gd.forEach(t);for(var n=0;n<vd.length;n++){var r=vd[n];r.blockedOn===e&&(r.blockedOn=null)}for(;0<vd.length&&null===(n=vd[0]).blockedOn;)_d(n),null===n.blockedOn&&vd.shift();if(null!=(n=(e.ownerDocument||e).$$reactFormReplay))for(r=0;r<n.length;r+=3){var a=n[r],i=n[r+1],o=a[Me]||null;if("function"==typeof i)o||Ed(n);else if(o){var l=null;if(i&&i.hasAttribute("formAction")){if(a=i,o=i[Me]||null)l=o.formAction;else if(null!==ud(a))continue}else l=o.action;"function"==typeof l?n[r+1]=l:(n.splice(r,3),r-=3),Ed(n)}}}function Pd(e){this._internalRoot=e}function zd(e){this._internalRoot=e}zd.prototype.render=Pd.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(o(409));Zf(t.current,Lu(),e,t,null,null)},zd.prototype.unmount=Pd.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;Zf(e.current,2,null,e,null,null),Uu(),t[Le]=null}},zd.prototype.unstable_scheduleHydration=function(e){if(e){var t=ze();e={blockedOn:null,target:e,priority:t};for(var n=0;n<vd.length&&0!==t&&t<vd[n].priority;n++);vd.splice(n,0,e),0===n&&_d(e)}};var Nd=a.version;if("19.1.1"!==Nd)throw Error(o(527,Nd,"19.1.1"));F.findDOMNode=function(e){var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(o(188));throw e=Object.keys(e).join(","),Error(o(268,e))}return e=function(e){var t=e.alternate;if(!t){if(null===(t=s(e)))throw Error(o(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var i=a.alternate;if(null===i){if(null!==(r=a.return)){n=r;continue}break}if(a.child===i.child){for(i=a.child;i;){if(i===n)return c(a),e;if(i===r)return c(a),t;i=i.sibling}throw Error(o(188))}if(n.return!==r.return)n=a,r=i;else{for(var l=!1,u=a.child;u;){if(u===n){l=!0,n=a,r=i;break}if(u===r){l=!0,r=a,n=i;break}u=u.sibling}if(!l){for(u=i.child;u;){if(u===n){l=!0,n=i,r=a;break}if(u===r){l=!0,r=i,n=a;break}u=u.sibling}if(!l)throw Error(o(189))}}if(n.alternate!==r)throw Error(o(190))}if(3!==n.tag)throw Error(o(188));return n.stateNode.current===n?e:t}(t),null===(e=null!==e?f(e):null)?null:e.stateNode};var Od={bundleType:0,version:"19.1.1",rendererPackageName:"react-dom",currentDispatcherRef:L,reconcilerVersion:"19.1.1"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var Md=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!Md.isDisabled&&Md.supportsFiber)try{ce=Md.inject(Od),fe=Md}catch(e){}}t.createRoot=function(e,t){if(!l(e))throw Error(o(299));var n=!1,r="",a=yl,i=bl,s=Al;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onUncaughtError&&(a=t.onUncaughtError),void 0!==t.onCaughtError&&(i=t.onCaughtError),void 0!==t.onRecoverableError&&(s=t.onRecoverableError),void 0!==t.unstable_transitionCallbacks&&t.unstable_transitionCallbacks),t=Kf(e,1,!1,null,0,n,r,a,i,s,0,null),e[Le]=t.current,jc(e),new Pd(t)},t.hydrateRoot=function(e,t,n){if(!l(e))throw Error(o(299));var r=!1,a="",i=yl,s=bl,u=Al,c=null;return null!=n&&(!0===n.unstable_strictMode&&(r=!0),void 0!==n.identifierPrefix&&(a=n.identifierPrefix),void 0!==n.onUncaughtError&&(i=n.onUncaughtError),void 0!==n.onCaughtError&&(s=n.onCaughtError),void 0!==n.onRecoverableError&&(u=n.onRecoverableError),void 0!==n.unstable_transitionCallbacks&&n.unstable_transitionCallbacks,void 0!==n.formState&&(c=n.formState)),(t=Kf(e,1,!0,t,0,r,a,i,s,u,0,c)).context=Jf(null),n=t.current,(a=ai(r=Te(r=Lu()))).callback=null,ii(n,a,r),n=r,t.current.lanes=n,Se(t,n),wc(t),e[Le]=t.current,jc(e),new zd(t)},t.version="19.1.1"},261:(e,t,n)=>{var r=n(354),a=n(314)(r);a.push([e.id,'.wrapper__n46_3{position:absolute;top:13.4375rem;left:50%;width:min(90vw,33.45rem);aspect-ratio:1;transform:translateX(-50%)}.wrapperCircle__teDr6{position:relative;width:100%;height:100%;border:1.8px solid rgba(66,86,122,.1254901961);border-radius:50%;transform-origin:center}.wrapperPoint__C9A4F{position:absolute;transform:translate(-50%, -50%);cursor:pointer}.wrapperHitbox__MReSQ{padding:1rem}.wrapperPointInner__MNLjv{width:6px;height:6px;background-color:#42567a;border-radius:50%;transition:all .3s ease;pointer-events:none;display:flex;align-items:center;justify-content:center;color:#42567a}.wrapperPointInner__MNLjv span{width:100%;text-align:center;user-select:none;will-change:transform;transform-origin:center center;transform:rotate(0deg);font-family:"PT Sans";color:#42567a;opacity:0;font-size:1.25rem;display:flex;align-items:center;justify-content:center;pointer-events:none;transition:opacity .3s ease}.wrapperPoint__C9A4F:hover .wrapperPointInner__MNLjv,.wrapperPoint__C9A4F.active__pwnHT .wrapperPointInner__MNLjv{width:54px;height:54px;background-color:#f5f5f5;border:1px solid #303e58}.wrapperPoint__C9A4F:hover .wrapperPointInner__MNLjv span,.wrapperPoint__C9A4F.active__pwnHT .wrapperPointInner__MNLjv span{opacity:1}@media(max-width: 900px){.wrapperCircle__teDr6{display:none}}',"",{version:3,sources:["webpack://./src/features/timePeriodControl/TimeCircleSwitcher/ui/TimeCircleSwitcher.module.scss"],names:[],mappings:"AAAA,gBACE,iBAAA,CACA,cAAA,CACA,QAAA,CACA,wBAAA,CACA,cAAA,CACA,0BAAA,CAGF,sBACE,iBAAA,CACA,UAAA,CACA,WAAA,CACA,8CAAA,CACA,iBAAA,CACA,uBAAA,CAGF,qBACE,iBAAA,CACA,+BAAA,CACA,cAAA,CAGF,sBACE,YAAA,CAGF,0BACE,SAAA,CACA,UAAA,CACA,wBAAA,CACA,iBAAA,CACA,uBAAA,CACA,mBAAA,CACA,YAAA,CACA,kBAAA,CACA,sBAAA,CACA,aAAA,CAGF,+BACE,UAAA,CACA,iBAAA,CACA,gBAAA,CACA,qBAAA,CACA,8BAAA,CACA,sBAAA,CACA,qBAAA,CACA,aAAA,CACA,SAAA,CACA,iBAAA,CACA,YAAA,CACA,kBAAA,CACA,sBAAA,CACA,mBAAA,CACA,2BAAA,CAGF,kHAEE,UAAA,CACA,WAAA,CACA,wBAAA,CACA,wBAAA,CAGF,4HAEE,SAAA,CAEF,yBACE,sBACE,YAAA,CAAA",sourcesContent:['.wrapper {\r\n  position: absolute;\r\n  top: 13.4375rem;\r\n  left: 50%;\r\n  width: min(90vw, 33.45rem);\r\n  aspect-ratio: 1;\r\n  transform: translateX(-50%);\r\n}\r\n\r\n.wrapperCircle {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n  border: 1.8px solid #42567a20;\r\n  border-radius: 50%;\r\n  transform-origin: center;\r\n}\r\n\r\n.wrapperPoint {\r\n  position: absolute;\r\n  transform: translate(-50%, -50%);\r\n  cursor: pointer;\r\n}\r\n\r\n.wrapperHitbox {\r\n  padding: 1rem;\r\n}\r\n\r\n.wrapperPointInner {\r\n  width: 6px;\r\n  height: 6px;\r\n  background-color: #42567a;\r\n  border-radius: 50%;\r\n  transition: all 0.3s ease;\r\n  pointer-events: none;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: #42567a;\r\n}\r\n\r\n.wrapperPointInner span {\r\n  width: 100%;\r\n  text-align: center;\r\n  user-select: none;\r\n  will-change: transform;\r\n  transform-origin: center center;\r\n  transform: rotate(0deg);\r\n  font-family: "PT Sans";\r\n  color: #42567a;\r\n  opacity: 0;\r\n  font-size: 1.25rem;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  pointer-events: none;\r\n  transition: opacity 0.3s ease;\r\n}\r\n\r\n.wrapperPoint:hover .wrapperPointInner,\r\n.wrapperPoint.active .wrapperPointInner {\r\n  width: 54px;\r\n  height: 54px;\r\n  background-color: #f5f5f5;\r\n  border: 1px solid #303e58;\r\n}\r\n\r\n.wrapperPoint:hover .wrapperPointInner span,\r\n.wrapperPoint.active .wrapperPointInner span {\r\n  opacity: 1;\r\n}\r\n@media (max-width: 900px) {\r\n  .wrapperCircle {\r\n    display: none;\r\n  }\r\n}\r\n'],sourceRoot:""}]),a.locals={wrapper:"wrapper__n46_3",wrapperCircle:"wrapperCircle__teDr6",wrapperPoint:"wrapperPoint__C9A4F",wrapperHitbox:"wrapperHitbox__MReSQ",wrapperPointInner:"wrapperPointInner__MNLjv",active:"active__pwnHT"},e.exports=a},314:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n}).join("")},t.i=function(e,n,r,a,i){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(r)for(var l=0;l<this.length;l++){var s=this[l][0];null!=s&&(o[s]=!0)}for(var u=0;u<e.length;u++){var c=[].concat(e[u]);r&&o[c[0]]||(void 0!==i&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=i),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),a&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=a):c[4]="".concat(a)),t.push(c))}},t}},338:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(247)},354:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(a," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},417:e=>{"use strict";e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},477:(e,t)=>{"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,a=e[r];if(!(0<i(a,t)))break e;e[r]=t,e[n]=a,n=r}}function r(e){return 0===e.length?null:e[0]}function a(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length,o=a>>>1;r<o;){var l=2*(r+1)-1,s=e[l],u=l+1,c=e[u];if(0>i(s,n))u<a&&0>i(c,s)?(e[r]=c,e[u]=n,r=u):(e[r]=s,e[l]=n,r=l);else{if(!(u<a&&0>i(c,n)))break e;e[r]=c,e[u]=n,r=u}}}return t}function i(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if(t.unstable_now=void 0,"object"==typeof performance&&"function"==typeof performance.now){var o=performance;t.unstable_now=function(){return o.now()}}else{var l=Date,s=l.now();t.unstable_now=function(){return l.now()-s}}var u=[],c=[],f=1,d=null,p=3,h=!1,m=!1,g=!1,v=!1,y="function"==typeof setTimeout?setTimeout:null,b="function"==typeof clearTimeout?clearTimeout:null,A="undefined"!=typeof setImmediate?setImmediate:null;function _(e){for(var t=r(c);null!==t;){if(null===t.callback)a(c);else{if(!(t.startTime<=e))break;a(c),t.sortIndex=t.expirationTime,n(u,t)}t=r(c)}}function w(e){if(g=!1,_(e),!m)if(null!==r(u))m=!0,C||(C=!0,k());else{var t=r(c);null!==t&&O(w,t.startTime-e)}}var k,C=!1,S=-1,x=5,E=-1;function T(){return!(!v&&t.unstable_now()-E<x)}function P(){if(v=!1,C){var e=t.unstable_now();E=e;var n=!0;try{e:{m=!1,g&&(g=!1,b(S),S=-1),h=!0;var i=p;try{t:{for(_(e),d=r(u);null!==d&&!(d.expirationTime>e&&T());){var o=d.callback;if("function"==typeof o){d.callback=null,p=d.priorityLevel;var l=o(d.expirationTime<=e);if(e=t.unstable_now(),"function"==typeof l){d.callback=l,_(e),n=!0;break t}d===r(u)&&a(u),_(e)}else a(u);d=r(u)}if(null!==d)n=!0;else{var s=r(c);null!==s&&O(w,s.startTime-e),n=!1}}break e}finally{d=null,p=i,h=!1}n=void 0}}finally{n?k():C=!1}}}if("function"==typeof A)k=function(){A(P)};else if("undefined"!=typeof MessageChannel){var z=new MessageChannel,N=z.port2;z.port1.onmessage=P,k=function(){N.postMessage(null)}}else k=function(){y(P,0)};function O(e,n){S=y(function(){e(t.unstable_now())},n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):x=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_requestPaint=function(){v=!0},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,a,i){var o=t.unstable_now();switch(i="object"==typeof i&&null!==i&&"number"==typeof(i=i.delay)&&0<i?o+i:o,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:f++,callback:a,priorityLevel:e,startTime:i,expirationTime:l=i+l,sortIndex:-1},i>o?(e.sortIndex=i,n(c,e),null===r(u)&&e===r(c)&&(g?(b(S),S=-1):g=!0,O(w,i-o))):(e.sortIndex=l,n(u,e),m||h||(m=!0,C||(C=!0,k()))),e},t.unstable_shouldYield=T,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},505:(e,t,n)=>{"use strict";e.exports=n.p+"04a1ce900754f86621f1.woff2"},508:(e,t,n)=>{"use strict";e.exports=n.p+"7e79a6388450f13e6f98.woff2"},513:(e,t,n)=>{var r=n(354),a=n(314)(r);a.push([e.id,".fallbackCircleWrapper__IqkIS{position:absolute;bottom:5%;left:50%;transform:translateX(-50%);display:flex;align-items:center;justify-content:center;min-height:200px}.fallbackCircle__F0iht{width:48px;height:48px;border:4px solid rgba(0,0,0,.1);border-top-color:#555;border-radius:50%;animation:spin__gfnj9 .8s linear infinite}@keyframes spin__gfnj9{to{transform:rotate(360deg)}}","",{version:3,sources:["webpack://./src/shared/ui/FallbackCircle/FallbackCircle.module.scss"],names:[],mappings:"AAAA,8BACE,iBAAA,CACA,SAAA,CACA,QAAA,CACA,0BAAA,CACA,YAAA,CACA,kBAAA,CACA,sBAAA,CACA,gBAAA,CAGF,uBACE,UAAA,CACA,WAAA,CACA,+BAAA,CACA,qBAAA,CACA,iBAAA,CACA,yCAAA,CAGF,uBACE,GACE,wBAAA,CAAA",sourcesContent:[".fallbackCircleWrapper {\r\n  position: absolute;\r\n  bottom: 5%;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  min-height: 200px;\r\n}\r\n\r\n.fallbackCircle {\r\n  width: 48px;\r\n  height: 48px;\r\n  border: 4px solid rgba(0, 0, 0, 0.1);\r\n  border-top-color: #555;\r\n  border-radius: 50%;\r\n  animation: spin 0.8s linear infinite;\r\n}\r\n\r\n@keyframes spin {\r\n  to {\r\n    transform: rotate(360deg);\r\n  }\r\n}\r\n"],sourceRoot:""}]),a.locals={fallbackCircleWrapper:"fallbackCircleWrapper__IqkIS",fallbackCircle:"fallbackCircle__F0iht",spin:"spin__gfnj9"},e.exports=a},540:(e,t,n)=>{"use strict";e.exports=n(869)},548:(e,t,n)=>{"use strict";e.exports=n.p+"c07e076467a248c2f672.woff"},659:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},698:(e,t)=>{"use strict";var n=Symbol.for("react.transitional.element"),r=Symbol.for("react.fragment");function a(e,t,r){var a=null;if(void 0!==r&&(a=""+r),void 0!==t.key&&(a=""+t.key),"key"in t)for(var i in r={},t)"key"!==i&&(r[i]=t[i]);else r=t;return t=r.ref,{$$typeof:n,type:e,key:a,ref:void 0!==t?t:null,props:r}}t.Fragment=r,t.jsx=a,t.jsxs=a},825:e=>{"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},848:(e,t,n)=>{"use strict";e.exports=n(698)},869:(e,t)=>{"use strict";var n=Symbol.for("react.transitional.element"),r=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),i=Symbol.for("react.strict_mode"),o=Symbol.for("react.profiler"),l=Symbol.for("react.consumer"),s=Symbol.for("react.context"),u=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),p=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,g={};function v(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||h}function y(){}function b(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||h}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=v.prototype;var A=b.prototype=new y;A.constructor=b,m(A,v.prototype),A.isPureReactComponent=!0;var _=Array.isArray,w={H:null,A:null,T:null,S:null,V:null},k=Object.prototype.hasOwnProperty;function C(e,t,r,a,i,o){return r=o.ref,{$$typeof:n,type:e,key:t,ref:void 0!==r?r:null,props:o}}function S(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var x=/\/+/g;function E(e,t){return"object"==typeof e&&null!==e&&null!=e.key?(n=""+e.key,r={"=":"=0",":":"=2"},"$"+n.replace(/[=:]/g,function(e){return r[e]})):t.toString(36);var n,r}function T(){}function P(e,t,a,i,o){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var s,u,c=!1;if(null===e)c=!0;else switch(l){case"bigint":case"string":case"number":c=!0;break;case"object":switch(e.$$typeof){case n:case r:c=!0;break;case d:return P((c=e._init)(e._payload),t,a,i,o)}}if(c)return o=o(e),c=""===i?"."+E(e,0):i,_(o)?(a="",null!=c&&(a=c.replace(x,"$&/")+"/"),P(o,t,a,"",function(e){return e})):null!=o&&(S(o)&&(s=o,u=a+(null==o.key||e&&e.key===o.key?"":(""+o.key).replace(x,"$&/")+"/")+c,o=C(s.type,u,void 0,0,0,s.props)),t.push(o)),1;c=0;var f,h=""===i?".":i+":";if(_(e))for(var m=0;m<e.length;m++)c+=P(i=e[m],t,a,l=h+E(i,m),o);else if("function"==typeof(m=null===(f=e)||"object"!=typeof f?null:"function"==typeof(f=p&&f[p]||f["@@iterator"])?f:null))for(e=m.call(e),m=0;!(i=e.next()).done;)c+=P(i=i.value,t,a,l=h+E(i,m++),o);else if("object"===l){if("function"==typeof e.then)return P(function(e){switch(e.status){case"fulfilled":return e.value;case"rejected":throw e.reason;default:switch("string"==typeof e.status?e.then(T,T):(e.status="pending",e.then(function(t){"pending"===e.status&&(e.status="fulfilled",e.value=t)},function(t){"pending"===e.status&&(e.status="rejected",e.reason=t)})),e.status){case"fulfilled":return e.value;case"rejected":throw e.reason}}throw e}(e),t,a,i,o);throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.")}return c}function z(e,t,n){if(null==e)return e;var r=[],a=0;return P(e,r,"","",function(e){return t.call(n,e,a++)}),r}function N(e){if(-1===e._status){var t=e._result;(t=t()).then(function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)},function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)}),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var O="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(t))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)};function M(){}t.Children={map:z,forEach:function(e,t,n){z(e,function(){t.apply(this,arguments)},n)},count:function(e){var t=0;return z(e,function(){t++}),t},toArray:function(e){return z(e,function(e){return e})||[]},only:function(e){if(!S(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=v,t.Fragment=a,t.Profiler=o,t.PureComponent=b,t.StrictMode=i,t.Suspense=c,t.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=w,t.__COMPILER_RUNTIME={__proto__:null,c:function(e){return w.H.useMemoCache(e)}},t.cache=function(e){return function(){return e.apply(null,arguments)}},t.cloneElement=function(e,t,n){if(null==e)throw Error("The argument must be a React element, but you passed "+e+".");var r=m({},e.props),a=e.key;if(null!=t)for(i in t.ref,void 0!==t.key&&(a=""+t.key),t)!k.call(t,i)||"key"===i||"__self"===i||"__source"===i||"ref"===i&&void 0===t.ref||(r[i]=t[i]);var i=arguments.length-2;if(1===i)r.children=n;else if(1<i){for(var o=Array(i),l=0;l<i;l++)o[l]=arguments[l+2];r.children=o}return C(e.type,a,void 0,0,0,r)},t.createContext=function(e){return(e={$$typeof:s,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider=e,e.Consumer={$$typeof:l,_context:e},e},t.createElement=function(e,t,n){var r,a={},i=null;if(null!=t)for(r in void 0!==t.key&&(i=""+t.key),t)k.call(t,r)&&"key"!==r&&"__self"!==r&&"__source"!==r&&(a[r]=t[r]);var o=arguments.length-2;if(1===o)a.children=n;else if(1<o){for(var l=Array(o),s=0;s<o;s++)l[s]=arguments[s+2];a.children=l}if(e&&e.defaultProps)for(r in o=e.defaultProps)void 0===a[r]&&(a[r]=o[r]);return C(e,i,void 0,0,0,a)},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=S,t.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:N}},t.memo=function(e,t){return{$$typeof:f,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=w.T,n={};w.T=n;try{var r=e(),a=w.S;null!==a&&a(n,r),"object"==typeof r&&null!==r&&"function"==typeof r.then&&r.then(M,O)}catch(e){O(e)}finally{w.T=t}},t.unstable_useCacheRefresh=function(){return w.H.useCacheRefresh()},t.use=function(e){return w.H.use(e)},t.useActionState=function(e,t,n){return w.H.useActionState(e,t,n)},t.useCallback=function(e,t){return w.H.useCallback(e,t)},t.useContext=function(e){return w.H.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e,t){return w.H.useDeferredValue(e,t)},t.useEffect=function(e,t,n){var r=w.H;if("function"==typeof n)throw Error("useEffect CRUD overload is not enabled in this build of React.");return r.useEffect(e,t)},t.useId=function(){return w.H.useId()},t.useImperativeHandle=function(e,t,n){return w.H.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return w.H.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return w.H.useLayoutEffect(e,t)},t.useMemo=function(e,t){return w.H.useMemo(e,t)},t.useOptimistic=function(e,t){return w.H.useOptimistic(e,t)},t.useReducer=function(e,t,n){return w.H.useReducer(e,t,n)},t.useRef=function(e){return w.H.useRef(e)},t.useState=function(e){return w.H.useState(e)},t.useSyncExternalStore=function(e,t,n){return w.H.useSyncExternalStore(e,t,n)},t.useTransition=function(){return w.H.useTransition()},t.version="19.1.1"},880:(e,t,n)=>{"use strict";function r(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function a(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}n.d(t,{Ay:()=>Gr});var i,o,l,s,u,c,f,d,p,h,m,g,v,y,b,A,_,w={autoSleep:120,force3D:"auto",nullTargetWarn:1,units:{lineHeight:""}},k={duration:.5,overwrite:!1,delay:0},C=1e8,S=1e-8,x=2*Math.PI,E=x/4,T=0,P=Math.sqrt,z=Math.cos,N=Math.sin,O=function(e){return"string"==typeof e},M=function(e){return"function"==typeof e},L=function(e){return"number"==typeof e},F=function(e){return void 0===e},R=function(e){return"object"==typeof e},D=function(e){return!1!==e},B=function(){return"undefined"!=typeof window},I=function(e){return M(e)||O(e)},j="function"==typeof ArrayBuffer&&ArrayBuffer.isView||function(){},U=Array.isArray,H=/(?:-?\.?\d|\.)+/gi,q=/[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,$=/[-+=.]*\d+[.e-]*\d*[a-z%]*/g,Y=/[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,V=/[+-]=-?[.\d]+/,Q=/[^,'"\[\]\s]+/gi,W=/^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i,X={},G={},K=function(e){return(G=Ee(e,X))&&Tn},J=function(e,t){return console.warn("Invalid property",e,"set to",t,"Missing plugin? gsap.registerPlugin()")},Z=function(e,t){return!t&&console.warn(e)},ee=function(e,t){return e&&(X[e]=t)&&G&&(G[e]=t)||X},te=function(){return 0},ne={suppressEvents:!0,isStart:!0,kill:!1},re={suppressEvents:!0,kill:!1},ae={suppressEvents:!0},ie={},oe=[],le={},se={},ue={},ce=30,fe=[],de="",pe=function(e){var t,n,r=e[0];if(R(r)||M(r)||(e=[e]),!(t=(r._gsap||{}).harness)){for(n=fe.length;n--&&!fe[n].targetTest(r););t=fe[n]}for(n=e.length;n--;)e[n]&&(e[n]._gsap||(e[n]._gsap=new Ut(e[n],t)))||e.splice(n,1);return e},he=function(e){return e._gsap||pe(at(e))[0]._gsap},me=function(e,t,n){return(n=e[t])&&M(n)?e[t]():F(n)&&e.getAttribute&&e.getAttribute(t)||n},ge=function(e,t){return(e=e.split(",")).forEach(t)||e},ve=function(e){return Math.round(1e5*e)/1e5||0},ye=function(e){return Math.round(1e7*e)/1e7||0},be=function(e,t){var n=t.charAt(0),r=parseFloat(t.substr(2));return e=parseFloat(e),"+"===n?e+r:"-"===n?e-r:"*"===n?e*r:e/r},Ae=function(e,t){for(var n=t.length,r=0;e.indexOf(t[r])<0&&++r<n;);return r<n},_e=function(){var e,t,n=oe.length,r=oe.slice(0);for(le={},oe.length=0,e=0;e<n;e++)(t=r[e])&&t._lazy&&(t.render(t._lazy[0],t._lazy[1],!0)._lazy=0)},we=function(e){return!!(e._initted||e._startAt||e.add)},ke=function(e,t,n,r){oe.length&&!o&&_e(),e.render(t,n,r||!!(o&&t<0&&we(e))),oe.length&&!o&&_e()},Ce=function(e){var t=parseFloat(e);return(t||0===t)&&(e+"").match(Q).length<2?t:O(e)?e.trim():e},Se=function(e){return e},xe=function(e,t){for(var n in t)n in e||(e[n]=t[n]);return e},Ee=function(e,t){for(var n in t)e[n]=t[n];return e},Te=function e(t,n){for(var r in n)"__proto__"!==r&&"constructor"!==r&&"prototype"!==r&&(t[r]=R(n[r])?e(t[r]||(t[r]={}),n[r]):n[r]);return t},Pe=function(e,t){var n,r={};for(n in e)n in t||(r[n]=e[n]);return r},ze=function(e){var t,n=e.parent||s,r=e.keyframes?(t=U(e.keyframes),function(e,n){for(var r in n)r in e||"duration"===r&&t||"ease"===r||(e[r]=n[r])}):xe;if(D(e.inherit))for(;n;)r(e,n.vars.defaults),n=n.parent||n._dp;return e},Ne=function(e,t,n,r,a){void 0===n&&(n="_first"),void 0===r&&(r="_last");var i,o=e[r];if(a)for(i=t[a];o&&o[a]>i;)o=o._prev;return o?(t._next=o._next,o._next=t):(t._next=e[n],e[n]=t),t._next?t._next._prev=t:e[r]=t,t._prev=o,t.parent=t._dp=e,t},Oe=function(e,t,n,r){void 0===n&&(n="_first"),void 0===r&&(r="_last");var a=t._prev,i=t._next;a?a._next=i:e[n]===t&&(e[n]=i),i?i._prev=a:e[r]===t&&(e[r]=a),t._next=t._prev=t.parent=null},Me=function(e,t){e.parent&&(!t||e.parent.autoRemoveChildren)&&e.parent.remove&&e.parent.remove(e),e._act=0},Le=function(e,t){if(e&&(!t||t._end>e._dur||t._start<0))for(var n=e;n;)n._dirty=1,n=n.parent;return e},Fe=function(e,t,n,r){return e._startAt&&(o?e._startAt.revert(re):e.vars.immediateRender&&!e.vars.autoRevert||e._startAt.render(t,!0,r))},Re=function e(t){return!t||t._ts&&e(t.parent)},De=function(e){return e._repeat?Be(e._tTime,e=e.duration()+e._rDelay)*e:0},Be=function(e,t){var n=Math.floor(e=ye(e/t));return e&&n===e?n-1:n},Ie=function(e,t){return(e-t._start)*t._ts+(t._ts>=0?0:t._dirty?t.totalDuration():t._tDur)},je=function(e){return e._end=ye(e._start+(e._tDur/Math.abs(e._ts||e._rts||S)||0))},Ue=function(e,t){var n=e._dp;return n&&n.smoothChildTiming&&e._ts&&(e._start=ye(n._time-(e._ts>0?t/e._ts:((e._dirty?e.totalDuration():e._tDur)-t)/-e._ts)),je(e),n._dirty||Le(n,e)),e},He=function(e,t){var n;if((t._time||!t._dur&&t._initted||t._start<e._time&&(t._dur||!t.add))&&(n=Ie(e.rawTime(),t),(!t._dur||et(0,t.totalDuration(),n)-t._tTime>S)&&t.render(n,!0)),Le(e,t)._dp&&e._initted&&e._time>=e._dur&&e._ts){if(e._dur<e.duration())for(n=e;n._dp;)n.rawTime()>=0&&n.totalTime(n._tTime),n=n._dp;e._zTime=-1e-8}},qe=function(e,t,n,r){return t.parent&&Me(t),t._start=ye((L(n)?n:n||e!==s?Ke(e,n,t):e._time)+t._delay),t._end=ye(t._start+(t.totalDuration()/Math.abs(t.timeScale())||0)),Ne(e,t,"_first","_last",e._sort?"_start":0),Qe(t)||(e._recent=t),r||He(e,t),e._ts<0&&Ue(e,e._tTime),e},$e=function(e,t){return(X.ScrollTrigger||J("scrollTrigger",t))&&X.ScrollTrigger.create(t,e)},Ye=function(e,t,n,r,a){return Xt(e,t,a),e._initted?!n&&e._pt&&!o&&(e._dur&&!1!==e.vars.lazy||!e._dur&&e.vars.lazy)&&p!==Tt.frame?(oe.push(e),e._lazy=[a,r],1):void 0:1},Ve=function e(t){var n=t.parent;return n&&n._ts&&n._initted&&!n._lock&&(n.rawTime()<0||e(n))},Qe=function(e){var t=e.data;return"isFromStart"===t||"isStart"===t},We=function(e,t,n,r){var a=e._repeat,i=ye(t)||0,o=e._tTime/e._tDur;return o&&!r&&(e._time*=i/e._dur),e._dur=i,e._tDur=a?a<0?1e10:ye(i*(a+1)+e._rDelay*a):i,o>0&&!r&&Ue(e,e._tTime=e._tDur*o),e.parent&&je(e),n||Le(e.parent,e),e},Xe=function(e){return e instanceof qt?Le(e):We(e,e._dur)},Ge={_start:0,endTime:te,totalDuration:te},Ke=function e(t,n,r){var a,i,o,l=t.labels,s=t._recent||Ge,u=t.duration()>=C?s.endTime(!1):t._dur;return O(n)&&(isNaN(n)||n in l)?(i=n.charAt(0),o="%"===n.substr(-1),a=n.indexOf("="),"<"===i||">"===i?(a>=0&&(n=n.replace(/=/,"")),("<"===i?s._start:s.endTime(s._repeat>=0))+(parseFloat(n.substr(1))||0)*(o?(a<0?s:r).totalDuration()/100:1)):a<0?(n in l||(l[n]=u),l[n]):(i=parseFloat(n.charAt(a-1)+n.substr(a+1)),o&&r&&(i=i/100*(U(r)?r[0]:r).totalDuration()),a>1?e(t,n.substr(0,a-1),r)+i:u+i)):null==n?u:+n},Je=function(e,t,n){var r,a,i=L(t[1]),o=(i?2:1)+(e<2?0:1),l=t[o];if(i&&(l.duration=t[1]),l.parent=n,e){for(r=l,a=n;a&&!("immediateRender"in r);)r=a.vars.defaults||{},a=D(a.vars.inherit)&&a.parent;l.immediateRender=D(r.immediateRender),e<2?l.runBackwards=1:l.startAt=t[o-1]}return new en(t[0],l,t[o+1])},Ze=function(e,t){return e||0===e?t(e):t},et=function(e,t,n){return n<e?e:n>t?t:n},tt=function(e,t){return O(e)&&(t=W.exec(e))?t[1]:""},nt=[].slice,rt=function(e,t){return e&&R(e)&&"length"in e&&(!t&&!e.length||e.length-1 in e&&R(e[0]))&&!e.nodeType&&e!==u},at=function(e,t,n){return l&&!t&&l.selector?l.selector(e):!O(e)||n||!c&&Pt()?U(e)?function(e,t,n){return void 0===n&&(n=[]),e.forEach(function(e){var r;return O(e)&&!t||rt(e,1)?(r=n).push.apply(r,at(e)):n.push(e)})||n}(e,n):rt(e)?nt.call(e,0):e?[e]:[]:nt.call((t||f).querySelectorAll(e),0)},it=function(e){return e=at(e)[0]||Z("Invalid scope")||{},function(t){var n=e.current||e.nativeElement||e;return at(t,n.querySelectorAll?n:n===e?Z("Invalid scope")||f.createElement("div"):e)}},ot=function(e){return e.sort(function(){return.5-Math.random()})},lt=function(e){if(M(e))return e;var t=R(e)?e:{each:e},n=Rt(t.ease),r=t.from||0,a=parseFloat(t.base)||0,i={},o=r>0&&r<1,l=isNaN(r)||o,s=t.axis,u=r,c=r;return O(r)?u=c={center:.5,edges:.5,end:1}[r]||0:!o&&l&&(u=r[0],c=r[1]),function(e,o,f){var d,p,h,m,g,v,y,b,A,_=(f||t).length,w=i[_];if(!w){if(!(A="auto"===t.grid?0:(t.grid||[1,C])[1])){for(y=-C;y<(y=f[A++].getBoundingClientRect().left)&&A<_;);A<_&&A--}for(w=i[_]=[],d=l?Math.min(A,_)*u-.5:r%A,p=A===C?0:l?_*c/A-.5:r/A|0,y=0,b=C,v=0;v<_;v++)h=v%A-d,m=p-(v/A|0),w[v]=g=s?Math.abs("y"===s?m:h):P(h*h+m*m),g>y&&(y=g),g<b&&(b=g);"random"===r&&ot(w),w.max=y-b,w.min=b,w.v=_=(parseFloat(t.amount)||parseFloat(t.each)*(A>_?_-1:s?"y"===s?_/A:A:Math.max(A,_/A))||0)*("edges"===r?-1:1),w.b=_<0?a-_:a,w.u=tt(t.amount||t.each)||0,n=n&&_<0?Lt(n):n}return _=(w[e]-w.min)/w.max||0,ye(w.b+(n?n(_):_)*w.v)+w.u}},st=function(e){var t=Math.pow(10,((e+"").split(".")[1]||"").length);return function(n){var r=ye(Math.round(parseFloat(n)/e)*e*t);return(r-r%1)/t+(L(n)?0:tt(n))}},ut=function(e,t){var n,r,a=U(e);return!a&&R(e)&&(n=a=e.radius||C,e.values?(e=at(e.values),(r=!L(e[0]))&&(n*=n)):e=st(e.increment)),Ze(t,a?M(e)?function(t){return r=e(t),Math.abs(r-t)<=n?r:t}:function(t){for(var a,i,o=parseFloat(r?t.x:t),l=parseFloat(r?t.y:0),s=C,u=0,c=e.length;c--;)(a=r?(a=e[c].x-o)*a+(i=e[c].y-l)*i:Math.abs(e[c]-o))<s&&(s=a,u=c);return u=!n||s<=n?e[u]:t,r||u===t||L(t)?u:u+tt(t)}:st(e))},ct=function(e,t,n,r){return Ze(U(e)?!t:!0===n?!!(n=0):!r,function(){return U(e)?e[~~(Math.random()*e.length)]:(n=n||1e-5)&&(r=n<1?Math.pow(10,(n+"").length-2):1)&&Math.floor(Math.round((e-n/2+Math.random()*(t-e+.99*n))/n)*n*r)/r})},ft=function(e,t,n){return Ze(n,function(n){return e[~~t(n)]})},dt=function(e){for(var t,n,r,a,i=0,o="";~(t=e.indexOf("random(",i));)r=e.indexOf(")",t),a="["===e.charAt(t+7),n=e.substr(t+7,r-t-7).match(a?Q:H),o+=e.substr(i,t-i)+ct(a?n:+n[0],a?0:+n[1],+n[2]||1e-5),i=r+1;return o+e.substr(i,e.length-i)},pt=function(e,t,n,r,a){var i=t-e,o=r-n;return Ze(a,function(t){return n+((t-e)/i*o||0)})},ht=function(e,t,n){var r,a,i,o=e.labels,l=C;for(r in o)(a=o[r]-t)<0==!!n&&a&&l>(a=Math.abs(a))&&(i=r,l=a);return i},mt=function(e,t,n){var r,a,i,o=e.vars,s=o[t],u=l,c=e._ctx;if(s)return r=o[t+"Params"],a=o.callbackScope||e,n&&oe.length&&_e(),c&&(l=c),i=r?s.apply(a,r):s.call(a),l=u,i},gt=function(e){return Me(e),e.scrollTrigger&&e.scrollTrigger.kill(!!o),e.progress()<1&&mt(e,"onInterrupt"),e},vt=[],yt=function(e){if(e)if(e=!e.name&&e.default||e,B()||e.headless){var t=e.name,n=M(e),r=t&&!n&&e.init?function(){this._props=[]}:e,a={init:te,render:cn,add:Qt,kill:dn,modifier:fn,rawVars:0},i={targetTest:0,get:0,getSetter:on,aliases:{},register:0};if(Pt(),e!==r){if(se[t])return;xe(r,xe(Pe(e,a),i)),Ee(r.prototype,Ee(a,Pe(e,i))),se[r.prop=t]=r,e.targetTest&&(fe.push(r),ie[t]=1),t=("css"===t?"CSS":t.charAt(0).toUpperCase()+t.substr(1))+"Plugin"}ee(t,r),e.register&&e.register(Tn,r,mn)}else vt.push(e)},bt=255,At={aqua:[0,bt,bt],lime:[0,bt,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,bt],navy:[0,0,128],white:[bt,bt,bt],olive:[128,128,0],yellow:[bt,bt,0],orange:[bt,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[bt,0,0],pink:[bt,192,203],cyan:[0,bt,bt],transparent:[bt,bt,bt,0]},_t=function(e,t,n){return(6*(e+=e<0?1:e>1?-1:0)<1?t+(n-t)*e*6:e<.5?n:3*e<2?t+(n-t)*(2/3-e)*6:t)*bt+.5|0},wt=function(e,t,n){var r,a,i,o,l,s,u,c,f,d,p=e?L(e)?[e>>16,e>>8&bt,e&bt]:0:At.black;if(!p){if(","===e.substr(-1)&&(e=e.substr(0,e.length-1)),At[e])p=At[e];else if("#"===e.charAt(0)){if(e.length<6&&(r=e.charAt(1),a=e.charAt(2),i=e.charAt(3),e="#"+r+r+a+a+i+i+(5===e.length?e.charAt(4)+e.charAt(4):"")),9===e.length)return[(p=parseInt(e.substr(1,6),16))>>16,p>>8&bt,p&bt,parseInt(e.substr(7),16)/255];p=[(e=parseInt(e.substr(1),16))>>16,e>>8&bt,e&bt]}else if("hsl"===e.substr(0,3))if(p=d=e.match(H),t){if(~e.indexOf("="))return p=e.match(q),n&&p.length<4&&(p[3]=1),p}else o=+p[0]%360/360,l=+p[1]/100,r=2*(s=+p[2]/100)-(a=s<=.5?s*(l+1):s+l-s*l),p.length>3&&(p[3]*=1),p[0]=_t(o+1/3,r,a),p[1]=_t(o,r,a),p[2]=_t(o-1/3,r,a);else p=e.match(H)||At.transparent;p=p.map(Number)}return t&&!d&&(r=p[0]/bt,a=p[1]/bt,i=p[2]/bt,s=((u=Math.max(r,a,i))+(c=Math.min(r,a,i)))/2,u===c?o=l=0:(f=u-c,l=s>.5?f/(2-u-c):f/(u+c),o=u===r?(a-i)/f+(a<i?6:0):u===a?(i-r)/f+2:(r-a)/f+4,o*=60),p[0]=~~(o+.5),p[1]=~~(100*l+.5),p[2]=~~(100*s+.5)),n&&p.length<4&&(p[3]=1),p},kt=function(e){var t=[],n=[],r=-1;return e.split(St).forEach(function(e){var a=e.match($)||[];t.push.apply(t,a),n.push(r+=a.length+1)}),t.c=n,t},Ct=function(e,t,n){var r,a,i,o,l="",s=(e+l).match(St),u=t?"hsla(":"rgba(",c=0;if(!s)return e;if(s=s.map(function(e){return(e=wt(e,t,1))&&u+(t?e[0]+","+e[1]+"%,"+e[2]+"%,"+e[3]:e.join(","))+")"}),n&&(i=kt(e),(r=n.c).join(l)!==i.c.join(l)))for(o=(a=e.replace(St,"1").split($)).length-1;c<o;c++)l+=a[c]+(~r.indexOf(c)?s.shift()||u+"0,0,0,0)":(i.length?i:s.length?s:n).shift());if(!a)for(o=(a=e.split(St)).length-1;c<o;c++)l+=a[c]+s[c];return l+a[o]},St=function(){var e,t="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b";for(e in At)t+="|"+e+"\\b";return new RegExp(t+")","gi")}(),xt=/hsl[a]?\(/,Et=function(e){var t,n=e.join(" ");if(St.lastIndex=0,St.test(n))return t=xt.test(n),e[1]=Ct(e[1],t),e[0]=Ct(e[0],t,kt(e[1])),!0},Tt=function(){var e,t,n,r,a,i,o=Date.now,l=500,s=33,p=o(),h=p,g=1e3/240,v=g,y=[],b=function n(u){var c,f,d,m,b=o()-h,A=!0===u;if((b>l||b<0)&&(p+=b-s),((c=(d=(h+=b)-p)-v)>0||A)&&(m=++r.frame,a=d-1e3*r.time,r.time=d/=1e3,v+=c+(c>=g?4:g-c),f=1),A||(e=t(n)),f)for(i=0;i<y.length;i++)y[i](d,a,m,u)};return r={time:0,frame:0,tick:function(){b(!0)},deltaRatio:function(e){return a/(1e3/(e||60))},wake:function(){d&&(!c&&B()&&(u=c=window,f=u.document||{},X.gsap=Tn,(u.gsapVersions||(u.gsapVersions=[])).push(Tn.version),K(G||u.GreenSockGlobals||!u.gsap&&u||{}),vt.forEach(yt)),n="undefined"!=typeof requestAnimationFrame&&requestAnimationFrame,e&&r.sleep(),t=n||function(e){return setTimeout(e,v-1e3*r.time+1|0)},m=1,b(2))},sleep:function(){(n?cancelAnimationFrame:clearTimeout)(e),m=0,t=te},lagSmoothing:function(e,t){l=e||1/0,s=Math.min(t||33,l)},fps:function(e){g=1e3/(e||240),v=1e3*r.time+g},add:function(e,t,n){var a=t?function(t,n,i,o){e(t,n,i,o),r.remove(a)}:e;return r.remove(e),y[n?"unshift":"push"](a),Pt(),a},remove:function(e,t){~(t=y.indexOf(e))&&y.splice(t,1)&&i>=t&&i--},_listeners:y}}(),Pt=function(){return!m&&Tt.wake()},zt={},Nt=/^[\d.\-M][\d.\-,\s]/,Ot=/["']/g,Mt=function(e){for(var t,n,r,a={},i=e.substr(1,e.length-3).split(":"),o=i[0],l=1,s=i.length;l<s;l++)n=i[l],t=l!==s-1?n.lastIndexOf(","):n.length,r=n.substr(0,t),a[o]=isNaN(r)?r.replace(Ot,"").trim():+r,o=n.substr(t+1).trim();return a},Lt=function(e){return function(t){return 1-e(1-t)}},Ft=function e(t,n){for(var r,a=t._first;a;)a instanceof qt?e(a,n):!a.vars.yoyoEase||a._yoyo&&a._repeat||a._yoyo===n||(a.timeline?e(a.timeline,n):(r=a._ease,a._ease=a._yEase,a._yEase=r,a._yoyo=n)),a=a._next},Rt=function(e,t){return e&&(M(e)?e:zt[e]||function(e){var t,n,r,a,i=(e+"").split("("),o=zt[i[0]];return o&&i.length>1&&o.config?o.config.apply(null,~e.indexOf("{")?[Mt(i[1])]:(t=e,n=t.indexOf("(")+1,r=t.indexOf(")"),a=t.indexOf("(",n),t.substring(n,~a&&a<r?t.indexOf(")",r+1):r)).split(",").map(Ce)):zt._CE&&Nt.test(e)?zt._CE("",e):o}(e))||t},Dt=function(e,t,n,r){void 0===n&&(n=function(e){return 1-t(1-e)}),void 0===r&&(r=function(e){return e<.5?t(2*e)/2:1-t(2*(1-e))/2});var a,i={easeIn:t,easeOut:n,easeInOut:r};return ge(e,function(e){for(var t in zt[e]=X[e]=i,zt[a=e.toLowerCase()]=n,i)zt[a+("easeIn"===t?".in":"easeOut"===t?".out":".inOut")]=zt[e+"."+t]=i[t]}),i},Bt=function(e){return function(t){return t<.5?(1-e(1-2*t))/2:.5+e(2*(t-.5))/2}},It=function e(t,n,r){var a=n>=1?n:1,i=(r||(t?.3:.45))/(n<1?n:1),o=i/x*(Math.asin(1/a)||0),l=function(e){return 1===e?1:a*Math.pow(2,-10*e)*N((e-o)*i)+1},s="out"===t?l:"in"===t?function(e){return 1-l(1-e)}:Bt(l);return i=x/i,s.config=function(n,r){return e(t,n,r)},s},jt=function e(t,n){void 0===n&&(n=1.70158);var r=function(e){return e?--e*e*((n+1)*e+n)+1:0},a="out"===t?r:"in"===t?function(e){return 1-r(1-e)}:Bt(r);return a.config=function(n){return e(t,n)},a};ge("Linear,Quad,Cubic,Quart,Quint,Strong",function(e,t){var n=t<5?t+1:t;Dt(e+",Power"+(n-1),t?function(e){return Math.pow(e,n)}:function(e){return e},function(e){return 1-Math.pow(1-e,n)},function(e){return e<.5?Math.pow(2*e,n)/2:1-Math.pow(2*(1-e),n)/2})}),zt.Linear.easeNone=zt.none=zt.Linear.easeIn,Dt("Elastic",It("in"),It("out"),It()),g=7.5625,b=2*(y=1/(v=2.75)),A=2.5*y,Dt("Bounce",function(e){return 1-_(1-e)},_=function(e){return e<y?g*e*e:e<b?g*Math.pow(e-1.5/v,2)+.75:e<A?g*(e-=2.25/v)*e+.9375:g*Math.pow(e-2.625/v,2)+.984375}),Dt("Expo",function(e){return Math.pow(2,10*(e-1))*e+e*e*e*e*e*e*(1-e)}),Dt("Circ",function(e){return-(P(1-e*e)-1)}),Dt("Sine",function(e){return 1===e?1:1-z(e*E)}),Dt("Back",jt("in"),jt("out"),jt()),zt.SteppedEase=zt.steps=X.SteppedEase={config:function(e,t){void 0===e&&(e=1);var n=1/e,r=e+(t?0:1),a=t?1:0;return function(e){return((r*et(0,.99999999,e)|0)+a)*n}}},k.ease=zt["quad.out"],ge("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt",function(e){return de+=e+","+e+"Params,"});var Ut=function(e,t){this.id=T++,e._gsap=this,this.target=e,this.harness=t,this.get=t?t.get:me,this.set=t?t.getSetter:on},Ht=function(){function e(e){this.vars=e,this._delay=+e.delay||0,(this._repeat=e.repeat===1/0?-2:e.repeat||0)&&(this._rDelay=e.repeatDelay||0,this._yoyo=!!e.yoyo||!!e.yoyoEase),this._ts=1,We(this,+e.duration,1,1),this.data=e.data,l&&(this._ctx=l,l.data.push(this)),m||Tt.wake()}var t=e.prototype;return t.delay=function(e){return e||0===e?(this.parent&&this.parent.smoothChildTiming&&this.startTime(this._start+e-this._delay),this._delay=e,this):this._delay},t.duration=function(e){return arguments.length?this.totalDuration(this._repeat>0?e+(e+this._rDelay)*this._repeat:e):this.totalDuration()&&this._dur},t.totalDuration=function(e){return arguments.length?(this._dirty=0,We(this,this._repeat<0?e:(e-this._repeat*this._rDelay)/(this._repeat+1))):this._tDur},t.totalTime=function(e,t){if(Pt(),!arguments.length)return this._tTime;var n=this._dp;if(n&&n.smoothChildTiming&&this._ts){for(Ue(this,e),!n._dp||n.parent||He(n,this);n&&n.parent;)n.parent._time!==n._start+(n._ts>=0?n._tTime/n._ts:(n.totalDuration()-n._tTime)/-n._ts)&&n.totalTime(n._tTime,!0),n=n.parent;!this.parent&&this._dp.autoRemoveChildren&&(this._ts>0&&e<this._tDur||this._ts<0&&e>0||!this._tDur&&!e)&&qe(this._dp,this,this._start-this._delay)}return(this._tTime!==e||!this._dur&&!t||this._initted&&Math.abs(this._zTime)===S||!e&&!this._initted&&(this.add||this._ptLookup))&&(this._ts||(this._pTime=e),ke(this,e,t)),this},t.time=function(e,t){return arguments.length?this.totalTime(Math.min(this.totalDuration(),e+De(this))%(this._dur+this._rDelay)||(e?this._dur:0),t):this._time},t.totalProgress=function(e,t){return arguments.length?this.totalTime(this.totalDuration()*e,t):this.totalDuration()?Math.min(1,this._tTime/this._tDur):this.rawTime()>=0&&this._initted?1:0},t.progress=function(e,t){return arguments.length?this.totalTime(this.duration()*(!this._yoyo||1&this.iteration()?e:1-e)+De(this),t):this.duration()?Math.min(1,this._time/this._dur):this.rawTime()>0?1:0},t.iteration=function(e,t){var n=this.duration()+this._rDelay;return arguments.length?this.totalTime(this._time+(e-1)*n,t):this._repeat?Be(this._tTime,n)+1:1},t.timeScale=function(e,t){if(!arguments.length)return-1e-8===this._rts?0:this._rts;if(this._rts===e)return this;var n=this.parent&&this._ts?Ie(this.parent._time,this):this._tTime;return this._rts=+e||0,this._ts=this._ps||-1e-8===e?0:this._rts,this.totalTime(et(-Math.abs(this._delay),this.totalDuration(),n),!1!==t),je(this),function(e){for(var t=e.parent;t&&t.parent;)t._dirty=1,t.totalDuration(),t=t.parent;return e}(this)},t.paused=function(e){return arguments.length?(this._ps!==e&&(this._ps=e,e?(this._pTime=this._tTime||Math.max(-this._delay,this.rawTime()),this._ts=this._act=0):(Pt(),this._ts=this._rts,this.totalTime(this.parent&&!this.parent.smoothChildTiming?this.rawTime():this._tTime||this._pTime,1===this.progress()&&Math.abs(this._zTime)!==S&&(this._tTime-=S)))),this):this._ps},t.startTime=function(e){if(arguments.length){this._start=e;var t=this.parent||this._dp;return t&&(t._sort||!this.parent)&&qe(t,this,e-this._delay),this}return this._start},t.endTime=function(e){return this._start+(D(e)?this.totalDuration():this.duration())/Math.abs(this._ts||1)},t.rawTime=function(e){var t=this.parent||this._dp;return t?e&&(!this._ts||this._repeat&&this._time&&this.totalProgress()<1)?this._tTime%(this._dur+this._rDelay):this._ts?Ie(t.rawTime(e),this):this._tTime:this._tTime},t.revert=function(e){void 0===e&&(e=ae);var t=o;return o=e,we(this)&&(this.timeline&&this.timeline.revert(e),this.totalTime(-.01,e.suppressEvents)),"nested"!==this.data&&!1!==e.kill&&this.kill(),o=t,this},t.globalTime=function(e){for(var t=this,n=arguments.length?e:t.rawTime();t;)n=t._start+n/(Math.abs(t._ts)||1),t=t._dp;return!this.parent&&this._sat?this._sat.globalTime(e):n},t.repeat=function(e){return arguments.length?(this._repeat=e===1/0?-2:e,Xe(this)):-2===this._repeat?1/0:this._repeat},t.repeatDelay=function(e){if(arguments.length){var t=this._time;return this._rDelay=e,Xe(this),t?this.time(t):this}return this._rDelay},t.yoyo=function(e){return arguments.length?(this._yoyo=e,this):this._yoyo},t.seek=function(e,t){return this.totalTime(Ke(this,e),D(t))},t.restart=function(e,t){return this.play().totalTime(e?-this._delay:0,D(t)),this._dur||(this._zTime=-1e-8),this},t.play=function(e,t){return null!=e&&this.seek(e,t),this.reversed(!1).paused(!1)},t.reverse=function(e,t){return null!=e&&this.seek(e||this.totalDuration(),t),this.reversed(!0).paused(!1)},t.pause=function(e,t){return null!=e&&this.seek(e,t),this.paused(!0)},t.resume=function(){return this.paused(!1)},t.reversed=function(e){return arguments.length?(!!e!==this.reversed()&&this.timeScale(-this._rts||(e?-1e-8:0)),this):this._rts<0},t.invalidate=function(){return this._initted=this._act=0,this._zTime=-1e-8,this},t.isActive=function(){var e,t=this.parent||this._dp,n=this._start;return!(t&&!(this._ts&&this._initted&&t.isActive()&&(e=t.rawTime(!0))>=n&&e<this.endTime(!0)-S))},t.eventCallback=function(e,t,n){var r=this.vars;return arguments.length>1?(t?(r[e]=t,n&&(r[e+"Params"]=n),"onUpdate"===e&&(this._onUpdate=t)):delete r[e],this):r[e]},t.then=function(e){var t=this;return new Promise(function(n){var r=M(e)?e:Se,a=function(){var e=t.then;t.then=null,M(r)&&(r=r(t))&&(r.then||r===t)&&(t.then=e),n(r),t.then=e};t._initted&&1===t.totalProgress()&&t._ts>=0||!t._tTime&&t._ts<0?a():t._prom=a})},t.kill=function(){gt(this)},e}();xe(Ht.prototype,{_time:0,_start:0,_end:0,_tTime:0,_tDur:0,_dirty:0,_repeat:0,_yoyo:!1,parent:null,_initted:!1,_rDelay:0,_ts:1,_dp:0,ratio:0,_zTime:-1e-8,_prom:0,_ps:!1,_rts:1});var qt=function(e){function t(t,n){var a;return void 0===t&&(t={}),(a=e.call(this,t)||this).labels={},a.smoothChildTiming=!!t.smoothChildTiming,a.autoRemoveChildren=!!t.autoRemoveChildren,a._sort=D(t.sortChildren),s&&qe(t.parent||s,r(a),n),t.reversed&&a.reverse(),t.paused&&a.paused(!0),t.scrollTrigger&&$e(r(a),t.scrollTrigger),a}a(t,e);var n=t.prototype;return n.to=function(e,t,n){return Je(0,arguments,this),this},n.from=function(e,t,n){return Je(1,arguments,this),this},n.fromTo=function(e,t,n,r){return Je(2,arguments,this),this},n.set=function(e,t,n){return t.duration=0,t.parent=this,ze(t).repeatDelay||(t.repeat=0),t.immediateRender=!!t.immediateRender,new en(e,t,Ke(this,n),1),this},n.call=function(e,t,n){return qe(this,en.delayedCall(0,e,t),n)},n.staggerTo=function(e,t,n,r,a,i,o){return n.duration=t,n.stagger=n.stagger||r,n.onComplete=i,n.onCompleteParams=o,n.parent=this,new en(e,n,Ke(this,a)),this},n.staggerFrom=function(e,t,n,r,a,i,o){return n.runBackwards=1,ze(n).immediateRender=D(n.immediateRender),this.staggerTo(e,t,n,r,a,i,o)},n.staggerFromTo=function(e,t,n,r,a,i,o,l){return r.startAt=n,ze(r).immediateRender=D(r.immediateRender),this.staggerTo(e,t,r,a,i,o,l)},n.render=function(e,t,n){var r,a,i,l,u,c,f,d,p,h,m,g,v=this._time,y=this._dirty?this.totalDuration():this._tDur,b=this._dur,A=e<=0?0:ye(e),_=this._zTime<0!=e<0&&(this._initted||!b);if(this!==s&&A>y&&e>=0&&(A=y),A!==this._tTime||n||_){if(v!==this._time&&b&&(A+=this._time-v,e+=this._time-v),r=A,p=this._start,c=!(d=this._ts),_&&(b||(v=this._zTime),(e||!t)&&(this._zTime=e)),this._repeat){if(m=this._yoyo,u=b+this._rDelay,this._repeat<-1&&e<0)return this.totalTime(100*u+e,t,n);if(r=ye(A%u),A===y?(l=this._repeat,r=b):((l=~~(h=ye(A/u)))&&l===h&&(r=b,l--),r>b&&(r=b)),h=Be(this._tTime,u),!v&&this._tTime&&h!==l&&this._tTime-h*u-this._dur<=0&&(h=l),m&&1&l&&(r=b-r,g=1),l!==h&&!this._lock){var w=m&&1&h,k=w===(m&&1&l);if(l<h&&(w=!w),v=w?0:A%b?b:A,this._lock=1,this.render(v||(g?0:ye(l*u)),t,!b)._lock=0,this._tTime=A,!t&&this.parent&&mt(this,"onRepeat"),this.vars.repeatRefresh&&!g&&(this.invalidate()._lock=1),v&&v!==this._time||c!==!this._ts||this.vars.onRepeat&&!this.parent&&!this._act)return this;if(b=this._dur,y=this._tDur,k&&(this._lock=2,v=w?b:-1e-4,this.render(v,!0),this.vars.repeatRefresh&&!g&&this.invalidate()),this._lock=0,!this._ts&&!c)return this;Ft(this,g)}}if(this._hasPause&&!this._forcing&&this._lock<2&&(f=function(e,t,n){var r;if(n>t)for(r=e._first;r&&r._start<=n;){if("isPause"===r.data&&r._start>t)return r;r=r._next}else for(r=e._last;r&&r._start>=n;){if("isPause"===r.data&&r._start<t)return r;r=r._prev}}(this,ye(v),ye(r)),f&&(A-=r-(r=f._start))),this._tTime=A,this._time=r,this._act=!d,this._initted||(this._onUpdate=this.vars.onUpdate,this._initted=1,this._zTime=e,v=0),!v&&A&&!t&&!h&&(mt(this,"onStart"),this._tTime!==A))return this;if(r>=v&&e>=0)for(a=this._first;a;){if(i=a._next,(a._act||r>=a._start)&&a._ts&&f!==a){if(a.parent!==this)return this.render(e,t,n);if(a.render(a._ts>0?(r-a._start)*a._ts:(a._dirty?a.totalDuration():a._tDur)+(r-a._start)*a._ts,t,n),r!==this._time||!this._ts&&!c){f=0,i&&(A+=this._zTime=-1e-8);break}}a=i}else{a=this._last;for(var C=e<0?e:r;a;){if(i=a._prev,(a._act||C<=a._end)&&a._ts&&f!==a){if(a.parent!==this)return this.render(e,t,n);if(a.render(a._ts>0?(C-a._start)*a._ts:(a._dirty?a.totalDuration():a._tDur)+(C-a._start)*a._ts,t,n||o&&we(a)),r!==this._time||!this._ts&&!c){f=0,i&&(A+=this._zTime=C?-1e-8:S);break}}a=i}}if(f&&!t&&(this.pause(),f.render(r>=v?0:-1e-8)._zTime=r>=v?1:-1,this._ts))return this._start=p,je(this),this.render(e,t,n);this._onUpdate&&!t&&mt(this,"onUpdate",!0),(A===y&&this._tTime>=this.totalDuration()||!A&&v)&&(p!==this._start&&Math.abs(d)===Math.abs(this._ts)||this._lock||((e||!b)&&(A===y&&this._ts>0||!A&&this._ts<0)&&Me(this,1),t||e<0&&!v||!A&&!v&&y||(mt(this,A===y&&e>=0?"onComplete":"onReverseComplete",!0),this._prom&&!(A<y&&this.timeScale()>0)&&this._prom())))}return this},n.add=function(e,t){var n=this;if(L(t)||(t=Ke(this,t,e)),!(e instanceof Ht)){if(U(e))return e.forEach(function(e){return n.add(e,t)}),this;if(O(e))return this.addLabel(e,t);if(!M(e))return this;e=en.delayedCall(0,e)}return this!==e?qe(this,e,t):this},n.getChildren=function(e,t,n,r){void 0===e&&(e=!0),void 0===t&&(t=!0),void 0===n&&(n=!0),void 0===r&&(r=-C);for(var a=[],i=this._first;i;)i._start>=r&&(i instanceof en?t&&a.push(i):(n&&a.push(i),e&&a.push.apply(a,i.getChildren(!0,t,n)))),i=i._next;return a},n.getById=function(e){for(var t=this.getChildren(1,1,1),n=t.length;n--;)if(t[n].vars.id===e)return t[n]},n.remove=function(e){return O(e)?this.removeLabel(e):M(e)?this.killTweensOf(e):(e.parent===this&&Oe(this,e),e===this._recent&&(this._recent=this._last),Le(this))},n.totalTime=function(t,n){return arguments.length?(this._forcing=1,!this._dp&&this._ts&&(this._start=ye(Tt.time-(this._ts>0?t/this._ts:(this.totalDuration()-t)/-this._ts))),e.prototype.totalTime.call(this,t,n),this._forcing=0,this):this._tTime},n.addLabel=function(e,t){return this.labels[e]=Ke(this,t),this},n.removeLabel=function(e){return delete this.labels[e],this},n.addPause=function(e,t,n){var r=en.delayedCall(0,t||te,n);return r.data="isPause",this._hasPause=1,qe(this,r,Ke(this,e))},n.removePause=function(e){var t=this._first;for(e=Ke(this,e);t;)t._start===e&&"isPause"===t.data&&Me(t),t=t._next},n.killTweensOf=function(e,t,n){for(var r=this.getTweensOf(e,n),a=r.length;a--;)$t!==r[a]&&r[a].kill(e,t);return this},n.getTweensOf=function(e,t){for(var n,r=[],a=at(e),i=this._first,o=L(t);i;)i instanceof en?Ae(i._targets,a)&&(o?(!$t||i._initted&&i._ts)&&i.globalTime(0)<=t&&i.globalTime(i.totalDuration())>t:!t||i.isActive())&&r.push(i):(n=i.getTweensOf(a,t)).length&&r.push.apply(r,n),i=i._next;return r},n.tweenTo=function(e,t){t=t||{};var n,r=this,a=Ke(r,e),i=t,o=i.startAt,l=i.onStart,s=i.onStartParams,u=i.immediateRender,c=en.to(r,xe({ease:t.ease||"none",lazy:!1,immediateRender:!1,time:a,overwrite:"auto",duration:t.duration||Math.abs((a-(o&&"time"in o?o.time:r._time))/r.timeScale())||S,onStart:function(){if(r.pause(),!n){var e=t.duration||Math.abs((a-(o&&"time"in o?o.time:r._time))/r.timeScale());c._dur!==e&&We(c,e,0,1).render(c._time,!0,!0),n=1}l&&l.apply(c,s||[])}},t));return u?c.render(0):c},n.tweenFromTo=function(e,t,n){return this.tweenTo(t,xe({startAt:{time:Ke(this,e)}},n))},n.recent=function(){return this._recent},n.nextLabel=function(e){return void 0===e&&(e=this._time),ht(this,Ke(this,e))},n.previousLabel=function(e){return void 0===e&&(e=this._time),ht(this,Ke(this,e),1)},n.currentLabel=function(e){return arguments.length?this.seek(e,!0):this.previousLabel(this._time+S)},n.shiftChildren=function(e,t,n){void 0===n&&(n=0);for(var r,a=this._first,i=this.labels;a;)a._start>=n&&(a._start+=e,a._end+=e),a=a._next;if(t)for(r in i)i[r]>=n&&(i[r]+=e);return Le(this)},n.invalidate=function(t){var n=this._first;for(this._lock=0;n;)n.invalidate(t),n=n._next;return e.prototype.invalidate.call(this,t)},n.clear=function(e){void 0===e&&(e=!0);for(var t,n=this._first;n;)t=n._next,this.remove(n),n=t;return this._dp&&(this._time=this._tTime=this._pTime=0),e&&(this.labels={}),Le(this)},n.totalDuration=function(e){var t,n,r,a=0,i=this,o=i._last,l=C;if(arguments.length)return i.timeScale((i._repeat<0?i.duration():i.totalDuration())/(i.reversed()?-e:e));if(i._dirty){for(r=i.parent;o;)t=o._prev,o._dirty&&o.totalDuration(),(n=o._start)>l&&i._sort&&o._ts&&!i._lock?(i._lock=1,qe(i,o,n-o._delay,1)._lock=0):l=n,n<0&&o._ts&&(a-=n,(!r&&!i._dp||r&&r.smoothChildTiming)&&(i._start+=n/i._ts,i._time-=n,i._tTime-=n),i.shiftChildren(-n,!1,-Infinity),l=0),o._end>a&&o._ts&&(a=o._end),o=t;We(i,i===s&&i._time>a?i._time:a,1,1),i._dirty=0}return i._tDur},t.updateRoot=function(e){if(s._ts&&(ke(s,Ie(e,s)),p=Tt.frame),Tt.frame>=ce){ce+=w.autoSleep||120;var t=s._first;if((!t||!t._ts)&&w.autoSleep&&Tt._listeners.length<2){for(;t&&!t._ts;)t=t._next;t||Tt.sleep()}}},t}(Ht);xe(qt.prototype,{_lock:0,_hasPause:0,_forcing:0});var $t,Yt,Vt=function(e,t,n,r,a,i,o){var l,s,u,c,f,d,p,h,m=new mn(this._pt,e,t,0,1,un,null,a),g=0,v=0;for(m.b=n,m.e=r,n+="",(p=~(r+="").indexOf("random("))&&(r=dt(r)),i&&(i(h=[n,r],e,t),n=h[0],r=h[1]),s=n.match(Y)||[];l=Y.exec(r);)c=l[0],f=r.substring(g,l.index),u?u=(u+1)%5:"rgba("===f.substr(-5)&&(u=1),c!==s[v++]&&(d=parseFloat(s[v-1])||0,m._pt={_next:m._pt,p:f||1===v?f:",",s:d,c:"="===c.charAt(1)?be(d,c)-d:parseFloat(c)-d,m:u&&u<4?Math.round:0},g=Y.lastIndex);return m.c=g<r.length?r.substring(g,r.length):"",m.fp=o,(V.test(r)||p)&&(m.e=0),this._pt=m,m},Qt=function(e,t,n,r,a,i,o,l,s,u){M(r)&&(r=r(a||0,e,i));var c,f=e[t],d="get"!==n?n:M(f)?s?e[t.indexOf("set")||!M(e["get"+t.substr(3)])?t:"get"+t.substr(3)](s):e[t]():f,p=M(f)?s?rn:nn:tn;if(O(r)&&(~r.indexOf("random(")&&(r=dt(r)),"="===r.charAt(1)&&((c=be(d,r)+(tt(d)||0))||0===c)&&(r=c)),!u||d!==r||Yt)return isNaN(d*r)||""===r?(!f&&!(t in e)&&J(t,r),Vt.call(this,e,t,d,r,p,l||w.stringFilter,s)):(c=new mn(this._pt,e,t,+d||0,r-(d||0),"boolean"==typeof f?sn:ln,0,p),s&&(c.fp=s),o&&c.modifier(o,this,e),this._pt=c)},Wt=function(e,t,n,r,a,i){var o,l,s,u;if(se[e]&&!1!==(o=new se[e]).init(a,o.rawVars?t[e]:function(e,t,n,r,a){if(M(e)&&(e=Kt(e,a,t,n,r)),!R(e)||e.style&&e.nodeType||U(e)||j(e))return O(e)?Kt(e,a,t,n,r):e;var i,o={};for(i in e)o[i]=Kt(e[i],a,t,n,r);return o}(t[e],r,a,i,n),n,r,i)&&(n._pt=l=new mn(n._pt,a,e,0,1,o.render,o,0,o.priority),n!==h))for(s=n._ptLookup[n._targets.indexOf(a)],u=o._props.length;u--;)s[o._props[u]]=l;return o},Xt=function e(t,n,r){var a,l,u,c,f,d,p,h,m,g,v,y,b,A=t.vars,_=A.ease,w=A.startAt,x=A.immediateRender,E=A.lazy,T=A.onUpdate,P=A.runBackwards,z=A.yoyoEase,N=A.keyframes,O=A.autoRevert,M=t._dur,L=t._startAt,F=t._targets,R=t.parent,B=R&&"nested"===R.data?R.vars.targets:F,I="auto"===t._overwrite&&!i,j=t.timeline;if(j&&(!N||!_)&&(_="none"),t._ease=Rt(_,k.ease),t._yEase=z?Lt(Rt(!0===z?_:z,k.ease)):0,z&&t._yoyo&&!t._repeat&&(z=t._yEase,t._yEase=t._ease,t._ease=z),t._from=!j&&!!A.runBackwards,!j||N&&!A.stagger){if(y=(h=F[0]?he(F[0]).harness:0)&&A[h.prop],a=Pe(A,ie),L&&(L._zTime<0&&L.progress(1),n<0&&P&&x&&!O?L.render(-1,!0):L.revert(P&&M?re:ne),L._lazy=0),w){if(Me(t._startAt=en.set(F,xe({data:"isStart",overwrite:!1,parent:R,immediateRender:!0,lazy:!L&&D(E),startAt:null,delay:0,onUpdate:T&&function(){return mt(t,"onUpdate")},stagger:0},w))),t._startAt._dp=0,t._startAt._sat=t,n<0&&(o||!x&&!O)&&t._startAt.revert(re),x&&M&&n<=0&&r<=0)return void(n&&(t._zTime=n))}else if(P&&M&&!L)if(n&&(x=!1),u=xe({overwrite:!1,data:"isFromStart",lazy:x&&!L&&D(E),immediateRender:x,stagger:0,parent:R},a),y&&(u[h.prop]=y),Me(t._startAt=en.set(F,u)),t._startAt._dp=0,t._startAt._sat=t,n<0&&(o?t._startAt.revert(re):t._startAt.render(-1,!0)),t._zTime=n,x){if(!n)return}else e(t._startAt,S,S);for(t._pt=t._ptCache=0,E=M&&D(E)||E&&!M,l=0;l<F.length;l++){if(p=(f=F[l])._gsap||pe(F)[l]._gsap,t._ptLookup[l]=g={},le[p.id]&&oe.length&&_e(),v=B===F?l:B.indexOf(f),h&&!1!==(m=new h).init(f,y||a,t,v,B)&&(t._pt=c=new mn(t._pt,f,m.name,0,1,m.render,m,0,m.priority),m._props.forEach(function(e){g[e]=c}),m.priority&&(d=1)),!h||y)for(u in a)se[u]&&(m=Wt(u,a,t,v,f,B))?m.priority&&(d=1):g[u]=c=Qt.call(t,f,u,"get",a[u],v,B,0,A.stringFilter);t._op&&t._op[l]&&t.kill(f,t._op[l]),I&&t._pt&&($t=t,s.killTweensOf(f,g,t.globalTime(n)),b=!t.parent,$t=0),t._pt&&E&&(le[p.id]=1)}d&&hn(t),t._onInit&&t._onInit(t)}t._onUpdate=T,t._initted=(!t._op||t._pt)&&!b,N&&n<=0&&j.render(C,!0,!0)},Gt=function(e,t,n,r){var a,i,o=t.ease||r||"power1.inOut";if(U(t))i=n[e]||(n[e]=[]),t.forEach(function(e,n){return i.push({t:n/(t.length-1)*100,v:e,e:o})});else for(a in t)i=n[a]||(n[a]=[]),"ease"===a||i.push({t:parseFloat(e),v:t[a],e:o})},Kt=function(e,t,n,r,a){return M(e)?e.call(t,n,r,a):O(e)&&~e.indexOf("random(")?dt(e):e},Jt=de+"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert",Zt={};ge(Jt+",id,stagger,delay,duration,paused,scrollTrigger",function(e){return Zt[e]=1});var en=function(e){function t(t,n,a,o){var l;"number"==typeof n&&(a.duration=n,n=a,a=null);var u,c,f,d,p,h,m,g,v=(l=e.call(this,o?n:ze(n))||this).vars,y=v.duration,b=v.delay,A=v.immediateRender,_=v.stagger,k=v.overwrite,C=v.keyframes,S=v.defaults,x=v.scrollTrigger,E=v.yoyoEase,T=n.parent||s,P=(U(t)||j(t)?L(t[0]):"length"in n)?[t]:at(t);if(l._targets=P.length?pe(P):Z("GSAP target "+t+" not found. https://gsap.com",!w.nullTargetWarn)||[],l._ptLookup=[],l._overwrite=k,C||_||I(y)||I(b)){if(n=l.vars,(u=l.timeline=new qt({data:"nested",defaults:S||{},targets:T&&"nested"===T.data?T.vars.targets:P})).kill(),u.parent=u._dp=r(l),u._start=0,_||I(y)||I(b)){if(d=P.length,m=_&&lt(_),R(_))for(p in _)~Jt.indexOf(p)&&(g||(g={}),g[p]=_[p]);for(c=0;c<d;c++)(f=Pe(n,Zt)).stagger=0,E&&(f.yoyoEase=E),g&&Ee(f,g),h=P[c],f.duration=+Kt(y,r(l),c,h,P),f.delay=(+Kt(b,r(l),c,h,P)||0)-l._delay,!_&&1===d&&f.delay&&(l._delay=b=f.delay,l._start+=b,f.delay=0),u.to(h,f,m?m(c,h,P):0),u._ease=zt.none;u.duration()?y=b=0:l.timeline=0}else if(C){ze(xe(u.vars.defaults,{ease:"none"})),u._ease=Rt(C.ease||n.ease||"none");var z,N,O,M=0;if(U(C))C.forEach(function(e){return u.to(P,e,">")}),u.duration();else{for(p in f={},C)"ease"===p||"easeEach"===p||Gt(p,C[p],f,C.easeEach);for(p in f)for(z=f[p].sort(function(e,t){return e.t-t.t}),M=0,c=0;c<z.length;c++)(O={ease:(N=z[c]).e,duration:(N.t-(c?z[c-1].t:0))/100*y})[p]=N.v,u.to(P,O,M),M+=O.duration;u.duration()<y&&u.to({},{duration:y-u.duration()})}}y||l.duration(y=u.duration())}else l.timeline=0;return!0!==k||i||($t=r(l),s.killTweensOf(P),$t=0),qe(T,r(l),a),n.reversed&&l.reverse(),n.paused&&l.paused(!0),(A||!y&&!C&&l._start===ye(T._time)&&D(A)&&Re(r(l))&&"nested"!==T.data)&&(l._tTime=-1e-8,l.render(Math.max(0,-b)||0)),x&&$e(r(l),x),l}a(t,e);var n=t.prototype;return n.render=function(e,t,n){var r,a,i,l,s,u,c,f,d,p=this._time,h=this._tDur,m=this._dur,g=e<0,v=e>h-S&&!g?h:e<S?0:e;if(m){if(v!==this._tTime||!e||n||!this._initted&&this._tTime||this._startAt&&this._zTime<0!==g||this._lazy){if(r=v,f=this.timeline,this._repeat){if(l=m+this._rDelay,this._repeat<-1&&g)return this.totalTime(100*l+e,t,n);if(r=ye(v%l),v===h?(i=this._repeat,r=m):(i=~~(s=ye(v/l)))&&i===s?(r=m,i--):r>m&&(r=m),(u=this._yoyo&&1&i)&&(d=this._yEase,r=m-r),s=Be(this._tTime,l),r===p&&!n&&this._initted&&i===s)return this._tTime=v,this;i!==s&&(f&&this._yEase&&Ft(f,u),this.vars.repeatRefresh&&!u&&!this._lock&&r!==l&&this._initted&&(this._lock=n=1,this.render(ye(l*i),!0).invalidate()._lock=0))}if(!this._initted){if(Ye(this,g?e:r,n,t,v))return this._tTime=0,this;if(!(p===this._time||n&&this.vars.repeatRefresh&&i!==s))return this;if(m!==this._dur)return this.render(e,t,n)}if(this._tTime=v,this._time=r,!this._act&&this._ts&&(this._act=1,this._lazy=0),this.ratio=c=(d||this._ease)(r/m),this._from&&(this.ratio=c=1-c),!p&&v&&!t&&!s&&(mt(this,"onStart"),this._tTime!==v))return this;for(a=this._pt;a;)a.r(c,a.d),a=a._next;f&&f.render(e<0?e:f._dur*f._ease(r/this._dur),t,n)||this._startAt&&(this._zTime=e),this._onUpdate&&!t&&(g&&Fe(this,e,0,n),mt(this,"onUpdate")),this._repeat&&i!==s&&this.vars.onRepeat&&!t&&this.parent&&mt(this,"onRepeat"),v!==this._tDur&&v||this._tTime!==v||(g&&!this._onUpdate&&Fe(this,e,0,!0),(e||!m)&&(v===this._tDur&&this._ts>0||!v&&this._ts<0)&&Me(this,1),t||g&&!p||!(v||p||u)||(mt(this,v===h?"onComplete":"onReverseComplete",!0),this._prom&&!(v<h&&this.timeScale()>0)&&this._prom()))}}else!function(e,t,n,r){var a,i,l,s=e.ratio,u=t<0||!t&&(!e._start&&Ve(e)&&(e._initted||!Qe(e))||(e._ts<0||e._dp._ts<0)&&!Qe(e))?0:1,c=e._rDelay,f=0;if(c&&e._repeat&&(f=et(0,e._tDur,t),i=Be(f,c),e._yoyo&&1&i&&(u=1-u),i!==Be(e._tTime,c)&&(s=1-u,e.vars.repeatRefresh&&e._initted&&e.invalidate())),u!==s||o||r||e._zTime===S||!t&&e._zTime){if(!e._initted&&Ye(e,t,r,n,f))return;for(l=e._zTime,e._zTime=t||(n?S:0),n||(n=t&&!l),e.ratio=u,e._from&&(u=1-u),e._time=0,e._tTime=f,a=e._pt;a;)a.r(u,a.d),a=a._next;t<0&&Fe(e,t,0,!0),e._onUpdate&&!n&&mt(e,"onUpdate"),f&&e._repeat&&!n&&e.parent&&mt(e,"onRepeat"),(t>=e._tDur||t<0)&&e.ratio===u&&(u&&Me(e,1),n||o||(mt(e,u?"onComplete":"onReverseComplete",!0),e._prom&&e._prom()))}else e._zTime||(e._zTime=t)}(this,e,t,n);return this},n.targets=function(){return this._targets},n.invalidate=function(t){return(!t||!this.vars.runBackwards)&&(this._startAt=0),this._pt=this._op=this._onUpdate=this._lazy=this.ratio=0,this._ptLookup=[],this.timeline&&this.timeline.invalidate(t),e.prototype.invalidate.call(this,t)},n.resetTo=function(e,t,n,r,a){m||Tt.wake(),this._ts||this.play();var i=Math.min(this._dur,(this._dp._time-this._start)*this._ts);return this._initted||Xt(this,i),function(e,t,n,r,a,i,o,l){var s,u,c,f,d=(e._pt&&e._ptCache||(e._ptCache={}))[t];if(!d)for(d=e._ptCache[t]=[],c=e._ptLookup,f=e._targets.length;f--;){if((s=c[f][t])&&s.d&&s.d._pt)for(s=s.d._pt;s&&s.p!==t&&s.fp!==t;)s=s._next;if(!s)return Yt=1,e.vars[t]="+=0",Xt(e,o),Yt=0,l?Z(t+" not eligible for reset"):1;d.push(s)}for(f=d.length;f--;)(s=(u=d[f])._pt||u).s=!r&&0!==r||a?s.s+(r||0)+i*s.c:r,s.c=n-s.s,u.e&&(u.e=ve(n)+tt(u.e)),u.b&&(u.b=s.s+tt(u.b))}(this,e,t,n,r,this._ease(i/this._dur),i,a)?this.resetTo(e,t,n,r,1):(Ue(this,0),this.parent||Ne(this._dp,this,"_first","_last",this._dp._sort?"_start":0),this.render(0))},n.kill=function(e,t){if(void 0===t&&(t="all"),!(e||t&&"all"!==t))return this._lazy=this._pt=0,this.parent?gt(this):this.scrollTrigger&&this.scrollTrigger.kill(!!o),this;if(this.timeline){var n=this.timeline.totalDuration();return this.timeline.killTweensOf(e,t,$t&&!0!==$t.vars.overwrite)._first||gt(this),this.parent&&n!==this.timeline.totalDuration()&&We(this,this._dur*this.timeline._tDur/n,0,1),this}var r,a,i,l,s,u,c,f=this._targets,d=e?at(e):f,p=this._ptLookup,h=this._pt;if((!t||"all"===t)&&function(e,t){for(var n=e.length,r=n===t.length;r&&n--&&e[n]===t[n];);return n<0}(f,d))return"all"===t&&(this._pt=0),gt(this);for(r=this._op=this._op||[],"all"!==t&&(O(t)&&(s={},ge(t,function(e){return s[e]=1}),t=s),t=function(e,t){var n,r,a,i,o=e[0]?he(e[0]).harness:0,l=o&&o.aliases;if(!l)return t;for(r in n=Ee({},t),l)if(r in n)for(a=(i=l[r].split(",")).length;a--;)n[i[a]]=n[r];return n}(f,t)),c=f.length;c--;)if(~d.indexOf(f[c]))for(s in a=p[c],"all"===t?(r[c]=t,l=a,i={}):(i=r[c]=r[c]||{},l=t),l)(u=a&&a[s])&&("kill"in u.d&&!0!==u.d.kill(s)||Oe(this,u,"_pt"),delete a[s]),"all"!==i&&(i[s]=1);return this._initted&&!this._pt&&h&&gt(this),this},t.to=function(e,n){return new t(e,n,arguments[2])},t.from=function(e,t){return Je(1,arguments)},t.delayedCall=function(e,n,r,a){return new t(n,0,{immediateRender:!1,lazy:!1,overwrite:!1,delay:e,onComplete:n,onReverseComplete:n,onCompleteParams:r,onReverseCompleteParams:r,callbackScope:a})},t.fromTo=function(e,t,n){return Je(2,arguments)},t.set=function(e,n){return n.duration=0,n.repeatDelay||(n.repeat=0),new t(e,n)},t.killTweensOf=function(e,t,n){return s.killTweensOf(e,t,n)},t}(Ht);xe(en.prototype,{_targets:[],_lazy:0,_startAt:0,_op:0,_onInit:0}),ge("staggerTo,staggerFrom,staggerFromTo",function(e){en[e]=function(){var t=new qt,n=nt.call(arguments,0);return n.splice("staggerFromTo"===e?5:4,0,0),t[e].apply(t,n)}});var tn=function(e,t,n){return e[t]=n},nn=function(e,t,n){return e[t](n)},rn=function(e,t,n,r){return e[t](r.fp,n)},an=function(e,t,n){return e.setAttribute(t,n)},on=function(e,t){return M(e[t])?nn:F(e[t])&&e.setAttribute?an:tn},ln=function(e,t){return t.set(t.t,t.p,Math.round(1e6*(t.s+t.c*e))/1e6,t)},sn=function(e,t){return t.set(t.t,t.p,!!(t.s+t.c*e),t)},un=function(e,t){var n=t._pt,r="";if(!e&&t.b)r=t.b;else if(1===e&&t.e)r=t.e;else{for(;n;)r=n.p+(n.m?n.m(n.s+n.c*e):Math.round(1e4*(n.s+n.c*e))/1e4)+r,n=n._next;r+=t.c}t.set(t.t,t.p,r,t)},cn=function(e,t){for(var n=t._pt;n;)n.r(e,n.d),n=n._next},fn=function(e,t,n,r){for(var a,i=this._pt;i;)a=i._next,i.p===r&&i.modifier(e,t,n),i=a},dn=function(e){for(var t,n,r=this._pt;r;)n=r._next,r.p===e&&!r.op||r.op===e?Oe(this,r,"_pt"):r.dep||(t=1),r=n;return!t},pn=function(e,t,n,r){r.mSet(e,t,r.m.call(r.tween,n,r.mt),r)},hn=function(e){for(var t,n,r,a,i=e._pt;i;){for(t=i._next,n=r;n&&n.pr>i.pr;)n=n._next;(i._prev=n?n._prev:a)?i._prev._next=i:r=i,(i._next=n)?n._prev=i:a=i,i=t}e._pt=r},mn=function(){function e(e,t,n,r,a,i,o,l,s){this.t=t,this.s=r,this.c=a,this.p=n,this.r=i||ln,this.d=o||this,this.set=l||tn,this.pr=s||0,this._next=e,e&&(e._prev=this)}return e.prototype.modifier=function(e,t,n){this.mSet=this.mSet||this.set,this.set=pn,this.m=e,this.mt=n,this.tween=t},e}();ge(de+"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger",function(e){return ie[e]=1}),X.TweenMax=X.TweenLite=en,X.TimelineLite=X.TimelineMax=qt,s=new qt({sortChildren:!1,defaults:k,autoRemoveChildren:!0,id:"root",smoothChildTiming:!0}),w.stringFilter=Et;var gn=[],vn={},yn=[],bn=0,An=0,_n=function(e){return(vn[e]||yn).map(function(e){return e()})},wn=function(){var e=Date.now(),t=[];e-bn>2&&(_n("matchMediaInit"),gn.forEach(function(e){var n,r,a,i,o=e.queries,l=e.conditions;for(r in o)(n=u.matchMedia(o[r]).matches)&&(a=1),n!==l[r]&&(l[r]=n,i=1);i&&(e.revert(),a&&t.push(e))}),_n("matchMediaRevert"),t.forEach(function(e){return e.onMatch(e,function(t){return e.add(null,t)})}),bn=e,_n("matchMedia"))},kn=function(){function e(e,t){this.selector=t&&it(t),this.data=[],this._r=[],this.isReverted=!1,this.id=An++,e&&this.add(e)}var t=e.prototype;return t.add=function(e,t,n){M(e)&&(n=t,t=e,e=M);var r=this,a=function(){var e,a=l,i=r.selector;return a&&a!==r&&a.data.push(r),n&&(r.selector=it(n)),l=r,e=t.apply(r,arguments),M(e)&&r._r.push(e),l=a,r.selector=i,r.isReverted=!1,e};return r.last=a,e===M?a(r,function(e){return r.add(null,e)}):e?r[e]=a:a},t.ignore=function(e){var t=l;l=null,e(this),l=t},t.getTweens=function(){var t=[];return this.data.forEach(function(n){return n instanceof e?t.push.apply(t,n.getTweens()):n instanceof en&&!(n.parent&&"nested"===n.parent.data)&&t.push(n)}),t},t.clear=function(){this._r.length=this.data.length=0},t.kill=function(e,t){var n=this;if(e?function(){for(var t,r=n.getTweens(),a=n.data.length;a--;)"isFlip"===(t=n.data[a]).data&&(t.revert(),t.getChildren(!0,!0,!1).forEach(function(e){return r.splice(r.indexOf(e),1)}));for(r.map(function(e){return{g:e._dur||e._delay||e._sat&&!e._sat.vars.immediateRender?e.globalTime(0):-1/0,t:e}}).sort(function(e,t){return t.g-e.g||-1/0}).forEach(function(t){return t.t.revert(e)}),a=n.data.length;a--;)(t=n.data[a])instanceof qt?"nested"!==t.data&&(t.scrollTrigger&&t.scrollTrigger.revert(),t.kill()):!(t instanceof en)&&t.revert&&t.revert(e);n._r.forEach(function(t){return t(e,n)}),n.isReverted=!0}():this.data.forEach(function(e){return e.kill&&e.kill()}),this.clear(),t)for(var r=gn.length;r--;)gn[r].id===this.id&&gn.splice(r,1)},t.revert=function(e){this.kill(e||{})},e}(),Cn=function(){function e(e){this.contexts=[],this.scope=e,l&&l.data.push(this)}var t=e.prototype;return t.add=function(e,t,n){R(e)||(e={matches:e});var r,a,i,o=new kn(0,n||this.scope),s=o.conditions={};for(a in l&&!o.selector&&(o.selector=l.selector),this.contexts.push(o),t=o.add("onMatch",t),o.queries=e,e)"all"===a?i=1:(r=u.matchMedia(e[a]))&&(gn.indexOf(o)<0&&gn.push(o),(s[a]=r.matches)&&(i=1),r.addListener?r.addListener(wn):r.addEventListener("change",wn));return i&&t(o,function(e){return o.add(null,e)}),this},t.revert=function(e){this.kill(e||{})},t.kill=function(e){this.contexts.forEach(function(t){return t.kill(e,!0)})},e}(),Sn={registerPlugin:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];t.forEach(function(e){return yt(e)})},timeline:function(e){return new qt(e)},getTweensOf:function(e,t){return s.getTweensOf(e,t)},getProperty:function(e,t,n,r){O(e)&&(e=at(e)[0]);var a=he(e||{}).get,i=n?Se:Ce;return"native"===n&&(n=""),e?t?i((se[t]&&se[t].get||a)(e,t,n,r)):function(t,n,r){return i((se[t]&&se[t].get||a)(e,t,n,r))}:e},quickSetter:function(e,t,n){if((e=at(e)).length>1){var r=e.map(function(e){return Tn.quickSetter(e,t,n)}),a=r.length;return function(e){for(var t=a;t--;)r[t](e)}}e=e[0]||{};var i=se[t],o=he(e),l=o.harness&&(o.harness.aliases||{})[t]||t,s=i?function(t){var r=new i;h._pt=0,r.init(e,n?t+n:t,h,0,[e]),r.render(1,r),h._pt&&cn(1,h)}:o.set(e,l);return i?s:function(t){return s(e,l,n?t+n:t,o,1)}},quickTo:function(e,t,n){var r,a=Tn.to(e,xe(((r={})[t]="+=0.1",r.paused=!0,r.stagger=0,r),n||{})),i=function(e,n,r){return a.resetTo(t,e,n,r)};return i.tween=a,i},isTweening:function(e){return s.getTweensOf(e,!0).length>0},defaults:function(e){return e&&e.ease&&(e.ease=Rt(e.ease,k.ease)),Te(k,e||{})},config:function(e){return Te(w,e||{})},registerEffect:function(e){var t=e.name,n=e.effect,r=e.plugins,a=e.defaults,i=e.extendTimeline;(r||"").split(",").forEach(function(e){return e&&!se[e]&&!X[e]&&Z(t+" effect requires "+e+" plugin.")}),ue[t]=function(e,t,r){return n(at(e),xe(t||{},a),r)},i&&(qt.prototype[t]=function(e,n,r){return this.add(ue[t](e,R(n)?n:(r=n)&&{},this),r)})},registerEase:function(e,t){zt[e]=Rt(t)},parseEase:function(e,t){return arguments.length?Rt(e,t):zt},getById:function(e){return s.getById(e)},exportRoot:function(e,t){void 0===e&&(e={});var n,r,a=new qt(e);for(a.smoothChildTiming=D(e.smoothChildTiming),s.remove(a),a._dp=0,a._time=a._tTime=s._time,n=s._first;n;)r=n._next,!t&&!n._dur&&n instanceof en&&n.vars.onComplete===n._targets[0]||qe(a,n,n._start-n._delay),n=r;return qe(s,a,0),a},context:function(e,t){return e?new kn(e,t):l},matchMedia:function(e){return new Cn(e)},matchMediaRefresh:function(){return gn.forEach(function(e){var t,n,r=e.conditions;for(n in r)r[n]&&(r[n]=!1,t=1);t&&e.revert()})||wn()},addEventListener:function(e,t){var n=vn[e]||(vn[e]=[]);~n.indexOf(t)||n.push(t)},removeEventListener:function(e,t){var n=vn[e],r=n&&n.indexOf(t);r>=0&&n.splice(r,1)},utils:{wrap:function e(t,n,r){var a=n-t;return U(t)?ft(t,e(0,t.length),n):Ze(r,function(e){return(a+(e-t)%a)%a+t})},wrapYoyo:function e(t,n,r){var a=n-t,i=2*a;return U(t)?ft(t,e(0,t.length-1),n):Ze(r,function(e){return t+((e=(i+(e-t)%i)%i||0)>a?i-e:e)})},distribute:lt,random:ct,snap:ut,normalize:function(e,t,n){return pt(e,t,0,1,n)},getUnit:tt,clamp:function(e,t,n){return Ze(n,function(n){return et(e,t,n)})},splitColor:wt,toArray:at,selector:it,mapRange:pt,pipe:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return t.reduce(function(e,t){return t(e)},e)}},unitize:function(e,t){return function(n){return e(parseFloat(n))+(t||tt(n))}},interpolate:function e(t,n,r,a){var i=isNaN(t+n)?0:function(e){return(1-e)*t+e*n};if(!i){var o,l,s,u,c,f=O(t),d={};if(!0===r&&(a=1)&&(r=null),f)t={p:t},n={p:n};else if(U(t)&&!U(n)){for(s=[],u=t.length,c=u-2,l=1;l<u;l++)s.push(e(t[l-1],t[l]));u--,i=function(e){e*=u;var t=Math.min(c,~~e);return s[t](e-t)},r=n}else a||(t=Ee(U(t)?[]:{},t));if(!s){for(o in n)Qt.call(d,t,o,"get",n[o]);i=function(e){return cn(e,d)||(f?t.p:t)}}}return Ze(r,i)},shuffle:ot},install:K,effects:ue,ticker:Tt,updateRoot:qt.updateRoot,plugins:se,globalTimeline:s,core:{PropTween:mn,globals:ee,Tween:en,Timeline:qt,Animation:Ht,getCache:he,_removeLinkedListItem:Oe,reverting:function(){return o},context:function(e){return e&&l&&(l.data.push(e),e._ctx=l),l},suppressOverwrites:function(e){return i=e}}};ge("to,from,fromTo,delayedCall,set,killTweensOf",function(e){return Sn[e]=en[e]}),Tt.add(qt.updateRoot),h=Sn.to({},{duration:0});var xn=function(e,t){for(var n=e._pt;n&&n.p!==t&&n.op!==t&&n.fp!==t;)n=n._next;return n},En=function(e,t){return{name:e,headless:1,rawVars:1,init:function(e,n,r){r._onInit=function(e){var r,a;if(O(n)&&(r={},ge(n,function(e){return r[e]=1}),n=r),t){for(a in r={},n)r[a]=t(n[a]);n=r}!function(e,t){var n,r,a,i=e._targets;for(n in t)for(r=i.length;r--;)(a=e._ptLookup[r][n])&&(a=a.d)&&(a._pt&&(a=xn(a,n)),a&&a.modifier&&a.modifier(t[n],e,i[r],n))}(e,n)}}}},Tn=Sn.registerPlugin({name:"attr",init:function(e,t,n,r,a){var i,o,l;for(i in this.tween=n,t)l=e.getAttribute(i)||"",(o=this.add(e,"setAttribute",(l||0)+"",t[i],r,a,0,0,i)).op=i,o.b=l,this._props.push(i)},render:function(e,t){for(var n=t._pt;n;)o?n.set(n.t,n.p,n.b,n):n.r(e,n.d),n=n._next}},{name:"endArray",headless:1,init:function(e,t){for(var n=t.length;n--;)this.add(e,n,e[n]||0,t[n],0,0,0,0,0,1)}},En("roundProps",st),En("modifiers"),En("snap",ut))||Sn;en.version=qt.version=Tn.version="3.13.0",d=1,B()&&Pt(),zt.Power0,zt.Power1,zt.Power2,zt.Power3,zt.Power4,zt.Linear,zt.Quad,zt.Cubic,zt.Quart,zt.Quint,zt.Strong,zt.Elastic,zt.Back,zt.SteppedEase,zt.Bounce,zt.Sine,zt.Expo,zt.Circ;var Pn,zn,Nn,On,Mn,Ln,Fn,Rn,Dn={},Bn=180/Math.PI,In=Math.PI/180,jn=Math.atan2,Un=/([A-Z])/g,Hn=/(left|right|width|margin|padding|x)/i,qn=/[\s,\(]\S/,$n={autoAlpha:"opacity,visibility",scale:"scaleX,scaleY",alpha:"opacity"},Yn=function(e,t){return t.set(t.t,t.p,Math.round(1e4*(t.s+t.c*e))/1e4+t.u,t)},Vn=function(e,t){return t.set(t.t,t.p,1===e?t.e:Math.round(1e4*(t.s+t.c*e))/1e4+t.u,t)},Qn=function(e,t){return t.set(t.t,t.p,e?Math.round(1e4*(t.s+t.c*e))/1e4+t.u:t.b,t)},Wn=function(e,t){var n=t.s+t.c*e;t.set(t.t,t.p,~~(n+(n<0?-.5:.5))+t.u,t)},Xn=function(e,t){return t.set(t.t,t.p,e?t.e:t.b,t)},Gn=function(e,t){return t.set(t.t,t.p,1!==e?t.b:t.e,t)},Kn=function(e,t,n){return e.style[t]=n},Jn=function(e,t,n){return e.style.setProperty(t,n)},Zn=function(e,t,n){return e._gsap[t]=n},er=function(e,t,n){return e._gsap.scaleX=e._gsap.scaleY=n},tr=function(e,t,n,r,a){var i=e._gsap;i.scaleX=i.scaleY=n,i.renderTransform(a,i)},nr=function(e,t,n,r,a){var i=e._gsap;i[t]=n,i.renderTransform(a,i)},rr="transform",ar=rr+"Origin",ir=function e(t,n){var r=this,a=this.target,i=a.style,o=a._gsap;if(t in Dn&&i){if(this.tfm=this.tfm||{},"transform"===t)return $n.transform.split(",").forEach(function(t){return e.call(r,t,n)});if(~(t=$n[t]||t).indexOf(",")?t.split(",").forEach(function(e){return r.tfm[e]=kr(a,e)}):this.tfm[t]=o.x?o[t]:kr(a,t),t===ar&&(this.tfm.zOrigin=o.zOrigin),this.props.indexOf(rr)>=0)return;o.svg&&(this.svgo=a.getAttribute("data-svg-origin"),this.props.push(ar,n,"")),t=rr}(i||n)&&this.props.push(t,n,i[t])},or=function(e){e.translate&&(e.removeProperty("translate"),e.removeProperty("scale"),e.removeProperty("rotate"))},lr=function(){var e,t,n=this.props,r=this.target,a=r.style,i=r._gsap;for(e=0;e<n.length;e+=3)n[e+1]?2===n[e+1]?r[n[e]](n[e+2]):r[n[e]]=n[e+2]:n[e+2]?a[n[e]]=n[e+2]:a.removeProperty("--"===n[e].substr(0,2)?n[e]:n[e].replace(Un,"-$1").toLowerCase());if(this.tfm){for(t in this.tfm)i[t]=this.tfm[t];i.svg&&(i.renderTransform(),r.setAttribute("data-svg-origin",this.svgo||"")),(e=Fn())&&e.isStart||a[rr]||(or(a),i.zOrigin&&a[ar]&&(a[ar]+=" "+i.zOrigin+"px",i.zOrigin=0,i.renderTransform()),i.uncache=1)}},sr=function(e,t){var n={target:e,props:[],revert:lr,save:ir};return e._gsap||Tn.core.getCache(e),t&&e.style&&e.nodeType&&t.split(",").forEach(function(e){return n.save(e)}),n},ur=function(e,t){var n=zn.createElementNS?zn.createElementNS((t||"http://www.w3.org/1999/xhtml").replace(/^https/,"http"),e):zn.createElement(e);return n&&n.style?n:zn.createElement(e)},cr=function e(t,n,r){var a=getComputedStyle(t);return a[n]||a.getPropertyValue(n.replace(Un,"-$1").toLowerCase())||a.getPropertyValue(n)||!r&&e(t,dr(n)||n,1)||""},fr="O,Moz,ms,Ms,Webkit".split(","),dr=function(e,t,n){var r=(t||Mn).style,a=5;if(e in r&&!n)return e;for(e=e.charAt(0).toUpperCase()+e.substr(1);a--&&!(fr[a]+e in r););return a<0?null:(3===a?"ms":a>=0?fr[a]:"")+e},pr=function(){"undefined"!=typeof window&&window.document&&(Pn=window,zn=Pn.document,Nn=zn.documentElement,Mn=ur("div")||{style:{}},ur("div"),rr=dr(rr),ar=rr+"Origin",Mn.style.cssText="border-width:0;line-height:0;position:absolute;padding:0",Rn=!!dr("perspective"),Fn=Tn.core.reverting,On=1)},hr=function(e){var t,n=e.ownerSVGElement,r=ur("svg",n&&n.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),a=e.cloneNode(!0);a.style.display="block",r.appendChild(a),Nn.appendChild(r);try{t=a.getBBox()}catch(e){}return r.removeChild(a),Nn.removeChild(r),t},mr=function(e,t){for(var n=t.length;n--;)if(e.hasAttribute(t[n]))return e.getAttribute(t[n])},gr=function(e){var t,n;try{t=e.getBBox()}catch(r){t=hr(e),n=1}return t&&(t.width||t.height)||n||(t=hr(e)),!t||t.width||t.x||t.y?t:{x:+mr(e,["x","cx","x1"])||0,y:+mr(e,["y","cy","y1"])||0,width:0,height:0}},vr=function(e){return!(!e.getCTM||e.parentNode&&!e.ownerSVGElement||!gr(e))},yr=function(e,t){if(t){var n,r=e.style;t in Dn&&t!==ar&&(t=rr),r.removeProperty?("ms"!==(n=t.substr(0,2))&&"webkit"!==t.substr(0,6)||(t="-"+t),r.removeProperty("--"===n?t:t.replace(Un,"-$1").toLowerCase())):r.removeAttribute(t)}},br=function(e,t,n,r,a,i){var o=new mn(e._pt,t,n,0,1,i?Gn:Xn);return e._pt=o,o.b=r,o.e=a,e._props.push(n),o},Ar={deg:1,rad:1,turn:1},_r={grid:1,flex:1},wr=function e(t,n,r,a){var i,o,l,s,u=parseFloat(r)||0,c=(r+"").trim().substr((u+"").length)||"px",f=Mn.style,d=Hn.test(n),p="svg"===t.tagName.toLowerCase(),h=(p?"client":"offset")+(d?"Width":"Height"),m=100,g="px"===a,v="%"===a;if(a===c||!u||Ar[a]||Ar[c])return u;if("px"!==c&&!g&&(u=e(t,n,r,"px")),s=t.getCTM&&vr(t),(v||"%"===c)&&(Dn[n]||~n.indexOf("adius")))return i=s?t.getBBox()[d?"width":"height"]:t[h],ve(v?u/i*m:u/100*i);if(f[d?"width":"height"]=m+(g?c:a),o="rem"!==a&&~n.indexOf("adius")||"em"===a&&t.appendChild&&!p?t:t.parentNode,s&&(o=(t.ownerSVGElement||{}).parentNode),o&&o!==zn&&o.appendChild||(o=zn.body),(l=o._gsap)&&v&&l.width&&d&&l.time===Tt.time&&!l.uncache)return ve(u/l.width*m);if(!v||"height"!==n&&"width"!==n)(v||"%"===c)&&!_r[cr(o,"display")]&&(f.position=cr(t,"position")),o===t&&(f.position="static"),o.appendChild(Mn),i=Mn[h],o.removeChild(Mn),f.position="absolute";else{var y=t.style[n];t.style[n]=m+a,i=t[h],y?t.style[n]=y:yr(t,n)}return d&&v&&((l=he(o)).time=Tt.time,l.width=o[h]),ve(g?i*u/m:i&&u?m/i*u:0)},kr=function(e,t,n,r){var a;return On||pr(),t in $n&&"transform"!==t&&~(t=$n[t]).indexOf(",")&&(t=t.split(",")[0]),Dn[t]&&"transform"!==t?(a=Fr(e,r),a="transformOrigin"!==t?a[t]:a.svg?a.origin:Rr(cr(e,ar))+" "+a.zOrigin+"px"):(!(a=e.style[t])||"auto"===a||r||~(a+"").indexOf("calc("))&&(a=Tr[t]&&Tr[t](e,t,n)||cr(e,t)||me(e,t)||("opacity"===t?1:0)),n&&!~(a+"").trim().indexOf(" ")?wr(e,t,a,n)+n:a},Cr=function(e,t,n,r){if(!n||"none"===n){var a=dr(t,e,1),i=a&&cr(e,a,1);i&&i!==n?(t=a,n=i):"borderColor"===t&&(n=cr(e,"borderTopColor"))}var o,l,s,u,c,f,d,p,h,m,g,v=new mn(this._pt,e.style,t,0,1,un),y=0,b=0;if(v.b=n,v.e=r,n+="","var(--"===(r+="").substring(0,6)&&(r=cr(e,r.substring(4,r.indexOf(")")))),"auto"===r&&(f=e.style[t],e.style[t]=r,r=cr(e,t)||r,f?e.style[t]=f:yr(e,t)),Et(o=[n,r]),r=o[1],s=(n=o[0]).match($)||[],(r.match($)||[]).length){for(;l=$.exec(r);)d=l[0],h=r.substring(y,l.index),c?c=(c+1)%5:"rgba("!==h.substr(-5)&&"hsla("!==h.substr(-5)||(c=1),d!==(f=s[b++]||"")&&(u=parseFloat(f)||0,g=f.substr((u+"").length),"="===d.charAt(1)&&(d=be(u,d)+g),p=parseFloat(d),m=d.substr((p+"").length),y=$.lastIndex-m.length,m||(m=m||w.units[t]||g,y===r.length&&(r+=m,v.e+=m)),g!==m&&(u=wr(e,t,f,m)||0),v._pt={_next:v._pt,p:h||1===b?h:",",s:u,c:p-u,m:c&&c<4||"zIndex"===t?Math.round:0});v.c=y<r.length?r.substring(y,r.length):""}else v.r="display"===t&&"none"===r?Gn:Xn;return V.test(r)&&(v.e=0),this._pt=v,v},Sr={top:"0%",bottom:"100%",left:"0%",right:"100%",center:"50%"},xr=function(e){var t=e.split(" "),n=t[0],r=t[1]||"50%";return"top"!==n&&"bottom"!==n&&"left"!==r&&"right"!==r||(e=n,n=r,r=e),t[0]=Sr[n]||n,t[1]=Sr[r]||r,t.join(" ")},Er=function(e,t){if(t.tween&&t.tween._time===t.tween._dur){var n,r,a,i=t.t,o=i.style,l=t.u,s=i._gsap;if("all"===l||!0===l)o.cssText="",r=1;else for(a=(l=l.split(",")).length;--a>-1;)n=l[a],Dn[n]&&(r=1,n="transformOrigin"===n?ar:rr),yr(i,n);r&&(yr(i,rr),s&&(s.svg&&i.removeAttribute("transform"),o.scale=o.rotate=o.translate="none",Fr(i,1),s.uncache=1,or(o)))}},Tr={clearProps:function(e,t,n,r,a){if("isFromStart"!==a.data){var i=e._pt=new mn(e._pt,t,n,0,0,Er);return i.u=r,i.pr=-10,i.tween=a,e._props.push(n),1}}},Pr=[1,0,0,1,0,0],zr={},Nr=function(e){return"matrix(1, 0, 0, 1, 0, 0)"===e||"none"===e||!e},Or=function(e){var t=cr(e,rr);return Nr(t)?Pr:t.substr(7).match(q).map(ve)},Mr=function(e,t){var n,r,a,i,o=e._gsap||he(e),l=e.style,s=Or(e);return o.svg&&e.getAttribute("transform")?"1,0,0,1,0,0"===(s=[(a=e.transform.baseVal.consolidate().matrix).a,a.b,a.c,a.d,a.e,a.f]).join(",")?Pr:s:(s!==Pr||e.offsetParent||e===Nn||o.svg||(a=l.display,l.display="block",(n=e.parentNode)&&(e.offsetParent||e.getBoundingClientRect().width)||(i=1,r=e.nextElementSibling,Nn.appendChild(e)),s=Or(e),a?l.display=a:yr(e,"display"),i&&(r?n.insertBefore(e,r):n?n.appendChild(e):Nn.removeChild(e))),t&&s.length>6?[s[0],s[1],s[4],s[5],s[12],s[13]]:s)},Lr=function(e,t,n,r,a,i){var o,l,s,u=e._gsap,c=a||Mr(e,!0),f=u.xOrigin||0,d=u.yOrigin||0,p=u.xOffset||0,h=u.yOffset||0,m=c[0],g=c[1],v=c[2],y=c[3],b=c[4],A=c[5],_=t.split(" "),w=parseFloat(_[0])||0,k=parseFloat(_[1])||0;n?c!==Pr&&(l=m*y-g*v)&&(s=w*(-g/l)+k*(m/l)-(m*A-g*b)/l,w=w*(y/l)+k*(-v/l)+(v*A-y*b)/l,k=s):(w=(o=gr(e)).x+(~_[0].indexOf("%")?w/100*o.width:w),k=o.y+(~(_[1]||_[0]).indexOf("%")?k/100*o.height:k)),r||!1!==r&&u.smooth?(b=w-f,A=k-d,u.xOffset=p+(b*m+A*v)-b,u.yOffset=h+(b*g+A*y)-A):u.xOffset=u.yOffset=0,u.xOrigin=w,u.yOrigin=k,u.smooth=!!r,u.origin=t,u.originIsAbsolute=!!n,e.style[ar]="0px 0px",i&&(br(i,u,"xOrigin",f,w),br(i,u,"yOrigin",d,k),br(i,u,"xOffset",p,u.xOffset),br(i,u,"yOffset",h,u.yOffset)),e.setAttribute("data-svg-origin",w+" "+k)},Fr=function(e,t){var n=e._gsap||new Ut(e);if("x"in n&&!t&&!n.uncache)return n;var r,a,i,o,l,s,u,c,f,d,p,h,m,g,v,y,b,A,_,k,C,S,x,E,T,P,z,N,O,M,L,F,R=e.style,D=n.scaleX<0,B="px",I="deg",j=getComputedStyle(e),U=cr(e,ar)||"0";return r=a=i=s=u=c=f=d=p=0,o=l=1,n.svg=!(!e.getCTM||!vr(e)),j.translate&&("none"===j.translate&&"none"===j.scale&&"none"===j.rotate||(R[rr]=("none"!==j.translate?"translate3d("+(j.translate+" 0 0").split(" ").slice(0,3).join(", ")+") ":"")+("none"!==j.rotate?"rotate("+j.rotate+") ":"")+("none"!==j.scale?"scale("+j.scale.split(" ").join(",")+") ":"")+("none"!==j[rr]?j[rr]:"")),R.scale=R.rotate=R.translate="none"),g=Mr(e,n.svg),n.svg&&(n.uncache?(T=e.getBBox(),U=n.xOrigin-T.x+"px "+(n.yOrigin-T.y)+"px",E=""):E=!t&&e.getAttribute("data-svg-origin"),Lr(e,E||U,!!E||n.originIsAbsolute,!1!==n.smooth,g)),h=n.xOrigin||0,m=n.yOrigin||0,g!==Pr&&(A=g[0],_=g[1],k=g[2],C=g[3],r=S=g[4],a=x=g[5],6===g.length?(o=Math.sqrt(A*A+_*_),l=Math.sqrt(C*C+k*k),s=A||_?jn(_,A)*Bn:0,(f=k||C?jn(k,C)*Bn+s:0)&&(l*=Math.abs(Math.cos(f*In))),n.svg&&(r-=h-(h*A+m*k),a-=m-(h*_+m*C))):(F=g[6],M=g[7],z=g[8],N=g[9],O=g[10],L=g[11],r=g[12],a=g[13],i=g[14],u=(v=jn(F,O))*Bn,v&&(E=S*(y=Math.cos(-v))+z*(b=Math.sin(-v)),T=x*y+N*b,P=F*y+O*b,z=S*-b+z*y,N=x*-b+N*y,O=F*-b+O*y,L=M*-b+L*y,S=E,x=T,F=P),c=(v=jn(-k,O))*Bn,v&&(y=Math.cos(-v),L=C*(b=Math.sin(-v))+L*y,A=E=A*y-z*b,_=T=_*y-N*b,k=P=k*y-O*b),s=(v=jn(_,A))*Bn,v&&(E=A*(y=Math.cos(v))+_*(b=Math.sin(v)),T=S*y+x*b,_=_*y-A*b,x=x*y-S*b,A=E,S=T),u&&Math.abs(u)+Math.abs(s)>359.9&&(u=s=0,c=180-c),o=ve(Math.sqrt(A*A+_*_+k*k)),l=ve(Math.sqrt(x*x+F*F)),v=jn(S,x),f=Math.abs(v)>2e-4?v*Bn:0,p=L?1/(L<0?-L:L):0),n.svg&&(E=e.getAttribute("transform"),n.forceCSS=e.setAttribute("transform","")||!Nr(cr(e,rr)),E&&e.setAttribute("transform",E))),Math.abs(f)>90&&Math.abs(f)<270&&(D?(o*=-1,f+=s<=0?180:-180,s+=s<=0?180:-180):(l*=-1,f+=f<=0?180:-180)),t=t||n.uncache,n.x=r-((n.xPercent=r&&(!t&&n.xPercent||(Math.round(e.offsetWidth/2)===Math.round(-r)?-50:0)))?e.offsetWidth*n.xPercent/100:0)+B,n.y=a-((n.yPercent=a&&(!t&&n.yPercent||(Math.round(e.offsetHeight/2)===Math.round(-a)?-50:0)))?e.offsetHeight*n.yPercent/100:0)+B,n.z=i+B,n.scaleX=ve(o),n.scaleY=ve(l),n.rotation=ve(s)+I,n.rotationX=ve(u)+I,n.rotationY=ve(c)+I,n.skewX=f+I,n.skewY=d+I,n.transformPerspective=p+B,(n.zOrigin=parseFloat(U.split(" ")[2])||!t&&n.zOrigin||0)&&(R[ar]=Rr(U)),n.xOffset=n.yOffset=0,n.force3D=w.force3D,n.renderTransform=n.svg?qr:Rn?Hr:Br,n.uncache=0,n},Rr=function(e){return(e=e.split(" "))[0]+" "+e[1]},Dr=function(e,t,n){var r=tt(t);return ve(parseFloat(t)+parseFloat(wr(e,"x",n+"px",r)))+r},Br=function(e,t){t.z="0px",t.rotationY=t.rotationX="0deg",t.force3D=0,Hr(e,t)},Ir="0deg",jr="0px",Ur=") ",Hr=function(e,t){var n=t||this,r=n.xPercent,a=n.yPercent,i=n.x,o=n.y,l=n.z,s=n.rotation,u=n.rotationY,c=n.rotationX,f=n.skewX,d=n.skewY,p=n.scaleX,h=n.scaleY,m=n.transformPerspective,g=n.force3D,v=n.target,y=n.zOrigin,b="",A="auto"===g&&e&&1!==e||!0===g;if(y&&(c!==Ir||u!==Ir)){var _,w=parseFloat(u)*In,k=Math.sin(w),C=Math.cos(w);w=parseFloat(c)*In,_=Math.cos(w),i=Dr(v,i,k*_*-y),o=Dr(v,o,-Math.sin(w)*-y),l=Dr(v,l,C*_*-y+y)}m!==jr&&(b+="perspective("+m+Ur),(r||a)&&(b+="translate("+r+"%, "+a+"%) "),(A||i!==jr||o!==jr||l!==jr)&&(b+=l!==jr||A?"translate3d("+i+", "+o+", "+l+") ":"translate("+i+", "+o+Ur),s!==Ir&&(b+="rotate("+s+Ur),u!==Ir&&(b+="rotateY("+u+Ur),c!==Ir&&(b+="rotateX("+c+Ur),f===Ir&&d===Ir||(b+="skew("+f+", "+d+Ur),1===p&&1===h||(b+="scale("+p+", "+h+Ur),v.style[rr]=b||"translate(0, 0)"},qr=function(e,t){var n,r,a,i,o,l=t||this,s=l.xPercent,u=l.yPercent,c=l.x,f=l.y,d=l.rotation,p=l.skewX,h=l.skewY,m=l.scaleX,g=l.scaleY,v=l.target,y=l.xOrigin,b=l.yOrigin,A=l.xOffset,_=l.yOffset,w=l.forceCSS,k=parseFloat(c),C=parseFloat(f);d=parseFloat(d),p=parseFloat(p),(h=parseFloat(h))&&(p+=h=parseFloat(h),d+=h),d||p?(d*=In,p*=In,n=Math.cos(d)*m,r=Math.sin(d)*m,a=Math.sin(d-p)*-g,i=Math.cos(d-p)*g,p&&(h*=In,o=Math.tan(p-h),a*=o=Math.sqrt(1+o*o),i*=o,h&&(o=Math.tan(h),n*=o=Math.sqrt(1+o*o),r*=o)),n=ve(n),r=ve(r),a=ve(a),i=ve(i)):(n=m,i=g,r=a=0),(k&&!~(c+"").indexOf("px")||C&&!~(f+"").indexOf("px"))&&(k=wr(v,"x",c,"px"),C=wr(v,"y",f,"px")),(y||b||A||_)&&(k=ve(k+y-(y*n+b*a)+A),C=ve(C+b-(y*r+b*i)+_)),(s||u)&&(o=v.getBBox(),k=ve(k+s/100*o.width),C=ve(C+u/100*o.height)),o="matrix("+n+","+r+","+a+","+i+","+k+","+C+")",v.setAttribute("transform",o),w&&(v.style[rr]=o)},$r=function(e,t,n,r,a){var i,o,l=360,s=O(a),u=parseFloat(a)*(s&&~a.indexOf("rad")?Bn:1)-r,c=r+u+"deg";return s&&("short"===(i=a.split("_")[1])&&(u%=l)!==u%180&&(u+=u<0?l:-360),"cw"===i&&u<0?u=(u+36e9)%l-~~(u/l)*l:"ccw"===i&&u>0&&(u=(u-36e9)%l-~~(u/l)*l)),e._pt=o=new mn(e._pt,t,n,r,u,Vn),o.e=c,o.u="deg",e._props.push(n),o},Yr=function(e,t){for(var n in t)e[n]=t[n];return e},Vr=function(e,t,n){var r,a,i,o,l,s,u,c=Yr({},n._gsap),f=n.style;for(a in c.svg?(i=n.getAttribute("transform"),n.setAttribute("transform",""),f[rr]=t,r=Fr(n,1),yr(n,rr),n.setAttribute("transform",i)):(i=getComputedStyle(n)[rr],f[rr]=t,r=Fr(n,1),f[rr]=i),Dn)(i=c[a])!==(o=r[a])&&"perspective,force3D,transformOrigin,svgOrigin".indexOf(a)<0&&(l=tt(i)!==(u=tt(o))?wr(n,a,i,u):parseFloat(i),s=parseFloat(o),e._pt=new mn(e._pt,r,a,l,s-l,Yn),e._pt.u=u||0,e._props.push(a));Yr(r,c)};ge("padding,margin,Width,Radius",function(e,t){var n="Top",r="Right",a="Bottom",i="Left",o=(t<3?[n,r,a,i]:[n+i,n+r,a+r,a+i]).map(function(n){return t<2?e+n:"border"+n+e});Tr[t>1?"border"+e:e]=function(e,t,n,r,a){var i,l;if(arguments.length<4)return i=o.map(function(t){return kr(e,t,n)}),5===(l=i.join(" ")).split(i[0]).length?i[0]:l;i=(r+"").split(" "),l={},o.forEach(function(e,t){return l[e]=i[t]=i[t]||i[(t-1)/2|0]}),e.init(t,l,a)}});var Qr,Wr,Xr={name:"css",register:pr,targetTest:function(e){return e.style&&e.nodeType},init:function(e,t,n,r,a){var i,o,l,s,u,c,f,d,p,h,m,g,v,y,b,A,_=this._props,k=e.style,C=n.vars.startAt;for(f in On||pr(),this.styles=this.styles||sr(e),A=this.styles.props,this.tween=n,t)if("autoRound"!==f&&(o=t[f],!se[f]||!Wt(f,t,n,r,e,a)))if(u=typeof o,c=Tr[f],"function"===u&&(u=typeof(o=o.call(n,r,e,a))),"string"===u&&~o.indexOf("random(")&&(o=dt(o)),c)c(this,e,f,o,n)&&(b=1);else if("--"===f.substr(0,2))i=(getComputedStyle(e).getPropertyValue(f)+"").trim(),o+="",St.lastIndex=0,St.test(i)||(d=tt(i),p=tt(o)),p?d!==p&&(i=wr(e,f,i,p)+p):d&&(o+=d),this.add(k,"setProperty",i,o,r,a,0,0,f),_.push(f),A.push(f,0,k[f]);else if("undefined"!==u){if(C&&f in C?(i="function"==typeof C[f]?C[f].call(n,r,e,a):C[f],O(i)&&~i.indexOf("random(")&&(i=dt(i)),tt(i+"")||"auto"===i||(i+=w.units[f]||tt(kr(e,f))||""),"="===(i+"").charAt(1)&&(i=kr(e,f))):i=kr(e,f),s=parseFloat(i),(h="string"===u&&"="===o.charAt(1)&&o.substr(0,2))&&(o=o.substr(2)),l=parseFloat(o),f in $n&&("autoAlpha"===f&&(1===s&&"hidden"===kr(e,"visibility")&&l&&(s=0),A.push("visibility",0,k.visibility),br(this,k,"visibility",s?"inherit":"hidden",l?"inherit":"hidden",!l)),"scale"!==f&&"transform"!==f&&~(f=$n[f]).indexOf(",")&&(f=f.split(",")[0])),m=f in Dn)if(this.styles.save(f),"string"===u&&"var(--"===o.substring(0,6)&&(o=cr(e,o.substring(4,o.indexOf(")"))),l=parseFloat(o)),g||((v=e._gsap).renderTransform&&!t.parseTransform||Fr(e,t.parseTransform),y=!1!==t.smoothOrigin&&v.smooth,(g=this._pt=new mn(this._pt,k,rr,0,1,v.renderTransform,v,0,-1)).dep=1),"scale"===f)this._pt=new mn(this._pt,v,"scaleY",v.scaleY,(h?be(v.scaleY,h+l):l)-v.scaleY||0,Yn),this._pt.u=0,_.push("scaleY",f),f+="X";else{if("transformOrigin"===f){A.push(ar,0,k[ar]),o=xr(o),v.svg?Lr(e,o,0,y,0,this):((p=parseFloat(o.split(" ")[2])||0)!==v.zOrigin&&br(this,v,"zOrigin",v.zOrigin,p),br(this,k,f,Rr(i),Rr(o)));continue}if("svgOrigin"===f){Lr(e,o,1,y,0,this);continue}if(f in zr){$r(this,v,f,s,h?be(s,h+o):o);continue}if("smoothOrigin"===f){br(this,v,"smooth",v.smooth,o);continue}if("force3D"===f){v[f]=o;continue}if("transform"===f){Vr(this,o,e);continue}}else f in k||(f=dr(f)||f);if(m||(l||0===l)&&(s||0===s)&&!qn.test(o)&&f in k)l||(l=0),(d=(i+"").substr((s+"").length))!==(p=tt(o)||(f in w.units?w.units[f]:d))&&(s=wr(e,f,i,p)),this._pt=new mn(this._pt,m?v:k,f,s,(h?be(s,h+l):l)-s,m||"px"!==p&&"zIndex"!==f||!1===t.autoRound?Yn:Wn),this._pt.u=p||0,d!==p&&"%"!==p&&(this._pt.b=i,this._pt.r=Qn);else if(f in k)Cr.call(this,e,f,i,h?h+o:o);else if(f in e)this.add(e,f,i||e[f],h?h+o:o,r,a);else if("parseTransform"!==f){J(f,o);continue}m||(f in k?A.push(f,0,k[f]):"function"==typeof e[f]?A.push(f,2,e[f]()):A.push(f,1,i||e[f])),_.push(f)}b&&hn(this)},render:function(e,t){if(t.tween._time||!Fn())for(var n=t._pt;n;)n.r(e,n.d),n=n._next;else t.styles.revert()},get:kr,aliases:$n,getSetter:function(e,t,n){var r=$n[t];return r&&r.indexOf(",")<0&&(t=r),t in Dn&&t!==ar&&(e._gsap.x||kr(e,"x"))?n&&Ln===n?"scale"===t?er:Zn:(Ln=n||{})&&("scale"===t?tr:nr):e.style&&!F(e.style[t])?Kn:~t.indexOf("-")?Jn:on(e,t)},core:{_removeProperty:yr,_getMatrix:Mr}};Tn.utils.checkPrefix=dr,Tn.core.getStyleSaver=sr,Wr=ge("x,y,z,scale,scaleX,scaleY,xPercent,yPercent"+","+(Qr="rotation,rotationX,rotationY,skewX,skewY")+",transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective",function(e){Dn[e]=1}),ge(Qr,function(e){w.units[e]="deg",zr[e]=1}),$n[Wr[13]]="x,y,z,scale,scaleX,scaleY,xPercent,yPercent,"+Qr,ge("0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY",function(e){var t=e.split(":");$n[t[1]]=Wr[t[0]]}),ge("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective",function(e){w.units[e]="px"}),Tn.registerPlugin(Xr);var Gr=Tn.registerPlugin(Xr)||Tn;Gr.core.Tween},899:(e,t,n)=>{var r=n(354),a=n(314)(r);a.push([e.id,'.section__TX1Cz{position:relative;width:90% !important;right:-3rem;height:67.5rem;width:calc(100% - 10rem);max-width:90rem;margin:0 auto;border-left:1.8px solid rgba(66,86,122,.1254901961);border-right:1.8px solid rgba(66,86,122,.1254901961);box-sizing:border-box;backface-visibility:hidden;transform:translateZ(0)}.section__TX1Cz::before,.section__TX1Cz::after{content:"";z-index:-1;position:absolute;background-color:rgba(66,86,122,.1254901961);will-change:transform}.section__TX1Cz::before{left:50%;width:1.8px;height:100%;transform:translateX(-50%)}.section__TX1Cz::after{top:30rem;left:0;width:100%;height:1.8px;transform:translateY(-50%)}.sectionTitle__QfbAg{position:absolute;width:22.06rem;display:flex;align-items:center;height:7.5rem;padding-left:4.875rem;font-size:clamp(3rem,4vw,3.5rem);color:#42567a;margin:0;top:10.625rem;font-family:"PT Sans Bold"}.sectionTitle__QfbAg::before{content:"";position:absolute;top:0;left:0;width:5px;height:100%;background:linear-gradient(to bottom, #3877ee, #ef5da8)}@media(max-width: 1540px){.section__TX1Cz{right:0}}@media(max-width: 1150px){.sectionTitle__QfbAg{top:7rem;padding-left:3rem}}@media(max-width: 900px){.section__TX1Cz{height:100vh;border:none}.section__TX1Cz::before{content:none}.section__TX1Cz::after{top:19rem}.sectionTitle__QfbAg{width:calc(25vw + 10px);padding-left:0;top:calc(7vw - 20px);font-size:clamp(1.25rem,5vw,3rem)}.sectionTitle__QfbAg::before{content:none}}@media(max-width: 550px){.section__TX1Cz::after{top:17rem}}@media(max-width: 360px){.section__TX1Cz::after{top:15rem}}',"",{version:3,sources:["webpack://./src/widgets/TimelineModule/ui/TimelineModule.module.scss"],names:[],mappings:"AAAA,gBACE,iBAAA,CACA,oBAAA,CACA,WAAA,CACA,cAAA,CACA,wBAAA,CACA,eAAA,CACA,aAAA,CACA,mDAAA,CACA,oDAAA,CACA,qBAAA,CACA,0BAAA,CACA,uBAAA,CAEA,+CAEE,UAAA,CACA,UAAA,CACA,iBAAA,CACA,4CAAA,CACA,qBAAA,CAGF,wBACE,QAAA,CACA,WAAA,CACA,WAAA,CACA,0BAAA,CAGF,uBACE,SAAA,CACA,MAAA,CACA,UAAA,CACA,YAAA,CACA,0BAAA,CAIJ,qBACE,iBAAA,CACA,cAAA,CACA,YAAA,CACA,kBAAA,CACA,aAAA,CACA,qBAAA,CACA,gCAAA,CACA,aAAA,CACA,QAAA,CACA,aAAA,CACA,0BAAA,CAEA,6BACE,UAAA,CACA,iBAAA,CACA,KAAA,CACA,MAAA,CACA,SAAA,CACA,WAAA,CACA,uDAAA,CAIJ,0BACE,gBACE,OAAA,CAAA,CAGJ,0BACE,qBACE,QAAA,CACA,iBAAA,CAAA,CAGJ,yBACE,gBACE,YAAA,CACA,WAAA,CACA,wBACE,YAAA,CAEF,uBACE,SAAA,CAGJ,qBACE,uBAAA,CACA,cAAA,CACA,oBAAA,CACA,iCAAA,CACA,6BACE,YAAA,CAAA,CAIN,yBAEI,uBACE,SAAA,CAAA,CAIN,yBAEI,uBACE,SAAA,CAAA",sourcesContent:['.section {\r\n  position: relative;\r\n  width: 90% !important;\r\n  right: -3rem;\r\n  height: 67.5rem;\r\n  width: calc(100% - 10rem);\r\n  max-width: 90rem;\r\n  margin: 0 auto;\r\n  border-left: 1.8px solid #42567a20;\r\n  border-right: 1.8px solid #42567a20;\r\n  box-sizing: border-box;\r\n  backface-visibility: hidden;\r\n  transform: translateZ(0);\r\n\r\n  &::before,\r\n  &::after {\r\n    content: "";\r\n    z-index: -1;\r\n    position: absolute;\r\n    background-color: #42567a20;\r\n    will-change: transform;\r\n  }\r\n\r\n  &::before {\r\n    left: 50%;\r\n    width: 1.8px;\r\n    height: 100%;\r\n    transform: translateX(-50%);\r\n  }\r\n\r\n  &::after {\r\n    top: 30rem;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 1.8px;\r\n    transform: translateY(-50%);\r\n  }\r\n}\r\n\r\n.sectionTitle {\r\n  position: absolute;\r\n  width: 22.06rem;\r\n  display: flex;\r\n  align-items: center;\r\n  height: 7.5rem;\r\n  padding-left: 4.875rem;\r\n  font-size: clamp(3rem, 4vw, 3.5rem);\r\n  color: #42567a;\r\n  margin: 0;\r\n  top: 10.625rem;\r\n  font-family: "PT Sans Bold";\r\n\r\n  &::before {\r\n    content: "";\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 5px;\r\n    height: 100%;\r\n    background: linear-gradient(to bottom, #3877ee, #ef5da8);\r\n  }\r\n}\r\n\r\n@media (max-width: 1540px) {\r\n  .section {\r\n    right: 0;\r\n  }\r\n}\r\n@media (max-width: 1150px) {\r\n  .sectionTitle {\r\n    top: 7rem;\r\n    padding-left: 3rem;\r\n  }\r\n}\r\n@media (max-width: 900px) {\r\n  .section {\r\n    height: 100vh;\r\n    border: none;\r\n    &::before {\r\n      content: none;\r\n    }\r\n    &::after {\r\n      top: 19rem;\r\n    }\r\n  }\r\n  .sectionTitle {\r\n    width: calc(25vw + 10px);\r\n    padding-left: 0;\r\n    top: calc(7vw + -20px);\r\n    font-size: clamp(1.25rem, 5vw, 3rem);\r\n    &::before {\r\n      content: none;\r\n    }\r\n  }\r\n}\r\n@media (max-width: 550px) {\r\n  .section {\r\n    &::after {\r\n      top: 17rem;\r\n    }\r\n  }\r\n}\r\n@media (max-width: 360px) {\r\n  .section {\r\n    &::after {\r\n      top: 15rem;\r\n    }\r\n  }\r\n}\r\n'],sourceRoot:""}]),a.locals={section:"section__TX1Cz",sectionTitle:"sectionTitle__QfbAg"},e.exports=a},961:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(221)},971:(e,t,n)=>{"use strict";n.d(t,{A:()=>d});var r=n(354),a=n.n(r),i=n(314),o=n.n(i),l=n(417),s=n.n(l),u=new URL(n(548),n.b),c=o()(a()),f=s()(u);c.push([e.id,`@font-face{font-family:"Bebas Neue";src:url(${f}) format("woff");font-weight:normal;font-style:normal}`,"",{version:3,sources:["webpack://./src/assets/fonts/Bebas Neue/BebasNeue.css"],names:[],mappings:"AAAA,WACE,wBAAA,CACA,0DAAA,CACA,kBAAA,CACA,iBAAA",sourcesContent:['@font-face {\r\n  font-family: "Bebas Neue";\r\n  src: url("./BebasNeueRegular.woff") format("woff");\r\n  font-weight: normal;\r\n  font-style: normal;\r\n}\r\n'],sourceRoot:""}]);const d=c},982:(e,t,n)=>{"use strict";e.exports=n(477)},999:(e,t,n)=>{"use strict";n.d(t,{A:()=>h});var r=n(354),a=n.n(r),i=n(314),o=n.n(i),l=n(417),s=n.n(l),u=new URL(n(505),n.b),c=new URL(n(508),n.b),f=o()(a()),d=s()(u),p=s()(c);f.push([e.id,`@font-face{font-family:"PT Sans Bold";src:url(${d}) format("woff2");font-weight:600}@font-face{font-family:"PT Sans";src:url(${p}) format("woff2")}`,"",{version:3,sources:["webpack://./src/assets/fonts/PTSans/PTSans.css"],names:[],mappings:"AAAA,WACE,0BAAA,CACA,2DAAA,CACA,eAAA,CAGF,WACE,qBAAA,CACA,2DAAA",sourcesContent:['@font-face {\r\n  font-family: "PT Sans Bold";\r\n  src: url("./pt-sans_bold.woff2") format("woff2");\r\n  font-weight: 600;\r\n}\r\n\r\n@font-face {\r\n  font-family: "PT Sans";\r\n  src: url("./pt-sans_regular.woff2") format("woff2");\r\n}\r\n'],sourceRoot:""}]);const h=f}},r={};function a(e){var t=r[e];if(void 0!==t)return t.exports;var i=r[e]={id:e,exports:{}};return n[e](i,i.exports,a),i.exports}a.m=n,a.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return a.d(t,{a:t}),t},a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.f={},a.e=e=>Promise.all(Object.keys(a.f).reduce((t,n)=>(a.f[n](e,t),t),[])),a.u=e=>e+".js",a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="timeline-events-module:",a.l=(n,r,i,o)=>{if(e[n])e[n].push(r);else{var l,s;if(void 0!==i)for(var u=document.getElementsByTagName("script"),c=0;c<u.length;c++){var f=u[c];if(f.getAttribute("src")==n||f.getAttribute("data-webpack")==t+i){l=f;break}}l||(s=!0,(l=document.createElement("script")).charset="utf-8",l.timeout=120,a.nc&&l.setAttribute("nonce",a.nc),l.setAttribute("data-webpack",t+i),l.src=n),e[n]=[r];var d=(t,r)=>{l.onerror=l.onload=null,clearTimeout(p);var a=e[n];if(delete e[n],l.parentNode&&l.parentNode.removeChild(l),a&&a.forEach(e=>e(r)),t)return t(r)},p=setTimeout(d.bind(null,void 0,{type:"timeout",target:l}),12e4);l.onerror=d.bind(null,l.onerror),l.onload=d.bind(null,l.onload),s&&document.head.appendChild(l)}},a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.p="/",(()=>{a.b=document.baseURI||self.location.href;var e={792:0};a.f.j=(t,n)=>{var r=a.o(e,t)?e[t]:void 0;if(0!==r)if(r)n.push(r[2]);else{var i=new Promise((n,a)=>r=e[t]=[n,a]);n.push(r[2]=i);var o=a.p+a.u(t),l=new Error;a.l(o,n=>{if(a.o(e,t)&&(0!==(r=e[t])&&(e[t]=void 0),r)){var i=n&&("load"===n.type?"missing":n.type),o=n&&n.target&&n.target.src;l.message="Loading chunk "+t+" failed.\n("+i+": "+o+")",l.name="ChunkLoadError",l.type=i,l.request=o,r[1](l)}},"chunk-"+t,t)}};var t=(t,n)=>{var r,i,[o,l,s]=n,u=0;if(o.some(t=>0!==e[t])){for(r in l)a.o(l,r)&&(a.m[r]=l[r]);s&&s(a)}for(t&&t(n);u<o.length;u++)i=o[u],a.o(e,i)&&e[i]&&e[i][0](),e[i]=0},n=self.webpackChunktimeline_events_module=self.webpackChunktimeline_events_module||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})(),a.nc=void 0,(()=>{"use strict";var e=a(848),t=a(338),n=a(540),r=a(72),i=a.n(r),o=a(825),l=a.n(o),s=a(659),u=a.n(s),c=a(56),f=a.n(c),d=a(159),p=a.n(d),h=a(113),m=a.n(h),g=a(899),v=a.n(g),y={};y.styleTagTransform=m(),y.setAttributes=f(),y.insert=u().bind(null,"head"),y.domAPI=l(),y.insertStyleElement=p(),i()(v(),y);const b=v()&&v().locals?v().locals:void 0,A=[{id:0,firstYear:2018,lastYear:2018,description:"13 сентября — частное солнечное затмение, видимое в Южной Африке и части Антарктиды"},{id:1,firstYear:2e3,lastYear:2043,description:"Телескоп «Хаббл» обнаружил самую удалённую из всех обнаруженных галактик."},{id:2,firstYear:2004,lastYear:2054,description:"Компания Tesla официально представила первый в мире электрический грузовик Tesla Semi"},{id:3,firstYear:2010,lastYear:2078,description:"Рост инноваций, устойчивого развития и космических исследований"},{id:4,firstYear:2026,lastYear:2096,description:"Будущее урбанизации и искусственного интеллекта"},{id:5,firstYear:2058,lastYear:2123,description:"Гипотетическое будущее: колонизация, биотехнологии и новый уклад"}];var _=a(513),w=a.n(_),k={};k.styleTagTransform=m(),k.setAttributes=f(),k.insert=u().bind(null,"head"),k.domAPI=l(),k.insertStyleElement=p(),i()(w(),k);const C=w()&&w().locals?w().locals:void 0,S=()=>(0,e.jsx)("div",{className:C.fallbackCircleWrapper,children:(0,e.jsx)("div",{className:C.fallbackCircle})});var x=a(261),E=a.n(x),T={};T.styleTagTransform=m(),T.setAttributes=f(),T.insert=u().bind(null,"head"),T.domAPI=l(),T.insertStyleElement=p(),i()(E(),T);const P=E()&&E().locals?E().locals:void 0;var z=a(880);const N=268,O=(0,n.memo)(({years:t,activeId:r,onSelect:a})=>{const i=(0,n.useRef)(null),o=(0,n.useRef)([]),l=(0,n.useRef)({value:0}),s=(0,n.useRef)(0),u=(0,n.useRef)(null),[c,f]=(0,n.useState)(()=>t.findIndex(e=>e.id===r)),d=360/t.length;!function(e,t,r){(0,n.useEffect)(()=>{const n=()=>{var n,a;const i=null===(n=r.current)||void 0===n?void 0:n.value;"number"==typeof i&&(e.current&&z.Ay.set(e.current,{rotate:i}),null===(a=t.current)||void 0===a||a.forEach(e=>{e&&z.Ay.set(e,{rotate:-i})}))};return z.Ay.ticker.add(n),()=>{z.Ay.ticker.remove(n)}},[])}(i,o,l);const p=function(e,t,n,r,a){return i=>{var o;const l=-e*i;t(i),r.current=l,n.current&&(null===(o=a.current)||void 0===o||o.kill(),a.current=z.Ay.to(n.current,{value:l,duration:.95,ease:"power2.inOut"}))}}(d,f,l,s,u),h=(0,n.useCallback)((e,t)=>{p(e),f(e),null==a||a(t)},[p,a]);return(0,n.useEffect)(()=>{const e=t.findIndex(e=>e.id===r);-1!==e&&e!==c&&(p(e),f(e))},[r,c,t,p]),(0,e.jsx)("nav",{className:P.wrapper,children:(0,e.jsx)("div",{className:P.wrapperCircle,ref:i,children:t.map((t,n)=>{const r=d*n-45,a=N+N*Math.cos(r*Math.PI/180),i=N+N*Math.sin(r*Math.PI/180);return(0,e.jsx)("div",{className:`${P.wrapperPoint} ${n===c?P.active:""}`,style:{left:`${a}px`,top:`${i}px`},onClick:()=>h(n,t.id),children:(0,e.jsx)("div",{className:P.wrapperHitbox,children:(0,e.jsx)("div",{className:P.wrapperPointInner,children:(0,e.jsx)("span",{ref:e=>{e&&(o.current[n]=e)},children:n+1})})})},t.id)})})})});var M=a(25),L=a.n(M),F={};F.styleTagTransform=m(),F.setAttributes=f(),F.insert=u().bind(null,"head"),F.domAPI=l(),F.insertStyleElement=p(),i()(L(),F);const R=L()&&L().locals?L().locals:void 0,D=(e,t=950)=>{const[r,a]=(0,n.useState)(e);return(0,n.useEffect)(()=>{if(r===e)return;const n=e-r,i=Math.sign(n),o=Math.abs(n),l=t/o;let s=r,u=0;const c=()=>{u<o&&(s+=i,a(s),u++,setTimeout(c,l))};c()},[e]),r},B=({period:t})=>{const n=D(t.firstYear),r=D(t.lastYear);return(0,e.jsxs)("div",{className:R.header,children:[(0,e.jsx)("p",{className:R.headerFirstYear,children:n}),(0,e.jsx)("p",{className:R.headerLastYear,children:r})]})};var I=a(213),j=a.n(I),U={};U.styleTagTransform=m(),U.setAttributes=f(),U.insert=u().bind(null,"head"),U.domAPI=l(),U.insertStyleElement=p(),i()(j(),U);const H=j()&&j().locals?j().locals:void 0,q=(0,n.memo)(({current:t,total:n,onPrev:r,onNext:a,isPrevDisabled:i=!1,isNextDisabled:o=!1})=>(0,e.jsxs)("nav",{className:H.navigateTime,children:[(0,e.jsxs)("p",{className:H.navigateTimeParagraph,children:[String(t).padStart(2,"0"),"/",String(n).padStart(2,"0")]}),(0,e.jsxs)("div",{className:H.navigateTimeButtonBlock,children:[(0,e.jsx)("button",{className:H.navigateTimeButton,onClick:r,disabled:i,children:"<"}),(0,e.jsx)("button",{className:H.navigateTimeButton,onClick:a,disabled:o,children:">"})]})]})),$=(0,n.lazy)(()=>Promise.all([a.e(82),a.e(895)]).then(a.bind(a,397))),Y=()=>{const[t,r]=(0,n.useState)(A[0]),a=(0,n.useMemo)(()=>A.findIndex(e=>e.id===t.id),[t]),i=(0,n.useMemo)(()=>[t,...A.filter(e=>e.id!==t.id)],[t]);return(0,e.jsxs)("section",{className:b.section,children:[(0,e.jsx)("h2",{className:b.sectionTitle,children:"Исторические даты"}),(0,e.jsx)(O,{years:A,activeId:t.id,onSelect:e=>{const t=A.find(t=>t.id===e);t&&r(t)}}),(0,e.jsx)(B,{period:t}),(0,e.jsx)(q,{current:a+1,total:A.length,onPrev:()=>{a>0&&r(A[a-1])},onNext:()=>{a<A.length-1&&r(A[a+1])},isPrevDisabled:0===a,isNextDisabled:a===A.length-1}),(0,e.jsx)(n.Suspense,{fallback:(0,e.jsx)(S,{}),children:(0,e.jsx)($,{years:i,activeId:t.id,onChange:e=>{r(e)}})})]})};var V=a(97),Q={};Q.styleTagTransform=m(),Q.setAttributes=f(),Q.insert=u().bind(null,"head"),Q.domAPI=l(),Q.insertStyleElement=p(),i()(V.A,Q),V.A&&V.A.locals&&V.A.locals;var W=a(999),X={};X.styleTagTransform=m(),X.setAttributes=f(),X.insert=u().bind(null,"head"),X.domAPI=l(),X.insertStyleElement=p(),i()(W.A,X),W.A&&W.A.locals&&W.A.locals;var G=a(971),K={};K.styleTagTransform=m(),K.setAttributes=f(),K.insert=u().bind(null,"head"),K.domAPI=l(),K.insertStyleElement=p(),i()(G.A,K),G.A&&G.A.locals&&G.A.locals;const J=document.getElementById("root");if(!J)throw new Error("Root element not found");t.createRoot(J).render((0,e.jsx)(()=>(0,e.jsx)(e.Fragment,{children:(0,e.jsx)(Y,{})}),{}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,